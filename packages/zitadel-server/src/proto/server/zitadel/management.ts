/* eslint-disable */
import Long from "long";
import type { CallContext, CallOptions } from "nice-grpc-common";
import _m0 from "protobufjs/minimal";
import { Duration } from "../google/protobuf/duration";
import { Timestamp } from "../google/protobuf/timestamp";
import {
  Action,
  ActionFieldName,
  ActionIDQuery,
  ActionNameQuery,
  ActionStateQuery,
  Flow,
  FlowType,
  TriggerType,
} from "./action";
import {
  APIAuthMethodType,
  App,
  AppQuery,
  OIDCAppType,
  OIDCAuthMethodType,
  OIDCGrantType,
  OIDCResponseType,
  OIDCTokenType,
  OIDCVersion,
} from "./app";
import { Key, KeyType } from "./auth_n_key";
import { Change, ChangeQuery } from "./change";
import {
  AzureADTenant,
  IDP,
  IDPFieldName,
  IDPIDQuery,
  IDPLoginPolicyLink,
  IDPNameQuery,
  IDPOwnerType,
  IDPOwnerTypeQuery,
  IDPStylingType,
  IDPUserLink,
  LDAPAttributes,
  OIDCMappingField,
  Options,
  Provider,
  SAMLBinding,
} from "./idp";
import { Member, SearchQuery as SearchQuery1 } from "./member";
import { LocalizedMessage } from "./message";
import { Metadata, MetadataQuery } from "./metadata";
import { ListDetails, ListQuery, ObjectDetails } from "./object";
import { Domain, DomainSearchQuery, DomainValidationType, Org } from "./org";
import {
  DomainPolicy,
  LabelPolicy,
  LockoutPolicy,
  LoginPolicy,
  MultiFactorType,
  NotificationPolicy,
  OrgIAMPolicy,
  PasswordAgePolicy,
  PasswordComplexityPolicy,
  PasswordlessType,
  PrivacyPolicy,
  SecondFactorType,
  ThemeMode,
} from "./policy";
import {
  AllProjectGrantQuery,
  GrantedProject,
  PrivateLabelingSetting,
  Project,
  ProjectGrantQuery,
  ProjectQuery,
  Role,
  RoleQuery,
} from "./project";
import {
  EmailVerificationDoneScreenText,
  EmailVerificationScreenText,
  ExternalRegistrationUserOverviewScreenText,
  ExternalUserNotFoundScreenText,
  FooterText,
  InitializeUserDoneScreenText,
  InitializeUserScreenText,
  InitMFADoneScreenText,
  InitMFAOTPScreenText,
  InitMFAPromptScreenText,
  InitMFAU2FScreenText,
  InitPasswordDoneScreenText,
  InitPasswordScreenText,
  LinkingUserDoneScreenText,
  LoginCustomText,
  LoginScreenText,
  LogoutDoneScreenText,
  MessageCustomText,
  MFAProvidersText,
  PasswordChangeDoneScreenText,
  PasswordChangeScreenText,
  PasswordlessPromptScreenText,
  PasswordlessRegistrationDoneScreenText,
  PasswordlessRegistrationScreenText,
  PasswordlessScreenText,
  PasswordResetDoneScreenText,
  PasswordScreenText,
  RegistrationOptionScreenText,
  RegistrationOrgScreenText,
  RegistrationUserScreenText,
  SelectAccountScreenText,
  SuccessLoginScreenText,
  UsernameChangeDoneScreenText,
  UsernameChangeScreenText,
  VerifyMFAOTPScreenText,
  VerifyMFAU2FScreenText,
} from "./text";
import {
  AccessTokenType,
  AuthFactor,
  Email,
  Gender,
  Membership,
  MembershipQuery,
  PersonalAccessToken,
  Phone,
  Profile,
  SearchQuery,
  User,
  UserFieldName,
  UserGrant,
  UserGrantQuery,
  WebAuthNToken,
} from "./user";

export const protobufPackage = "zitadel.management.v1";

/** This is an empty request */
export interface HealthzRequest {
}

/** This is an empty response */
export interface HealthzResponse {
}

/** This is an empty request */
export interface GetOIDCInformationRequest {
}

export interface GetOIDCInformationResponse {
  issuer: string;
  discoveryEndpoint: string;
}

/** This is an empty request */
export interface GetIAMRequest {
}

export interface GetIAMResponse {
  /** deprecated: use default_org_id instead */
  globalOrgId: string;
  iamProjectId: string;
  defaultOrgId: string;
}

/** This is an empty request */
export interface GetSupportedLanguagesRequest {
}

export interface GetSupportedLanguagesResponse {
  languages: string[];
}

export interface GetUserByIDRequest {
  id: string;
}

export interface GetUserByIDResponse {
  user: User | undefined;
}

export interface GetUserByLoginNameGlobalRequest {
  loginName: string;
}

export interface GetUserByLoginNameGlobalResponse {
  user: User | undefined;
}

export interface ListUsersRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: UserFieldName;
  /** criteria the client is looking for */
  queries: SearchQuery[];
}

export interface ListUsersResponse {
  details: ListDetails | undefined;
  sortingColumn: UserFieldName;
  result: User[];
}

export interface ListUserChangesRequest {
  /** list limitations and ordering */
  query: ChangeQuery | undefined;
  userId: string;
}

export interface ListUserChangesResponse {
  /** zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info) */
  result: Change[];
}

export interface IsUserUniqueRequest {
  userName: string;
  email: string;
}

export interface IsUserUniqueResponse {
  isUnique: boolean;
}

export interface AddHumanUserRequest {
  userName: string;
  profile: AddHumanUserRequest_Profile | undefined;
  email: AddHumanUserRequest_Email | undefined;
  phone: AddHumanUserRequest_Phone | undefined;
  initialPassword: string;
}

export interface AddHumanUserRequest_Profile {
  firstName: string;
  lastName: string;
  nickName: string;
  displayName: string;
  preferredLanguage: string;
  gender: Gender;
}

export interface AddHumanUserRequest_Email {
  email: string;
  isEmailVerified: boolean;
}

export interface AddHumanUserRequest_Phone {
  /** has to be a global number */
  phone: string;
  isPhoneVerified: boolean;
}

export interface AddHumanUserResponse {
  userId: string;
  details: ObjectDetails | undefined;
}

/** Describe my Import Human User Request */
export interface ImportHumanUserRequest {
  userName: string;
  profile: ImportHumanUserRequest_Profile | undefined;
  email: ImportHumanUserRequest_Email | undefined;
  phone: ImportHumanUserRequest_Phone | undefined;
  password: string;
  hashedPassword: ImportHumanUserRequest_HashedPassword | undefined;
  passwordChangeRequired: boolean;
  requestPasswordlessRegistration: boolean;
  otpCode: string;
  idps: ImportHumanUserRequest_IDP[];
}

export interface ImportHumanUserRequest_Profile {
  firstName: string;
  lastName: string;
  nickName: string;
  displayName: string;
  preferredLanguage: string;
  gender: Gender;
}

export interface ImportHumanUserRequest_Email {
  email: string;
  isEmailVerified: boolean;
}

export interface ImportHumanUserRequest_Phone {
  phone: string;
  isPhoneVerified: boolean;
}

export interface ImportHumanUserRequest_HashedPassword {
  value: string;
}

export interface ImportHumanUserRequest_IDP {
  configId: string;
  externalUserId: string;
  displayName: string;
}

export interface ImportHumanUserResponse {
  userId: string;
  details: ObjectDetails | undefined;
  passwordlessRegistration: ImportHumanUserResponse_PasswordlessRegistration | undefined;
}

export interface ImportHumanUserResponse_PasswordlessRegistration {
  link: string;
  /** deprecated: use expiration instead */
  lifetime: Duration | undefined;
  expiration: Duration | undefined;
}

export interface AddMachineUserRequest {
  userName: string;
  name: string;
  description: string;
  accessTokenType: AccessTokenType;
}

export interface AddMachineUserResponse {
  userId: string;
  details: ObjectDetails | undefined;
}

export interface DeactivateUserRequest {
  id: string;
}

export interface DeactivateUserResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateUserRequest {
  id: string;
}

export interface ReactivateUserResponse {
  details: ObjectDetails | undefined;
}

export interface LockUserRequest {
  id: string;
}

export interface LockUserResponse {
  details: ObjectDetails | undefined;
}

export interface UnlockUserRequest {
  id: string;
}

export interface UnlockUserResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveUserRequest {
  id: string;
}

export interface RemoveUserResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateUserNameRequest {
  userId: string;
  userName: string;
}

export interface UpdateUserNameResponse {
  details: ObjectDetails | undefined;
}

export interface ListUserMetadataRequest {
  id: string;
  query: ListQuery | undefined;
  queries: MetadataQuery[];
}

export interface ListUserMetadataResponse {
  details: ListDetails | undefined;
  result: Metadata[];
}

export interface GetUserMetadataRequest {
  id: string;
  key: string;
}

export interface GetUserMetadataResponse {
  metadata: Metadata | undefined;
}

export interface SetUserMetadataRequest {
  id: string;
  key: string;
  value: Uint8Array;
}

export interface SetUserMetadataResponse {
  id: string;
  details: ObjectDetails | undefined;
}

export interface BulkSetUserMetadataRequest {
  id: string;
  metadata: BulkSetUserMetadataRequest_Metadata[];
}

export interface BulkSetUserMetadataRequest_Metadata {
  key: string;
  value: Uint8Array;
}

export interface BulkSetUserMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveUserMetadataRequest {
  id: string;
  key: string;
}

export interface RemoveUserMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface BulkRemoveUserMetadataRequest {
  id: string;
  keys: string[];
}

export interface BulkRemoveUserMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface GetHumanProfileRequest {
  userId: string;
}

export interface GetHumanProfileResponse {
  details: ObjectDetails | undefined;
  profile: Profile | undefined;
}

export interface UpdateHumanProfileRequest {
  userId: string;
  firstName: string;
  lastName: string;
  nickName: string;
  displayName: string;
  preferredLanguage: string;
  gender: Gender;
}

export interface UpdateHumanProfileResponse {
  details: ObjectDetails | undefined;
}

export interface GetHumanEmailRequest {
  userId: string;
}

export interface GetHumanEmailResponse {
  details: ObjectDetails | undefined;
  email: Email | undefined;
}

export interface UpdateHumanEmailRequest {
  userId: string;
  email: string;
  isEmailVerified: boolean;
}

export interface UpdateHumanEmailResponse {
  details: ObjectDetails | undefined;
}

export interface ResendHumanInitializationRequest {
  userId: string;
  email: string;
}

export interface ResendHumanInitializationResponse {
  details: ObjectDetails | undefined;
}

export interface ResendHumanEmailVerificationRequest {
  userId: string;
}

export interface ResendHumanEmailVerificationResponse {
  details: ObjectDetails | undefined;
}

export interface GetHumanPhoneRequest {
  userId: string;
}

export interface GetHumanPhoneResponse {
  details: ObjectDetails | undefined;
  phone: Phone | undefined;
}

export interface UpdateHumanPhoneRequest {
  userId: string;
  phone: string;
  isPhoneVerified: boolean;
}

export interface UpdateHumanPhoneResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveHumanPhoneRequest {
  userId: string;
}

export interface RemoveHumanPhoneResponse {
  details: ObjectDetails | undefined;
}

export interface ResendHumanPhoneVerificationRequest {
  userId: string;
}

export interface ResendHumanPhoneVerificationResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveHumanAvatarRequest {
  userId: string;
}

export interface RemoveHumanAvatarResponse {
  details: ObjectDetails | undefined;
}

export interface SetHumanInitialPasswordRequest {
  userId: string;
  password: string;
}

export interface SetHumanInitialPasswordResponse {
  details: ObjectDetails | undefined;
}

export interface SetHumanPasswordRequest {
  userId: string;
  password: string;
  noChangeRequired: boolean;
}

export interface SetHumanPasswordResponse {
  details: ObjectDetails | undefined;
}

export interface SendHumanResetPasswordNotificationRequest {
  userId: string;
  type: SendHumanResetPasswordNotificationRequest_Type;
}

export enum SendHumanResetPasswordNotificationRequest_Type {
  TYPE_EMAIL = 0,
  TYPE_SMS = 1,
  UNRECOGNIZED = -1,
}

export interface SendHumanResetPasswordNotificationResponse {
  details: ObjectDetails | undefined;
}

export interface ListHumanAuthFactorsRequest {
  userId: string;
}

export interface ListHumanAuthFactorsResponse {
  result: AuthFactor[];
}

export interface RemoveHumanAuthFactorOTPRequest {
  userId: string;
}

export interface RemoveHumanAuthFactorOTPResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveHumanAuthFactorU2FRequest {
  userId: string;
  tokenId: string;
}

export interface RemoveHumanAuthFactorU2FResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveHumanAuthFactorOTPSMSRequest {
  userId: string;
}

export interface RemoveHumanAuthFactorOTPSMSResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveHumanAuthFactorOTPEmailRequest {
  userId: string;
}

export interface RemoveHumanAuthFactorOTPEmailResponse {
  details: ObjectDetails | undefined;
}

export interface ListHumanPasswordlessRequest {
  userId: string;
}

export interface ListHumanPasswordlessResponse {
  result: WebAuthNToken[];
}

export interface AddPasswordlessRegistrationRequest {
  userId: string;
}

export interface AddPasswordlessRegistrationResponse {
  details: ObjectDetails | undefined;
  link: string;
  expiration: Duration | undefined;
}

export interface SendPasswordlessRegistrationRequest {
  userId: string;
}

export interface SendPasswordlessRegistrationResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveHumanPasswordlessRequest {
  userId: string;
  tokenId: string;
}

export interface RemoveHumanPasswordlessResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateMachineRequest {
  userId: string;
  description: string;
  name: string;
  accessTokenType: AccessTokenType;
}

export interface UpdateMachineResponse {
  details: ObjectDetails | undefined;
}

export interface GenerateMachineSecretRequest {
  userId: string;
}

export interface GenerateMachineSecretResponse {
  clientId: string;
  clientSecret: string;
  details: ObjectDetails | undefined;
}

export interface RemoveMachineSecretRequest {
  userId: string;
}

export interface RemoveMachineSecretResponse {
  details: ObjectDetails | undefined;
}

export interface GetMachineKeyByIDsRequest {
  userId: string;
  keyId: string;
}

export interface GetMachineKeyByIDsResponse {
  key: Key | undefined;
}

export interface ListMachineKeysRequest {
  userId: string;
  /** list limitations and ordering */
  query: ListQuery | undefined;
}

export interface ListMachineKeysResponse {
  details: ListDetails | undefined;
  result: Key[];
}

export interface AddMachineKeyRequest {
  userId: string;
  type: KeyType;
  expirationDate: Date | undefined;
}

export interface AddMachineKeyResponse {
  keyId: string;
  keyDetails: Uint8Array;
  details: ObjectDetails | undefined;
}

export interface RemoveMachineKeyRequest {
  userId: string;
  keyId: string;
}

export interface RemoveMachineKeyResponse {
  details: ObjectDetails | undefined;
}

export interface GetPersonalAccessTokenByIDsRequest {
  userId: string;
  tokenId: string;
}

export interface GetPersonalAccessTokenByIDsResponse {
  token: PersonalAccessToken | undefined;
}

export interface ListPersonalAccessTokensRequest {
  userId: string;
  /** list limitations and ordering */
  query: ListQuery | undefined;
}

export interface ListPersonalAccessTokensResponse {
  details: ListDetails | undefined;
  result: PersonalAccessToken[];
}

export interface AddPersonalAccessTokenRequest {
  userId: string;
  expirationDate: Date | undefined;
}

export interface AddPersonalAccessTokenResponse {
  tokenId: string;
  token: string;
  details: ObjectDetails | undefined;
}

export interface RemovePersonalAccessTokenRequest {
  userId: string;
  tokenId: string;
}

export interface RemovePersonalAccessTokenResponse {
  details: ObjectDetails | undefined;
}

export interface ListHumanLinkedIDPsRequest {
  userId: string;
  /** list limitations and ordering */
  query: ListQuery | undefined;
}

export interface ListHumanLinkedIDPsResponse {
  details: ListDetails | undefined;
  result: IDPUserLink[];
}

export interface RemoveHumanLinkedIDPRequest {
  userId: string;
  idpId: string;
  linkedUserId: string;
}

export interface RemoveHumanLinkedIDPResponse {
  details: ObjectDetails | undefined;
}

export interface ListUserMembershipsRequest {
  /** list limitations and ordering */
  userId: string;
  /** the field the result is sorted */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: MembershipQuery[];
}

export interface ListUserMembershipsResponse {
  details: ListDetails | undefined;
  result: Membership[];
}

/** This is an empty request */
export interface GetMyOrgRequest {
}

export interface GetMyOrgResponse {
  org: Org | undefined;
}

export interface GetOrgByDomainGlobalRequest {
  domain: string;
}

export interface ListOrgChangesRequest {
  /** list limitations and ordering */
  query: ChangeQuery | undefined;
}

export interface ListOrgChangesResponse {
  /** zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info) */
  result: Change[];
}

export interface GetOrgByDomainGlobalResponse {
  org: Org | undefined;
}

export interface AddOrgRequest {
  name: string;
}

export interface AddOrgResponse {
  id: string;
  details: ObjectDetails | undefined;
}

export interface UpdateOrgRequest {
  name: string;
}

export interface UpdateOrgResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface DeactivateOrgRequest {
}

export interface DeactivateOrgResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ReactivateOrgRequest {
}

export interface ReactivateOrgResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveOrgRequest {
}

export interface RemoveOrgResponse {
  details: ObjectDetails | undefined;
}

export interface ListOrgDomainsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: DomainSearchQuery[];
}

export interface ListOrgDomainsResponse {
  details: ListDetails | undefined;
  result: Domain[];
}

export interface AddOrgDomainRequest {
  domain: string;
}

export interface AddOrgDomainResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveOrgDomainRequest {
  domain: string;
}

export interface RemoveOrgDomainResponse {
  details: ObjectDetails | undefined;
}

export interface GenerateOrgDomainValidationRequest {
  domain: string;
  type: DomainValidationType;
}

export interface GenerateOrgDomainValidationResponse {
  token: string;
  url: string;
}

export interface ValidateOrgDomainRequest {
  domain: string;
}

export interface ValidateOrgDomainResponse {
  details: ObjectDetails | undefined;
}

export interface SetPrimaryOrgDomainRequest {
  domain: string;
}

export interface SetPrimaryOrgDomainResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ListOrgMemberRolesRequest {
}

export interface ListOrgMemberRolesResponse {
  result: string[];
}

export interface ListOrgMembersRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: SearchQuery1[];
}

export interface ListOrgMembersResponse {
  /** list limitations and ordering */
  details:
    | ListDetails
    | undefined;
  /** criteria the client is looking for */
  result: Member[];
}

export interface AddOrgMemberRequest {
  userId: string;
  roles: string[];
}

export interface AddOrgMemberResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateOrgMemberRequest {
  userId: string;
  roles: string[];
}

export interface UpdateOrgMemberResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveOrgMemberRequest {
  userId: string;
}

export interface RemoveOrgMemberResponse {
  details: ObjectDetails | undefined;
}

export interface ListOrgMetadataRequest {
  query: ListQuery | undefined;
  queries: MetadataQuery[];
}

export interface ListOrgMetadataResponse {
  details: ListDetails | undefined;
  result: Metadata[];
}

export interface GetOrgMetadataRequest {
  key: string;
}

export interface GetOrgMetadataResponse {
  metadata: Metadata | undefined;
}

export interface SetOrgMetadataRequest {
  key: string;
  value: Uint8Array;
}

export interface SetOrgMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface BulkSetOrgMetadataRequest {
  metadata: BulkSetOrgMetadataRequest_Metadata[];
}

export interface BulkSetOrgMetadataRequest_Metadata {
  key: string;
  value: Uint8Array;
}

export interface BulkSetOrgMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveOrgMetadataRequest {
  key: string;
}

export interface RemoveOrgMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface BulkRemoveOrgMetadataRequest {
  keys: string[];
}

export interface BulkRemoveOrgMetadataResponse {
  details: ObjectDetails | undefined;
}

export interface GetProjectByIDRequest {
  id: string;
}

export interface GetProjectByIDResponse {
  project: Project | undefined;
}

export interface GetGrantedProjectByIDRequest {
  projectId: string;
  grantId: string;
}

export interface GetGrantedProjectByIDResponse {
  grantedProject: GrantedProject | undefined;
}

export interface ListProjectsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: ProjectQuery[];
}

export interface ListProjectsResponse {
  details: ListDetails | undefined;
  result: Project[];
}

export interface ListGrantedProjectsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: ProjectQuery[];
}

export interface ListGrantedProjectsResponse {
  details: ListDetails | undefined;
  result: GrantedProject[];
}

export interface ListProjectChangesRequest {
  /** list limitations and ordering */
  query: ChangeQuery | undefined;
  projectId: string;
}

export interface ListProjectChangesResponse {
  /** zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info) */
  result: Change[];
}

export interface AddProjectRequest {
  name: string;
  projectRoleAssertion: boolean;
  projectRoleCheck: boolean;
  hasProjectCheck: boolean;
  privateLabelingSetting: PrivateLabelingSetting;
}

export interface AddProjectResponse {
  id: string;
  details: ObjectDetails | undefined;
}

export interface UpdateProjectRequest {
  id: string;
  name: string;
  projectRoleAssertion: boolean;
  projectRoleCheck: boolean;
  hasProjectCheck: boolean;
  privateLabelingSetting: PrivateLabelingSetting;
}

export interface UpdateProjectResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateProjectRequest {
  id: string;
}

export interface DeactivateProjectResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateProjectRequest {
  id: string;
}

export interface ReactivateProjectResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveProjectRequest {
  id: string;
}

export interface RemoveProjectResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ListProjectMemberRolesRequest {
}

export interface ListProjectMemberRolesResponse {
  details: ListDetails | undefined;
  result: string[];
}

export interface AddProjectRoleRequest {
  projectId: string;
  roleKey: string;
  displayName: string;
  group: string;
}

export interface AddProjectRoleResponse {
  details: ObjectDetails | undefined;
}

export interface BulkAddProjectRolesRequest {
  projectId: string;
  roles: BulkAddProjectRolesRequest_Role[];
}

export interface BulkAddProjectRolesRequest_Role {
  key: string;
  displayName: string;
  group: string;
}

export interface BulkAddProjectRolesResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateProjectRoleRequest {
  projectId: string;
  roleKey: string;
  displayName: string;
  group: string;
}

export interface UpdateProjectRoleResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveProjectRoleRequest {
  projectId: string;
  roleKey: string;
}

export interface RemoveProjectRoleResponse {
  details: ObjectDetails | undefined;
}

export interface ListProjectRolesRequest {
  projectId: string;
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: RoleQuery[];
}

export interface ListProjectRolesResponse {
  details: ListDetails | undefined;
  result: Role[];
}

export interface ListGrantedProjectRolesRequest {
  projectId: string;
  grantId: string;
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: RoleQuery[];
}

export interface ListGrantedProjectRolesResponse {
  details: ListDetails | undefined;
  result: Role[];
}

export interface ListProjectMembersRequest {
  projectId: string;
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: SearchQuery1[];
}

export interface ListProjectMembersResponse {
  details: ListDetails | undefined;
  result: Member[];
}

export interface AddProjectMemberRequest {
  projectId: string;
  userId: string;
  roles: string[];
}

export interface AddProjectMemberResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateProjectMemberRequest {
  projectId: string;
  userId: string;
  roles: string[];
}

export interface UpdateProjectMemberResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveProjectMemberRequest {
  projectId: string;
  userId: string;
}

export interface RemoveProjectMemberResponse {
  details: ObjectDetails | undefined;
}

export interface GetAppByIDRequest {
  projectId: string;
  appId: string;
}

export interface GetAppByIDResponse {
  app: App | undefined;
}

export interface ListAppsRequest {
  projectId: string;
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: AppQuery[];
}

export interface ListAppsResponse {
  details: ListDetails | undefined;
  result: App[];
}

export interface ListAppChangesRequest {
  /** list limitations and ordering */
  query: ChangeQuery | undefined;
  projectId: string;
  appId: string;
}

export interface ListAppChangesResponse {
  /** zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info) */
  result: Change[];
}

export interface AddOIDCAppRequest {
  projectId: string;
  name: string;
  redirectUris: string[];
  responseTypes: OIDCResponseType[];
  grantTypes: OIDCGrantType[];
  appType: OIDCAppType;
  authMethodType: OIDCAuthMethodType;
  postLogoutRedirectUris: string[];
  version: OIDCVersion;
  devMode: boolean;
  accessTokenType: OIDCTokenType;
  accessTokenRoleAssertion: boolean;
  idTokenRoleAssertion: boolean;
  idTokenUserinfoAssertion: boolean;
  clockSkew: Duration | undefined;
  additionalOrigins: string[];
  skipNativeAppSuccessPage: boolean;
}

export interface AddOIDCAppResponse {
  appId: string;
  details: ObjectDetails | undefined;
  clientId: string;
  clientSecret: string;
  noneCompliant: boolean;
  complianceProblems: LocalizedMessage[];
}

export interface AddSAMLAppRequest {
  projectId: string;
  name: string;
  metadataXml?: Uint8Array | undefined;
  metadataUrl?: string | undefined;
}

export interface AddSAMLAppResponse {
  appId: string;
  details: ObjectDetails | undefined;
}

export interface AddAPIAppRequest {
  projectId: string;
  name: string;
  authMethodType: APIAuthMethodType;
}

export interface AddAPIAppResponse {
  appId: string;
  details: ObjectDetails | undefined;
  clientId: string;
  clientSecret: string;
}

export interface UpdateAppRequest {
  projectId: string;
  appId: string;
  name: string;
}

export interface UpdateAppResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateOIDCAppConfigRequest {
  projectId: string;
  appId: string;
  redirectUris: string[];
  responseTypes: OIDCResponseType[];
  grantTypes: OIDCGrantType[];
  appType: OIDCAppType;
  authMethodType: OIDCAuthMethodType;
  postLogoutRedirectUris: string[];
  devMode: boolean;
  accessTokenType: OIDCTokenType;
  accessTokenRoleAssertion: boolean;
  idTokenRoleAssertion: boolean;
  idTokenUserinfoAssertion: boolean;
  clockSkew: Duration | undefined;
  additionalOrigins: string[];
  skipNativeAppSuccessPage: boolean;
}

export interface UpdateOIDCAppConfigResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateSAMLAppConfigRequest {
  projectId: string;
  appId: string;
  metadataXml?: Uint8Array | undefined;
  metadataUrl?: string | undefined;
}

export interface UpdateSAMLAppConfigResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateAPIAppConfigRequest {
  projectId: string;
  appId: string;
  authMethodType: APIAuthMethodType;
}

export interface UpdateAPIAppConfigResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateAppRequest {
  projectId: string;
  appId: string;
}

export interface DeactivateAppResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateAppRequest {
  projectId: string;
  appId: string;
}

export interface ReactivateAppResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveAppRequest {
  projectId: string;
  appId: string;
}

export interface RemoveAppResponse {
  details: ObjectDetails | undefined;
}

export interface RegenerateOIDCClientSecretRequest {
  projectId: string;
  appId: string;
}

export interface RegenerateOIDCClientSecretResponse {
  clientSecret: string;
  details: ObjectDetails | undefined;
}

export interface RegenerateAPIClientSecretRequest {
  projectId: string;
  appId: string;
}

export interface RegenerateAPIClientSecretResponse {
  clientSecret: string;
  details: ObjectDetails | undefined;
}

export interface GetAppKeyRequest {
  projectId: string;
  appId: string;
  keyId: string;
}

export interface GetAppKeyResponse {
  key: Key | undefined;
}

export interface ListAppKeysRequest {
  /** list limitations and ordering */
  query: ListQuery | undefined;
  appId: string;
  projectId: string;
}

export interface ListAppKeysResponse {
  details: ListDetails | undefined;
  result: Key[];
}

export interface AddAppKeyRequest {
  projectId: string;
  appId: string;
  type: KeyType;
  expirationDate: Date | undefined;
}

export interface AddAppKeyResponse {
  id: string;
  details: ObjectDetails | undefined;
  keyDetails: Uint8Array;
}

export interface RemoveAppKeyRequest {
  projectId: string;
  appId: string;
  keyId: string;
}

export interface RemoveAppKeyResponse {
  details: ObjectDetails | undefined;
}

export interface ListProjectGrantChangesRequest {
  /** list limitations and ordering */
  query: ChangeQuery | undefined;
  projectId: string;
  grantId: string;
}

export interface ListProjectGrantChangesResponse {
  /** zitadel.v1.ListDetails details = 1; was always returned empty (as we cannot get the necessary info) */
  result: Change[];
}

export interface GetProjectGrantByIDRequest {
  projectId: string;
  grantId: string;
}

export interface GetProjectGrantByIDResponse {
  projectGrant: GrantedProject | undefined;
}

export interface ListProjectGrantsRequest {
  projectId: string;
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: ProjectGrantQuery[];
}

export interface ListProjectGrantsResponse {
  details: ListDetails | undefined;
  result: GrantedProject[];
}

export interface ListAllProjectGrantsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: AllProjectGrantQuery[];
}

export interface ListAllProjectGrantsResponse {
  details: ListDetails | undefined;
  result: GrantedProject[];
}

export interface AddProjectGrantRequest {
  projectId: string;
  grantedOrgId: string;
  roleKeys: string[];
}

export interface AddProjectGrantResponse {
  grantId: string;
  details: ObjectDetails | undefined;
}

export interface UpdateProjectGrantRequest {
  projectId: string;
  grantId: string;
  roleKeys: string[];
}

export interface UpdateProjectGrantResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateProjectGrantRequest {
  projectId: string;
  grantId: string;
}

export interface DeactivateProjectGrantResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateProjectGrantRequest {
  projectId: string;
  grantId: string;
}

export interface ReactivateProjectGrantResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveProjectGrantRequest {
  projectId: string;
  grantId: string;
}

export interface RemoveProjectGrantResponse {
  details: ObjectDetails | undefined;
}

export interface ListProjectGrantMemberRolesRequest {
  query: ListQuery | undefined;
  result: string[];
}

export interface ListProjectGrantMemberRolesResponse {
  details: ListDetails | undefined;
  result: string[];
}

export interface ListProjectGrantMembersRequest {
  projectId: string;
  grantId: string;
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: SearchQuery1[];
}

export interface ListProjectGrantMembersResponse {
  details: ListDetails | undefined;
  result: Member[];
}

export interface AddProjectGrantMemberRequest {
  projectId: string;
  grantId: string;
  userId: string;
  roles: string[];
}

export interface AddProjectGrantMemberResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateProjectGrantMemberRequest {
  projectId: string;
  grantId: string;
  userId: string;
  roles: string[];
}

export interface UpdateProjectGrantMemberResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveProjectGrantMemberRequest {
  projectId: string;
  grantId: string;
  userId: string;
}

export interface RemoveProjectGrantMemberResponse {
  details: ObjectDetails | undefined;
}

export interface GetUserGrantByIDRequest {
  userId: string;
  grantId: string;
}

export interface GetUserGrantByIDResponse {
  userGrant: UserGrant | undefined;
}

export interface ListUserGrantRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: UserGrantQuery[];
}

export interface ListUserGrantResponse {
  details: ListDetails | undefined;
  result: UserGrant[];
}

export interface AddUserGrantRequest {
  userId: string;
  projectId: string;
  projectGrantId: string;
  roleKeys: string[];
}

export interface AddUserGrantResponse {
  userGrantId: string;
  details: ObjectDetails | undefined;
}

export interface UpdateUserGrantRequest {
  userId: string;
  grantId: string;
  roleKeys: string[];
}

export interface UpdateUserGrantResponse {
  details: ObjectDetails | undefined;
}

export interface DeactivateUserGrantRequest {
  userId: string;
  grantId: string;
}

export interface DeactivateUserGrantResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateUserGrantRequest {
  userId: string;
  grantId: string;
}

export interface ReactivateUserGrantResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveUserGrantRequest {
  userId: string;
  grantId: string;
}

export interface RemoveUserGrantResponse {
  details: ObjectDetails | undefined;
}

export interface BulkRemoveUserGrantRequest {
  grantId: string[];
}

export interface BulkRemoveUserGrantResponse {
}

export interface GetOrgIAMPolicyRequest {
}

export interface GetOrgIAMPolicyResponse {
  policy: OrgIAMPolicy | undefined;
}

export interface GetDomainPolicyRequest {
}

export interface GetDomainPolicyResponse {
  policy: DomainPolicy | undefined;
}

export interface GetLoginPolicyRequest {
}

export interface GetLoginPolicyResponse {
  policy:
    | LoginPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.LoginPolicy */
  isDefault: boolean;
}

export interface GetDefaultLoginPolicyRequest {
}

export interface GetDefaultLoginPolicyResponse {
  policy: LoginPolicy | undefined;
}

export interface AddCustomLoginPolicyRequest {
  allowUsernamePassword: boolean;
  allowRegister: boolean;
  allowExternalIdp: boolean;
  forceMfa: boolean;
  passwordlessType: PasswordlessType;
  hidePasswordReset: boolean;
  ignoreUnknownUsernames: boolean;
  defaultRedirectUri: string;
  passwordCheckLifetime: Duration | undefined;
  externalLoginCheckLifetime: Duration | undefined;
  mfaInitSkipLifetime: Duration | undefined;
  secondFactorCheckLifetime: Duration | undefined;
  multiFactorCheckLifetime: Duration | undefined;
  secondFactors: SecondFactorType[];
  multiFactors: MultiFactorType[];
  idps: AddCustomLoginPolicyRequest_IDP[];
  /** If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success. */
  allowDomainDiscovery: boolean;
  disableLoginWithEmail: boolean;
  disableLoginWithPhone: boolean;
  forceMfaLocalOnly: boolean;
}

export interface AddCustomLoginPolicyRequest_IDP {
  idpId: string;
  ownerType: IDPOwnerType;
}

export interface AddCustomLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomLoginPolicyRequest {
  allowUsernamePassword: boolean;
  allowRegister: boolean;
  allowExternalIdp: boolean;
  forceMfa: boolean;
  passwordlessType: PasswordlessType;
  hidePasswordReset: boolean;
  ignoreUnknownUsernames: boolean;
  defaultRedirectUri: string;
  passwordCheckLifetime: Duration | undefined;
  externalLoginCheckLifetime: Duration | undefined;
  mfaInitSkipLifetime: Duration | undefined;
  secondFactorCheckLifetime: Duration | undefined;
  multiFactorCheckLifetime:
    | Duration
    | undefined;
  /** If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success. */
  allowDomainDiscovery: boolean;
  disableLoginWithEmail: boolean;
  disableLoginWithPhone: boolean;
  forceMfaLocalOnly: boolean;
}

export interface UpdateCustomLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface ResetLoginPolicyToDefaultRequest {
}

export interface ResetLoginPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface ListLoginPolicyIDPsRequest {
  query: ListQuery | undefined;
}

export interface ListLoginPolicyIDPsResponse {
  details: ListDetails | undefined;
  result: IDPLoginPolicyLink[];
}

export interface AddIDPToLoginPolicyRequest {
  idpId: string;
  ownerType: IDPOwnerType;
}

export interface AddIDPToLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveIDPFromLoginPolicyRequest {
  idpId: string;
}

export interface RemoveIDPFromLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface ListLoginPolicySecondFactorsRequest {
}

export interface ListLoginPolicySecondFactorsResponse {
  details: ListDetails | undefined;
  result: SecondFactorType[];
}

export interface AddSecondFactorToLoginPolicyRequest {
  type: SecondFactorType;
}

export interface AddSecondFactorToLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveSecondFactorFromLoginPolicyRequest {
  type: SecondFactorType;
}

export interface RemoveSecondFactorFromLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface ListLoginPolicyMultiFactorsRequest {
}

export interface ListLoginPolicyMultiFactorsResponse {
  details: ListDetails | undefined;
  result: MultiFactorType[];
}

export interface AddMultiFactorToLoginPolicyRequest {
  type: MultiFactorType;
}

export interface AddMultiFactorToLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveMultiFactorFromLoginPolicyRequest {
  type: MultiFactorType;
}

export interface RemoveMultiFactorFromLoginPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface GetPasswordComplexityPolicyRequest {
}

export interface GetPasswordComplexityPolicyResponse {
  policy:
    | PasswordComplexityPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.PasswordComplexityPolicy */
  isDefault: boolean;
}

/** This is an empty request */
export interface GetDefaultPasswordComplexityPolicyRequest {
}

export interface GetDefaultPasswordComplexityPolicyResponse {
  policy: PasswordComplexityPolicy | undefined;
}

export interface AddCustomPasswordComplexityPolicyRequest {
  minLength: number;
  hasUppercase: boolean;
  hasLowercase: boolean;
  hasNumber: boolean;
  hasSymbol: boolean;
}

export interface AddCustomPasswordComplexityPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomPasswordComplexityPolicyRequest {
  minLength: number;
  hasUppercase: boolean;
  hasLowercase: boolean;
  hasNumber: boolean;
  hasSymbol: boolean;
}

export interface UpdateCustomPasswordComplexityPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetPasswordComplexityPolicyToDefaultRequest {
}

export interface ResetPasswordComplexityPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetPasswordAgePolicyRequest {
}

export interface GetPasswordAgePolicyResponse {
  policy:
    | PasswordAgePolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.PasswordAgePolicy */
  isDefault: boolean;
}

/** This is an empty request */
export interface GetDefaultPasswordAgePolicyRequest {
}

export interface GetDefaultPasswordAgePolicyResponse {
  policy: PasswordAgePolicy | undefined;
}

export interface AddCustomPasswordAgePolicyRequest {
  maxAgeDays: number;
  expireWarnDays: number;
}

export interface AddCustomPasswordAgePolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomPasswordAgePolicyRequest {
  maxAgeDays: number;
  expireWarnDays: number;
}

export interface UpdateCustomPasswordAgePolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetPasswordAgePolicyToDefaultRequest {
}

export interface ResetPasswordAgePolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetLockoutPolicyRequest {
}

export interface GetLockoutPolicyResponse {
  policy:
    | LockoutPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.LockoutPolicy */
  isDefault: boolean;
}

/** This is an empty request */
export interface GetDefaultLockoutPolicyRequest {
}

export interface GetDefaultLockoutPolicyResponse {
  policy: LockoutPolicy | undefined;
}

export interface AddCustomLockoutPolicyRequest {
  maxPasswordAttempts: number;
}

export interface AddCustomLockoutPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomLockoutPolicyRequest {
  maxPasswordAttempts: number;
}

export interface UpdateCustomLockoutPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetLockoutPolicyToDefaultRequest {
}

export interface ResetLockoutPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetPrivacyPolicyRequest {
}

export interface GetPrivacyPolicyResponse {
  policy: PrivacyPolicy | undefined;
}

/** This is an empty request */
export interface GetDefaultPrivacyPolicyRequest {
}

export interface GetDefaultPrivacyPolicyResponse {
  policy: PrivacyPolicy | undefined;
}

export interface AddCustomPrivacyPolicyRequest {
  tosLink: string;
  privacyLink: string;
  helpLink: string;
  supportEmail: string;
}

export interface AddCustomPrivacyPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomPrivacyPolicyRequest {
  tosLink: string;
  privacyLink: string;
  helpLink: string;
  supportEmail: string;
}

export interface UpdateCustomPrivacyPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetPrivacyPolicyToDefaultRequest {
}

export interface ResetPrivacyPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetNotificationPolicyRequest {
}

export interface GetNotificationPolicyResponse {
  policy: NotificationPolicy | undefined;
}

/** This is an empty request */
export interface GetDefaultNotificationPolicyRequest {
}

export interface GetDefaultNotificationPolicyResponse {
  policy: NotificationPolicy | undefined;
}

export interface AddCustomNotificationPolicyRequest {
  passwordChange: boolean;
}

export interface AddCustomNotificationPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomNotificationPolicyRequest {
  passwordChange: boolean;
}

export interface UpdateCustomNotificationPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetNotificationPolicyToDefaultRequest {
}

export interface ResetNotificationPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface GetLabelPolicyRequest {
}

export interface GetLabelPolicyResponse {
  policy:
    | LabelPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.LabelPolicy */
  isDefault: boolean;
}

/** This is an empty request */
export interface GetPreviewLabelPolicyRequest {
}

export interface GetPreviewLabelPolicyResponse {
  policy:
    | LabelPolicy
    | undefined;
  /** deprecated: is_default is also defined in zitadel.policy.v1.LabelPolicy */
  isDefault: boolean;
}

/** This is an empty request */
export interface GetDefaultLabelPolicyRequest {
}

export interface GetDefaultLabelPolicyResponse {
  policy: LabelPolicy | undefined;
}

export interface AddCustomLabelPolicyRequest {
  primaryColor: string;
  /** hides the org suffix on the login form if the scope \"urn:zitadel:iam:org:domain:primary:{domainname}\" is set */
  hideLoginNameSuffix: boolean;
  warnColor: string;
  backgroundColor: string;
  fontColor: string;
  primaryColorDark: string;
  backgroundColorDark: string;
  warnColorDark: string;
  fontColorDark: string;
  disableWatermark: boolean;
  themeMode: ThemeMode;
}

export interface AddCustomLabelPolicyResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateCustomLabelPolicyRequest {
  primaryColor: string;
  hideLoginNameSuffix: boolean;
  warnColor: string;
  backgroundColor: string;
  fontColor: string;
  primaryColorDark: string;
  backgroundColorDark: string;
  warnColorDark: string;
  fontColorDark: string;
  disableWatermark: boolean;
  themeMode: ThemeMode;
}

export interface UpdateCustomLabelPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ActivateCustomLabelPolicyRequest {
}

export interface ActivateCustomLabelPolicyResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveCustomLabelPolicyLogoRequest {
}

export interface RemoveCustomLabelPolicyLogoResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveCustomLabelPolicyLogoDarkRequest {
}

export interface RemoveCustomLabelPolicyLogoDarkResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveCustomLabelPolicyIconRequest {
}

export interface RemoveCustomLabelPolicyIconResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveCustomLabelPolicyIconDarkRequest {
}

export interface RemoveCustomLabelPolicyIconDarkResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface RemoveCustomLabelPolicyFontRequest {
}

export interface RemoveCustomLabelPolicyFontResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetLabelPolicyToDefaultRequest {
}

export interface ResetLabelPolicyToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomInitMessageTextRequest {
  language: string;
}

export interface GetCustomInitMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultInitMessageTextRequest {
  language: string;
}

export interface GetDefaultInitMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomInitMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomInitMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomInitMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomInitMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetDefaultLoginTextsRequest {
  language: string;
}

export interface GetDefaultLoginTextsResponse {
  customText: LoginCustomText | undefined;
}

export interface GetCustomLoginTextsRequest {
  language: string;
}

export interface GetCustomLoginTextsResponse {
  customText: LoginCustomText | undefined;
}

export interface SetCustomLoginTextsRequest {
  language: string;
  selectAccountText: SelectAccountScreenText | undefined;
  loginText: LoginScreenText | undefined;
  passwordText: PasswordScreenText | undefined;
  usernameChangeText: UsernameChangeScreenText | undefined;
  usernameChangeDoneText: UsernameChangeDoneScreenText | undefined;
  initPasswordText: InitPasswordScreenText | undefined;
  initPasswordDoneText: InitPasswordDoneScreenText | undefined;
  emailVerificationText: EmailVerificationScreenText | undefined;
  emailVerificationDoneText: EmailVerificationDoneScreenText | undefined;
  initializeUserText: InitializeUserScreenText | undefined;
  initializeDoneText: InitializeUserDoneScreenText | undefined;
  initMfaPromptText: InitMFAPromptScreenText | undefined;
  initMfaOtpText: InitMFAOTPScreenText | undefined;
  initMfaU2fText: InitMFAU2FScreenText | undefined;
  initMfaDoneText: InitMFADoneScreenText | undefined;
  mfaProvidersText: MFAProvidersText | undefined;
  verifyMfaOtpText: VerifyMFAOTPScreenText | undefined;
  verifyMfaU2fText: VerifyMFAU2FScreenText | undefined;
  passwordlessText: PasswordlessScreenText | undefined;
  passwordChangeText: PasswordChangeScreenText | undefined;
  passwordChangeDoneText: PasswordChangeDoneScreenText | undefined;
  passwordResetDoneText: PasswordResetDoneScreenText | undefined;
  registrationOptionText: RegistrationOptionScreenText | undefined;
  registrationUserText: RegistrationUserScreenText | undefined;
  registrationOrgText: RegistrationOrgScreenText | undefined;
  linkingUserDoneText: LinkingUserDoneScreenText | undefined;
  externalUserNotFoundText: ExternalUserNotFoundScreenText | undefined;
  successLoginText: SuccessLoginScreenText | undefined;
  logoutText: LogoutDoneScreenText | undefined;
  footerText: FooterText | undefined;
  passwordlessPromptText: PasswordlessPromptScreenText | undefined;
  passwordlessRegistrationText: PasswordlessRegistrationScreenText | undefined;
  passwordlessRegistrationDoneText: PasswordlessRegistrationDoneScreenText | undefined;
  externalRegistrationUserOverviewText: ExternalRegistrationUserOverviewScreenText | undefined;
}

export interface SetCustomLoginTextsResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomLoginTextsToDefaultRequest {
  language: string;
}

export interface ResetCustomLoginTextsToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomPasswordResetMessageTextRequest {
  language: string;
}

export interface GetCustomPasswordResetMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultPasswordResetMessageTextRequest {
  language: string;
}

export interface GetDefaultPasswordResetMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomPasswordResetMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomPasswordResetMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomPasswordResetMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomPasswordResetMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomVerifyEmailMessageTextRequest {
  language: string;
}

export interface GetCustomVerifyEmailMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultVerifyEmailMessageTextRequest {
  language: string;
}

export interface GetDefaultVerifyEmailMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomVerifyEmailMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomVerifyEmailMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomVerifyEmailMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomVerifyEmailMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomVerifyPhoneMessageTextRequest {
  language: string;
}

export interface GetCustomVerifyPhoneMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultVerifyPhoneMessageTextRequest {
  language: string;
}

export interface GetDefaultVerifyPhoneMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomVerifyPhoneMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomVerifyPhoneMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomVerifyPhoneMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomVerifyPhoneMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomVerifySMSOTPMessageTextRequest {
  language: string;
}

export interface GetCustomVerifySMSOTPMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultVerifySMSOTPMessageTextRequest {
  language: string;
}

export interface GetDefaultVerifySMSOTPMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomVerifySMSOTPMessageTextRequest {
  language: string;
  text: string;
}

export interface SetCustomVerifySMSOTPMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomVerifySMSOTPMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomVerifySMSOTPMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomVerifyEmailOTPMessageTextRequest {
  language: string;
}

export interface GetCustomVerifyEmailOTPMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultVerifyEmailOTPMessageTextRequest {
  language: string;
}

export interface GetDefaultVerifyEmailOTPMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomVerifyEmailOTPMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomVerifyEmailOTPMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomVerifyEmailOTPMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomVerifyEmailOTPMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomDomainClaimedMessageTextRequest {
  language: string;
}

export interface GetCustomDomainClaimedMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultDomainClaimedMessageTextRequest {
  language: string;
}

export interface GetDefaultDomainClaimedMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomDomainClaimedMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomDomainClaimedMessageTextResponse {
  details: ObjectDetails | undefined;
}

/** This is an empty request */
export interface ResetCustomDomainClaimedMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomDomainClaimedMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomPasswordlessRegistrationMessageTextRequest {
  language: string;
}

export interface GetCustomPasswordlessRegistrationMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultPasswordlessRegistrationMessageTextRequest {
  language: string;
}

export interface GetDefaultPasswordlessRegistrationMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomPasswordlessRegistrationMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomPasswordlessRegistrationMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetCustomPasswordChangeMessageTextRequest {
  language: string;
}

export interface GetCustomPasswordChangeMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface GetDefaultPasswordChangeMessageTextRequest {
  language: string;
}

export interface GetDefaultPasswordChangeMessageTextResponse {
  customText: MessageCustomText | undefined;
}

export interface SetCustomPasswordChangeMessageTextRequest {
  language: string;
  title: string;
  preHeader: string;
  subject: string;
  greeting: string;
  text: string;
  buttonText: string;
  footerText: string;
}

export interface SetCustomPasswordChangeMessageTextResponse {
  details: ObjectDetails | undefined;
}

export interface ResetCustomPasswordChangeMessageTextToDefaultRequest {
  language: string;
}

export interface ResetCustomPasswordChangeMessageTextToDefaultResponse {
  details: ObjectDetails | undefined;
}

export interface GetOrgIDPByIDRequest {
  id: string;
}

export interface GetOrgIDPByIDResponse {
  idp: IDP | undefined;
}

export interface ListOrgIDPsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: IDPFieldName;
  /** criteria the client is looking for */
  queries: IDPQuery[];
}

export interface IDPQuery {
  idpIdQuery?: IDPIDQuery | undefined;
  idpNameQuery?: IDPNameQuery | undefined;
  ownerTypeQuery?: IDPOwnerTypeQuery | undefined;
}

export interface ListOrgIDPsResponse {
  details: ListDetails | undefined;
  sortingColumn: IDPFieldName;
  result: IDP[];
}

export interface AddOrgOIDCIDPRequest {
  name: string;
  stylingType: IDPStylingType;
  clientId: string;
  clientSecret: string;
  issuer: string;
  scopes: string[];
  displayNameMapping: OIDCMappingField;
  usernameMapping: OIDCMappingField;
  autoRegister: boolean;
}

export interface AddOrgOIDCIDPResponse {
  details: ObjectDetails | undefined;
  idpId: string;
}

export interface AddOrgJWTIDPRequest {
  name: string;
  stylingType: IDPStylingType;
  jwtEndpoint: string;
  issuer: string;
  keysEndpoint: string;
  headerName: string;
  autoRegister: boolean;
}

export interface AddOrgJWTIDPResponse {
  details: ObjectDetails | undefined;
  idpId: string;
}

export interface DeactivateOrgIDPRequest {
  idpId: string;
}

export interface DeactivateOrgIDPResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateOrgIDPRequest {
  idpId: string;
}

export interface ReactivateOrgIDPResponse {
  details: ObjectDetails | undefined;
}

export interface RemoveOrgIDPRequest {
  idpId: string;
}

/** This is an empty response */
export interface RemoveOrgIDPResponse {
}

export interface UpdateOrgIDPRequest {
  idpId: string;
  name: string;
  stylingType: IDPStylingType;
  autoRegister: boolean;
}

export interface UpdateOrgIDPResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateOrgIDPOIDCConfigRequest {
  idpId: string;
  clientId: string;
  clientSecret: string;
  issuer: string;
  scopes: string[];
  displayNameMapping: OIDCMappingField;
  usernameMapping: OIDCMappingField;
}

export interface UpdateOrgIDPOIDCConfigResponse {
  details: ObjectDetails | undefined;
}

export interface UpdateOrgIDPJWTConfigRequest {
  idpId: string;
  jwtEndpoint: string;
  issuer: string;
  keysEndpoint: string;
  headerName: string;
}

export interface UpdateOrgIDPJWTConfigResponse {
  details: ObjectDetails | undefined;
}

export interface ListProvidersRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** criteria the client is looking for */
  queries: ProviderQuery[];
}

export interface ProviderQuery {
  idpIdQuery?: IDPIDQuery | undefined;
  idpNameQuery?: IDPNameQuery | undefined;
  ownerTypeQuery?: IDPOwnerTypeQuery | undefined;
}

export interface ListProvidersResponse {
  details: ListDetails | undefined;
  result: Provider[];
}

export interface GetProviderByIDRequest {
  id: string;
}

export interface GetProviderByIDResponse {
  idp: Provider | undefined;
}

export interface AddGenericOAuthProviderRequest {
  name: string;
  clientId: string;
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  /** identifying attribute of the user in the response of the user_endpoint */
  idAttribute: string;
  providerOptions: Options | undefined;
}

export interface AddGenericOAuthProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGenericOAuthProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  /** identifying attribute of the user in the response of the user_endpoint */
  idAttribute: string;
  providerOptions: Options | undefined;
}

export interface UpdateGenericOAuthProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGenericOIDCProviderRequest {
  name: string;
  issuer: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
  isIdTokenMapping: boolean;
}

export interface AddGenericOIDCProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGenericOIDCProviderRequest {
  id: string;
  name: string;
  issuer: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
  isIdTokenMapping: boolean;
}

export interface UpdateGenericOIDCProviderResponse {
  details: ObjectDetails | undefined;
}

export interface MigrateGenericOIDCProviderRequest {
  id: string;
  azure?: AddAzureADProviderRequest | undefined;
  google?: AddGoogleProviderRequest | undefined;
}

export interface MigrateGenericOIDCProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddJWTProviderRequest {
  name: string;
  issuer: string;
  jwtEndpoint: string;
  keysEndpoint: string;
  headerName: string;
  providerOptions: Options | undefined;
}

export interface AddJWTProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateJWTProviderRequest {
  id: string;
  name: string;
  issuer: string;
  jwtEndpoint: string;
  keysEndpoint: string;
  headerName: string;
  providerOptions: Options | undefined;
}

export interface UpdateJWTProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddAzureADProviderRequest {
  name: string;
  clientId: string;
  clientSecret: string;
  /** if not provided the `common` tenant will be used */
  tenant: AzureADTenant | undefined;
  emailVerified: boolean;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddAzureADProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateAzureADProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  /** if not provided the `common` tenant will be used */
  tenant: AzureADTenant | undefined;
  emailVerified: boolean;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateAzureADProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitHubProviderRequest {
  /** GitHub will be used as default, if no name is provided */
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitHubProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitHubProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitHubProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitHubEnterpriseServerProviderRequest {
  clientId: string;
  name: string;
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitHubEnterpriseServerProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitHubEnterpriseServerProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  authorizationEndpoint: string;
  tokenEndpoint: string;
  userEndpoint: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitHubEnterpriseServerProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitLabProviderRequest {
  /** GitLab will be used as default, if no name is provided */
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitLabProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitLabProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitLabProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGitLabSelfHostedProviderRequest {
  issuer: string;
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGitLabSelfHostedProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGitLabSelfHostedProviderRequest {
  id: string;
  issuer: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGitLabSelfHostedProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddGoogleProviderRequest {
  /** Google will be used as default, if no name is provided */
  name: string;
  clientId: string;
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddGoogleProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateGoogleProviderRequest {
  id: string;
  name: string;
  clientId: string;
  /** client_secret will only be updated if provided */
  clientSecret: string;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateGoogleProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddLDAPProviderRequest {
  name: string;
  servers: string[];
  startTls: boolean;
  baseDn: string;
  bindDn: string;
  bindPassword: string;
  userBase: string;
  userObjectClasses: string[];
  userFilters: string[];
  timeout: Duration | undefined;
  attributes: LDAPAttributes | undefined;
  providerOptions: Options | undefined;
}

export interface AddLDAPProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateLDAPProviderRequest {
  id: string;
  name: string;
  servers: string[];
  startTls: boolean;
  baseDn: string;
  bindDn: string;
  bindPassword: string;
  userBase: string;
  userObjectClasses: string[];
  userFilters: string[];
  timeout: Duration | undefined;
  attributes: LDAPAttributes | undefined;
  providerOptions: Options | undefined;
}

export interface UpdateLDAPProviderResponse {
  details: ObjectDetails | undefined;
}

export interface AddSAMLProviderRequest {
  name: string;
  metadataXml?: Uint8Array | undefined;
  metadataUrl?: string | undefined;
  binding: SAMLBinding;
  withSignedRequest: boolean;
  providerOptions: Options | undefined;
}

export interface AddSAMLProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateSAMLProviderRequest {
  id: string;
  name: string;
  metadataXml?: Uint8Array | undefined;
  metadataUrl?: string | undefined;
  binding: SAMLBinding;
  withSignedRequest: boolean;
  providerOptions: Options | undefined;
}

export interface UpdateSAMLProviderResponse {
  details: ObjectDetails | undefined;
}

export interface RegenerateSAMLProviderCertificateRequest {
  id: string;
}

export interface RegenerateSAMLProviderCertificateResponse {
  details: ObjectDetails | undefined;
}

export interface AddAppleProviderRequest {
  /** Apple will be used as default, if no name is provided */
  name: string;
  clientId: string;
  teamId: string;
  keyId: string;
  privateKey: Uint8Array;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface AddAppleProviderResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface UpdateAppleProviderRequest {
  id: string;
  name: string;
  clientId: string;
  teamId: string;
  keyId: string;
  privateKey: Uint8Array;
  scopes: string[];
  providerOptions: Options | undefined;
}

export interface UpdateAppleProviderResponse {
  details: ObjectDetails | undefined;
}

export interface DeleteProviderRequest {
  id: string;
}

export interface DeleteProviderResponse {
  details: ObjectDetails | undefined;
}

export interface ListActionsRequest {
  /** list limitations and ordering */
  query:
    | ListQuery
    | undefined;
  /** the field the result is sorted */
  sortingColumn: ActionFieldName;
  /** criteria the client is looking for */
  queries: ActionQuery[];
}

export interface ActionQuery {
  actionIdQuery?: ActionIDQuery | undefined;
  actionNameQuery?: ActionNameQuery | undefined;
  actionStateQuery?: ActionStateQuery | undefined;
}

export interface ListActionsResponse {
  details: ListDetails | undefined;
  sortingColumn: ActionFieldName;
  result: Action[];
}

export interface CreateActionRequest {
  name: string;
  script: string;
  timeout: Duration | undefined;
  allowedToFail: boolean;
}

export interface CreateActionResponse {
  details: ObjectDetails | undefined;
  id: string;
}

export interface GetActionRequest {
  id: string;
}

export interface GetActionResponse {
  action: Action | undefined;
}

export interface UpdateActionRequest {
  id: string;
  name: string;
  script: string;
  timeout: Duration | undefined;
  allowedToFail: boolean;
}

export interface UpdateActionResponse {
  details: ObjectDetails | undefined;
}

export interface DeleteActionRequest {
  id: string;
}

export interface DeleteActionResponse {
}

export interface ListFlowTypesRequest {
}

export interface ListFlowTypesResponse {
  result: FlowType[];
}

export interface ListFlowTriggerTypesRequest {
  type: string;
}

export interface ListFlowTriggerTypesResponse {
  result: TriggerType[];
}

export interface DeactivateActionRequest {
  id: string;
}

export interface DeactivateActionResponse {
  details: ObjectDetails | undefined;
}

export interface ReactivateActionRequest {
  id: string;
}

export interface ReactivateActionResponse {
  details: ObjectDetails | undefined;
}

export interface GetFlowRequest {
  /** id of the flow */
  type: string;
}

export interface GetFlowResponse {
  flow: Flow | undefined;
}

export interface ClearFlowRequest {
  /** id of the flow */
  type: string;
}

export interface ClearFlowResponse {
  details: ObjectDetails | undefined;
}

export interface SetTriggerActionsRequest {
  /** id of the flow type */
  flowType: string;
  /** id of the trigger type */
  triggerType: string;
  actionIds: string[];
}

export interface SetTriggerActionsResponse {
  details: ObjectDetails | undefined;
}

function createBaseHealthzRequest(): HealthzRequest {
  return {};
}

export const HealthzRequest = {
  encode(_: HealthzRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HealthzRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthzRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<HealthzRequest>): HealthzRequest {
    return HealthzRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<HealthzRequest>): HealthzRequest {
    const message = createBaseHealthzRequest();
    return message;
  },
};

function createBaseHealthzResponse(): HealthzResponse {
  return {};
}

export const HealthzResponse = {
  encode(_: HealthzResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HealthzResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthzResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<HealthzResponse>): HealthzResponse {
    return HealthzResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<HealthzResponse>): HealthzResponse {
    const message = createBaseHealthzResponse();
    return message;
  },
};

function createBaseGetOIDCInformationRequest(): GetOIDCInformationRequest {
  return {};
}

export const GetOIDCInformationRequest = {
  encode(_: GetOIDCInformationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOIDCInformationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOIDCInformationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetOIDCInformationRequest>): GetOIDCInformationRequest {
    return GetOIDCInformationRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetOIDCInformationRequest>): GetOIDCInformationRequest {
    const message = createBaseGetOIDCInformationRequest();
    return message;
  },
};

function createBaseGetOIDCInformationResponse(): GetOIDCInformationResponse {
  return { issuer: "", discoveryEndpoint: "" };
}

export const GetOIDCInformationResponse = {
  encode(message: GetOIDCInformationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.issuer !== "") {
      writer.uint32(10).string(message.issuer);
    }
    if (message.discoveryEndpoint !== "") {
      writer.uint32(18).string(message.discoveryEndpoint);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOIDCInformationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOIDCInformationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.discoveryEndpoint = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetOIDCInformationResponse>): GetOIDCInformationResponse {
    return GetOIDCInformationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOIDCInformationResponse>): GetOIDCInformationResponse {
    const message = createBaseGetOIDCInformationResponse();
    message.issuer = object.issuer ?? "";
    message.discoveryEndpoint = object.discoveryEndpoint ?? "";
    return message;
  },
};

function createBaseGetIAMRequest(): GetIAMRequest {
  return {};
}

export const GetIAMRequest = {
  encode(_: GetIAMRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIAMRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIAMRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetIAMRequest>): GetIAMRequest {
    return GetIAMRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetIAMRequest>): GetIAMRequest {
    const message = createBaseGetIAMRequest();
    return message;
  },
};

function createBaseGetIAMResponse(): GetIAMResponse {
  return { globalOrgId: "", iamProjectId: "", defaultOrgId: "" };
}

export const GetIAMResponse = {
  encode(message: GetIAMResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.globalOrgId !== "") {
      writer.uint32(10).string(message.globalOrgId);
    }
    if (message.iamProjectId !== "") {
      writer.uint32(18).string(message.iamProjectId);
    }
    if (message.defaultOrgId !== "") {
      writer.uint32(26).string(message.defaultOrgId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIAMResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIAMResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.globalOrgId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.iamProjectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.defaultOrgId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetIAMResponse>): GetIAMResponse {
    return GetIAMResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetIAMResponse>): GetIAMResponse {
    const message = createBaseGetIAMResponse();
    message.globalOrgId = object.globalOrgId ?? "";
    message.iamProjectId = object.iamProjectId ?? "";
    message.defaultOrgId = object.defaultOrgId ?? "";
    return message;
  },
};

function createBaseGetSupportedLanguagesRequest(): GetSupportedLanguagesRequest {
  return {};
}

export const GetSupportedLanguagesRequest = {
  encode(_: GetSupportedLanguagesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSupportedLanguagesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSupportedLanguagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetSupportedLanguagesRequest>): GetSupportedLanguagesRequest {
    return GetSupportedLanguagesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetSupportedLanguagesRequest>): GetSupportedLanguagesRequest {
    const message = createBaseGetSupportedLanguagesRequest();
    return message;
  },
};

function createBaseGetSupportedLanguagesResponse(): GetSupportedLanguagesResponse {
  return { languages: [] };
}

export const GetSupportedLanguagesResponse = {
  encode(message: GetSupportedLanguagesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.languages) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSupportedLanguagesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSupportedLanguagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.languages.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetSupportedLanguagesResponse>): GetSupportedLanguagesResponse {
    return GetSupportedLanguagesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSupportedLanguagesResponse>): GetSupportedLanguagesResponse {
    const message = createBaseGetSupportedLanguagesResponse();
    message.languages = object.languages?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetUserByIDRequest(): GetUserByIDRequest {
  return { id: "" };
}

export const GetUserByIDRequest = {
  encode(message: GetUserByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetUserByIDRequest>): GetUserByIDRequest {
    return GetUserByIDRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserByIDRequest>): GetUserByIDRequest {
    const message = createBaseGetUserByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetUserByIDResponse(): GetUserByIDResponse {
  return { user: undefined };
}

export const GetUserByIDResponse = {
  encode(message: GetUserByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetUserByIDResponse>): GetUserByIDResponse {
    return GetUserByIDResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserByIDResponse>): GetUserByIDResponse {
    const message = createBaseGetUserByIDResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseGetUserByLoginNameGlobalRequest(): GetUserByLoginNameGlobalRequest {
  return { loginName: "" };
}

export const GetUserByLoginNameGlobalRequest = {
  encode(message: GetUserByLoginNameGlobalRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.loginName !== "") {
      writer.uint32(10).string(message.loginName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserByLoginNameGlobalRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByLoginNameGlobalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.loginName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetUserByLoginNameGlobalRequest>): GetUserByLoginNameGlobalRequest {
    return GetUserByLoginNameGlobalRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserByLoginNameGlobalRequest>): GetUserByLoginNameGlobalRequest {
    const message = createBaseGetUserByLoginNameGlobalRequest();
    message.loginName = object.loginName ?? "";
    return message;
  },
};

function createBaseGetUserByLoginNameGlobalResponse(): GetUserByLoginNameGlobalResponse {
  return { user: undefined };
}

export const GetUserByLoginNameGlobalResponse = {
  encode(message: GetUserByLoginNameGlobalResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserByLoginNameGlobalResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserByLoginNameGlobalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetUserByLoginNameGlobalResponse>): GetUserByLoginNameGlobalResponse {
    return GetUserByLoginNameGlobalResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserByLoginNameGlobalResponse>): GetUserByLoginNameGlobalResponse {
    const message = createBaseGetUserByLoginNameGlobalResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseListUsersRequest(): ListUsersRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListUsersRequest = {
  encode(message: ListUsersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      SearchQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUsersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(SearchQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListUsersRequest>): ListUsersRequest {
    return ListUsersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUsersRequest>): ListUsersRequest {
    const message = createBaseListUsersRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => SearchQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListUsersResponse(): ListUsersResponse {
  return { details: undefined, sortingColumn: 0, result: [] };
}

export const ListUsersResponse = {
  encode(message: ListUsersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.result) {
      User.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUsersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(User.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListUsersResponse>): ListUsersResponse {
    return ListUsersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUsersResponse>): ListUsersResponse {
    const message = createBaseListUsersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.result = object.result?.map((e) => User.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListUserChangesRequest(): ListUserChangesRequest {
  return { query: undefined, userId: "" };
}

export const ListUserChangesRequest = {
  encode(message: ListUserChangesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ChangeQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserChangesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserChangesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ChangeQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListUserChangesRequest>): ListUserChangesRequest {
    return ListUserChangesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUserChangesRequest>): ListUserChangesRequest {
    const message = createBaseListUserChangesRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ChangeQuery.fromPartial(object.query)
      : undefined;
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseListUserChangesResponse(): ListUserChangesResponse {
  return { result: [] };
}

export const ListUserChangesResponse = {
  encode(message: ListUserChangesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      Change.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserChangesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserChangesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Change.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListUserChangesResponse>): ListUserChangesResponse {
    return ListUserChangesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUserChangesResponse>): ListUserChangesResponse {
    const message = createBaseListUserChangesResponse();
    message.result = object.result?.map((e) => Change.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIsUserUniqueRequest(): IsUserUniqueRequest {
  return { userName: "", email: "" };
}

export const IsUserUniqueRequest = {
  encode(message: IsUserUniqueRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userName !== "") {
      writer.uint32(10).string(message.userName);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IsUserUniqueRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsUserUniqueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<IsUserUniqueRequest>): IsUserUniqueRequest {
    return IsUserUniqueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IsUserUniqueRequest>): IsUserUniqueRequest {
    const message = createBaseIsUserUniqueRequest();
    message.userName = object.userName ?? "";
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseIsUserUniqueResponse(): IsUserUniqueResponse {
  return { isUnique: false };
}

export const IsUserUniqueResponse = {
  encode(message: IsUserUniqueResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.isUnique === true) {
      writer.uint32(8).bool(message.isUnique);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IsUserUniqueResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIsUserUniqueResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.isUnique = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<IsUserUniqueResponse>): IsUserUniqueResponse {
    return IsUserUniqueResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IsUserUniqueResponse>): IsUserUniqueResponse {
    const message = createBaseIsUserUniqueResponse();
    message.isUnique = object.isUnique ?? false;
    return message;
  },
};

function createBaseAddHumanUserRequest(): AddHumanUserRequest {
  return { userName: "", profile: undefined, email: undefined, phone: undefined, initialPassword: "" };
}

export const AddHumanUserRequest = {
  encode(message: AddHumanUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userName !== "") {
      writer.uint32(10).string(message.userName);
    }
    if (message.profile !== undefined) {
      AddHumanUserRequest_Profile.encode(message.profile, writer.uint32(18).fork()).ldelim();
    }
    if (message.email !== undefined) {
      AddHumanUserRequest_Email.encode(message.email, writer.uint32(26).fork()).ldelim();
    }
    if (message.phone !== undefined) {
      AddHumanUserRequest_Phone.encode(message.phone, writer.uint32(34).fork()).ldelim();
    }
    if (message.initialPassword !== "") {
      writer.uint32(42).string(message.initialPassword);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddHumanUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddHumanUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.profile = AddHumanUserRequest_Profile.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.email = AddHumanUserRequest_Email.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.phone = AddHumanUserRequest_Phone.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.initialPassword = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddHumanUserRequest>): AddHumanUserRequest {
    return AddHumanUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddHumanUserRequest>): AddHumanUserRequest {
    const message = createBaseAddHumanUserRequest();
    message.userName = object.userName ?? "";
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? AddHumanUserRequest_Profile.fromPartial(object.profile)
      : undefined;
    message.email = (object.email !== undefined && object.email !== null)
      ? AddHumanUserRequest_Email.fromPartial(object.email)
      : undefined;
    message.phone = (object.phone !== undefined && object.phone !== null)
      ? AddHumanUserRequest_Phone.fromPartial(object.phone)
      : undefined;
    message.initialPassword = object.initialPassword ?? "";
    return message;
  },
};

function createBaseAddHumanUserRequest_Profile(): AddHumanUserRequest_Profile {
  return { firstName: "", lastName: "", nickName: "", displayName: "", preferredLanguage: "", gender: 0 };
}

export const AddHumanUserRequest_Profile = {
  encode(message: AddHumanUserRequest_Profile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.firstName !== "") {
      writer.uint32(10).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    if (message.nickName !== "") {
      writer.uint32(26).string(message.nickName);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.preferredLanguage !== "") {
      writer.uint32(42).string(message.preferredLanguage);
    }
    if (message.gender !== 0) {
      writer.uint32(48).int32(message.gender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddHumanUserRequest_Profile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddHumanUserRequest_Profile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nickName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.preferredLanguage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddHumanUserRequest_Profile>): AddHumanUserRequest_Profile {
    return AddHumanUserRequest_Profile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddHumanUserRequest_Profile>): AddHumanUserRequest_Profile {
    const message = createBaseAddHumanUserRequest_Profile();
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.nickName = object.nickName ?? "";
    message.displayName = object.displayName ?? "";
    message.preferredLanguage = object.preferredLanguage ?? "";
    message.gender = object.gender ?? 0;
    return message;
  },
};

function createBaseAddHumanUserRequest_Email(): AddHumanUserRequest_Email {
  return { email: "", isEmailVerified: false };
}

export const AddHumanUserRequest_Email = {
  encode(message: AddHumanUserRequest_Email, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.isEmailVerified === true) {
      writer.uint32(16).bool(message.isEmailVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddHumanUserRequest_Email {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddHumanUserRequest_Email();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isEmailVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddHumanUserRequest_Email>): AddHumanUserRequest_Email {
    return AddHumanUserRequest_Email.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddHumanUserRequest_Email>): AddHumanUserRequest_Email {
    const message = createBaseAddHumanUserRequest_Email();
    message.email = object.email ?? "";
    message.isEmailVerified = object.isEmailVerified ?? false;
    return message;
  },
};

function createBaseAddHumanUserRequest_Phone(): AddHumanUserRequest_Phone {
  return { phone: "", isPhoneVerified: false };
}

export const AddHumanUserRequest_Phone = {
  encode(message: AddHumanUserRequest_Phone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.phone !== "") {
      writer.uint32(10).string(message.phone);
    }
    if (message.isPhoneVerified === true) {
      writer.uint32(16).bool(message.isPhoneVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddHumanUserRequest_Phone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddHumanUserRequest_Phone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phone = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPhoneVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddHumanUserRequest_Phone>): AddHumanUserRequest_Phone {
    return AddHumanUserRequest_Phone.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddHumanUserRequest_Phone>): AddHumanUserRequest_Phone {
    const message = createBaseAddHumanUserRequest_Phone();
    message.phone = object.phone ?? "";
    message.isPhoneVerified = object.isPhoneVerified ?? false;
    return message;
  },
};

function createBaseAddHumanUserResponse(): AddHumanUserResponse {
  return { userId: "", details: undefined };
}

export const AddHumanUserResponse = {
  encode(message: AddHumanUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddHumanUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddHumanUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddHumanUserResponse>): AddHumanUserResponse {
    return AddHumanUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddHumanUserResponse>): AddHumanUserResponse {
    const message = createBaseAddHumanUserResponse();
    message.userId = object.userId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseImportHumanUserRequest(): ImportHumanUserRequest {
  return {
    userName: "",
    profile: undefined,
    email: undefined,
    phone: undefined,
    password: "",
    hashedPassword: undefined,
    passwordChangeRequired: false,
    requestPasswordlessRegistration: false,
    otpCode: "",
    idps: [],
  };
}

export const ImportHumanUserRequest = {
  encode(message: ImportHumanUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userName !== "") {
      writer.uint32(10).string(message.userName);
    }
    if (message.profile !== undefined) {
      ImportHumanUserRequest_Profile.encode(message.profile, writer.uint32(18).fork()).ldelim();
    }
    if (message.email !== undefined) {
      ImportHumanUserRequest_Email.encode(message.email, writer.uint32(26).fork()).ldelim();
    }
    if (message.phone !== undefined) {
      ImportHumanUserRequest_Phone.encode(message.phone, writer.uint32(34).fork()).ldelim();
    }
    if (message.password !== "") {
      writer.uint32(42).string(message.password);
    }
    if (message.hashedPassword !== undefined) {
      ImportHumanUserRequest_HashedPassword.encode(message.hashedPassword, writer.uint32(50).fork()).ldelim();
    }
    if (message.passwordChangeRequired === true) {
      writer.uint32(56).bool(message.passwordChangeRequired);
    }
    if (message.requestPasswordlessRegistration === true) {
      writer.uint32(64).bool(message.requestPasswordlessRegistration);
    }
    if (message.otpCode !== "") {
      writer.uint32(74).string(message.otpCode);
    }
    for (const v of message.idps) {
      ImportHumanUserRequest_IDP.encode(v!, writer.uint32(82).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.profile = ImportHumanUserRequest_Profile.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.email = ImportHumanUserRequest_Email.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.phone = ImportHumanUserRequest_Phone.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.password = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.hashedPassword = ImportHumanUserRequest_HashedPassword.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.passwordChangeRequired = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.requestPasswordlessRegistration = reader.bool();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.otpCode = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.idps.push(ImportHumanUserRequest_IDP.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ImportHumanUserRequest>): ImportHumanUserRequest {
    return ImportHumanUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportHumanUserRequest>): ImportHumanUserRequest {
    const message = createBaseImportHumanUserRequest();
    message.userName = object.userName ?? "";
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? ImportHumanUserRequest_Profile.fromPartial(object.profile)
      : undefined;
    message.email = (object.email !== undefined && object.email !== null)
      ? ImportHumanUserRequest_Email.fromPartial(object.email)
      : undefined;
    message.phone = (object.phone !== undefined && object.phone !== null)
      ? ImportHumanUserRequest_Phone.fromPartial(object.phone)
      : undefined;
    message.password = object.password ?? "";
    message.hashedPassword = (object.hashedPassword !== undefined && object.hashedPassword !== null)
      ? ImportHumanUserRequest_HashedPassword.fromPartial(object.hashedPassword)
      : undefined;
    message.passwordChangeRequired = object.passwordChangeRequired ?? false;
    message.requestPasswordlessRegistration = object.requestPasswordlessRegistration ?? false;
    message.otpCode = object.otpCode ?? "";
    message.idps = object.idps?.map((e) => ImportHumanUserRequest_IDP.fromPartial(e)) || [];
    return message;
  },
};

function createBaseImportHumanUserRequest_Profile(): ImportHumanUserRequest_Profile {
  return { firstName: "", lastName: "", nickName: "", displayName: "", preferredLanguage: "", gender: 0 };
}

export const ImportHumanUserRequest_Profile = {
  encode(message: ImportHumanUserRequest_Profile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.firstName !== "") {
      writer.uint32(10).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(18).string(message.lastName);
    }
    if (message.nickName !== "") {
      writer.uint32(26).string(message.nickName);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.preferredLanguage !== "") {
      writer.uint32(42).string(message.preferredLanguage);
    }
    if (message.gender !== 0) {
      writer.uint32(48).int32(message.gender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserRequest_Profile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserRequest_Profile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.nickName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.preferredLanguage = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ImportHumanUserRequest_Profile>): ImportHumanUserRequest_Profile {
    return ImportHumanUserRequest_Profile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportHumanUserRequest_Profile>): ImportHumanUserRequest_Profile {
    const message = createBaseImportHumanUserRequest_Profile();
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.nickName = object.nickName ?? "";
    message.displayName = object.displayName ?? "";
    message.preferredLanguage = object.preferredLanguage ?? "";
    message.gender = object.gender ?? 0;
    return message;
  },
};

function createBaseImportHumanUserRequest_Email(): ImportHumanUserRequest_Email {
  return { email: "", isEmailVerified: false };
}

export const ImportHumanUserRequest_Email = {
  encode(message: ImportHumanUserRequest_Email, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.isEmailVerified === true) {
      writer.uint32(16).bool(message.isEmailVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserRequest_Email {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserRequest_Email();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isEmailVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ImportHumanUserRequest_Email>): ImportHumanUserRequest_Email {
    return ImportHumanUserRequest_Email.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportHumanUserRequest_Email>): ImportHumanUserRequest_Email {
    const message = createBaseImportHumanUserRequest_Email();
    message.email = object.email ?? "";
    message.isEmailVerified = object.isEmailVerified ?? false;
    return message;
  },
};

function createBaseImportHumanUserRequest_Phone(): ImportHumanUserRequest_Phone {
  return { phone: "", isPhoneVerified: false };
}

export const ImportHumanUserRequest_Phone = {
  encode(message: ImportHumanUserRequest_Phone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.phone !== "") {
      writer.uint32(10).string(message.phone);
    }
    if (message.isPhoneVerified === true) {
      writer.uint32(16).bool(message.isPhoneVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserRequest_Phone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserRequest_Phone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.phone = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isPhoneVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ImportHumanUserRequest_Phone>): ImportHumanUserRequest_Phone {
    return ImportHumanUserRequest_Phone.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportHumanUserRequest_Phone>): ImportHumanUserRequest_Phone {
    const message = createBaseImportHumanUserRequest_Phone();
    message.phone = object.phone ?? "";
    message.isPhoneVerified = object.isPhoneVerified ?? false;
    return message;
  },
};

function createBaseImportHumanUserRequest_HashedPassword(): ImportHumanUserRequest_HashedPassword {
  return { value: "" };
}

export const ImportHumanUserRequest_HashedPassword = {
  encode(message: ImportHumanUserRequest_HashedPassword, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserRequest_HashedPassword {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserRequest_HashedPassword();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ImportHumanUserRequest_HashedPassword>): ImportHumanUserRequest_HashedPassword {
    return ImportHumanUserRequest_HashedPassword.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportHumanUserRequest_HashedPassword>): ImportHumanUserRequest_HashedPassword {
    const message = createBaseImportHumanUserRequest_HashedPassword();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseImportHumanUserRequest_IDP(): ImportHumanUserRequest_IDP {
  return { configId: "", externalUserId: "", displayName: "" };
}

export const ImportHumanUserRequest_IDP = {
  encode(message: ImportHumanUserRequest_IDP, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.configId !== "") {
      writer.uint32(10).string(message.configId);
    }
    if (message.externalUserId !== "") {
      writer.uint32(18).string(message.externalUserId);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserRequest_IDP {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserRequest_IDP();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.configId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.externalUserId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ImportHumanUserRequest_IDP>): ImportHumanUserRequest_IDP {
    return ImportHumanUserRequest_IDP.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportHumanUserRequest_IDP>): ImportHumanUserRequest_IDP {
    const message = createBaseImportHumanUserRequest_IDP();
    message.configId = object.configId ?? "";
    message.externalUserId = object.externalUserId ?? "";
    message.displayName = object.displayName ?? "";
    return message;
  },
};

function createBaseImportHumanUserResponse(): ImportHumanUserResponse {
  return { userId: "", details: undefined, passwordlessRegistration: undefined };
}

export const ImportHumanUserResponse = {
  encode(message: ImportHumanUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    if (message.passwordlessRegistration !== undefined) {
      ImportHumanUserResponse_PasswordlessRegistration.encode(
        message.passwordlessRegistration,
        writer.uint32(26).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.passwordlessRegistration = ImportHumanUserResponse_PasswordlessRegistration.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ImportHumanUserResponse>): ImportHumanUserResponse {
    return ImportHumanUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImportHumanUserResponse>): ImportHumanUserResponse {
    const message = createBaseImportHumanUserResponse();
    message.userId = object.userId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.passwordlessRegistration =
      (object.passwordlessRegistration !== undefined && object.passwordlessRegistration !== null)
        ? ImportHumanUserResponse_PasswordlessRegistration.fromPartial(object.passwordlessRegistration)
        : undefined;
    return message;
  },
};

function createBaseImportHumanUserResponse_PasswordlessRegistration(): ImportHumanUserResponse_PasswordlessRegistration {
  return { link: "", lifetime: undefined, expiration: undefined };
}

export const ImportHumanUserResponse_PasswordlessRegistration = {
  encode(
    message: ImportHumanUserResponse_PasswordlessRegistration,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.link !== "") {
      writer.uint32(10).string(message.link);
    }
    if (message.lifetime !== undefined) {
      Duration.encode(message.lifetime, writer.uint32(18).fork()).ldelim();
    }
    if (message.expiration !== undefined) {
      Duration.encode(message.expiration, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ImportHumanUserResponse_PasswordlessRegistration {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImportHumanUserResponse_PasswordlessRegistration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.link = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.lifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expiration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ImportHumanUserResponse_PasswordlessRegistration>,
  ): ImportHumanUserResponse_PasswordlessRegistration {
    return ImportHumanUserResponse_PasswordlessRegistration.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ImportHumanUserResponse_PasswordlessRegistration>,
  ): ImportHumanUserResponse_PasswordlessRegistration {
    const message = createBaseImportHumanUserResponse_PasswordlessRegistration();
    message.link = object.link ?? "";
    message.lifetime = (object.lifetime !== undefined && object.lifetime !== null)
      ? Duration.fromPartial(object.lifetime)
      : undefined;
    message.expiration = (object.expiration !== undefined && object.expiration !== null)
      ? Duration.fromPartial(object.expiration)
      : undefined;
    return message;
  },
};

function createBaseAddMachineUserRequest(): AddMachineUserRequest {
  return { userName: "", name: "", description: "", accessTokenType: 0 };
}

export const AddMachineUserRequest = {
  encode(message: AddMachineUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userName !== "") {
      writer.uint32(10).string(message.userName);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.accessTokenType !== 0) {
      writer.uint32(32).int32(message.accessTokenType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMachineUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMachineUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.accessTokenType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddMachineUserRequest>): AddMachineUserRequest {
    return AddMachineUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddMachineUserRequest>): AddMachineUserRequest {
    const message = createBaseAddMachineUserRequest();
    message.userName = object.userName ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.accessTokenType = object.accessTokenType ?? 0;
    return message;
  },
};

function createBaseAddMachineUserResponse(): AddMachineUserResponse {
  return { userId: "", details: undefined };
}

export const AddMachineUserResponse = {
  encode(message: AddMachineUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMachineUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMachineUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddMachineUserResponse>): AddMachineUserResponse {
    return AddMachineUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddMachineUserResponse>): AddMachineUserResponse {
    const message = createBaseAddMachineUserResponse();
    message.userId = object.userId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateUserRequest(): DeactivateUserRequest {
  return { id: "" };
}

export const DeactivateUserRequest = {
  encode(message: DeactivateUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateUserRequest>): DeactivateUserRequest {
    return DeactivateUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateUserRequest>): DeactivateUserRequest {
    const message = createBaseDeactivateUserRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeactivateUserResponse(): DeactivateUserResponse {
  return { details: undefined };
}

export const DeactivateUserResponse = {
  encode(message: DeactivateUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateUserResponse>): DeactivateUserResponse {
    return DeactivateUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateUserResponse>): DeactivateUserResponse {
    const message = createBaseDeactivateUserResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateUserRequest(): ReactivateUserRequest {
  return { id: "" };
}

export const ReactivateUserRequest = {
  encode(message: ReactivateUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateUserRequest>): ReactivateUserRequest {
    return ReactivateUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateUserRequest>): ReactivateUserRequest {
    const message = createBaseReactivateUserRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseReactivateUserResponse(): ReactivateUserResponse {
  return { details: undefined };
}

export const ReactivateUserResponse = {
  encode(message: ReactivateUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateUserResponse>): ReactivateUserResponse {
    return ReactivateUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateUserResponse>): ReactivateUserResponse {
    const message = createBaseReactivateUserResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseLockUserRequest(): LockUserRequest {
  return { id: "" };
}

export const LockUserRequest = {
  encode(message: LockUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LockUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLockUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<LockUserRequest>): LockUserRequest {
    return LockUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LockUserRequest>): LockUserRequest {
    const message = createBaseLockUserRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseLockUserResponse(): LockUserResponse {
  return { details: undefined };
}

export const LockUserResponse = {
  encode(message: LockUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LockUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLockUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<LockUserResponse>): LockUserResponse {
    return LockUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LockUserResponse>): LockUserResponse {
    const message = createBaseLockUserResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUnlockUserRequest(): UnlockUserRequest {
  return { id: "" };
}

export const UnlockUserRequest = {
  encode(message: UnlockUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnlockUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnlockUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UnlockUserRequest>): UnlockUserRequest {
    return UnlockUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnlockUserRequest>): UnlockUserRequest {
    const message = createBaseUnlockUserRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUnlockUserResponse(): UnlockUserResponse {
  return { details: undefined };
}

export const UnlockUserResponse = {
  encode(message: UnlockUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnlockUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnlockUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UnlockUserResponse>): UnlockUserResponse {
    return UnlockUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UnlockUserResponse>): UnlockUserResponse {
    const message = createBaseUnlockUserResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveUserRequest(): RemoveUserRequest {
  return { id: "" };
}

export const RemoveUserRequest = {
  encode(message: RemoveUserRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveUserRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveUserRequest>): RemoveUserRequest {
    return RemoveUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveUserRequest>): RemoveUserRequest {
    const message = createBaseRemoveUserRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveUserResponse(): RemoveUserResponse {
  return { details: undefined };
}

export const RemoveUserResponse = {
  encode(message: RemoveUserResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveUserResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveUserResponse>): RemoveUserResponse {
    return RemoveUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveUserResponse>): RemoveUserResponse {
    const message = createBaseRemoveUserResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateUserNameRequest(): UpdateUserNameRequest {
  return { userId: "", userName: "" };
}

export const UpdateUserNameRequest = {
  encode(message: UpdateUserNameRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.userName !== "") {
      writer.uint32(18).string(message.userName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateUserNameRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserNameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateUserNameRequest>): UpdateUserNameRequest {
    return UpdateUserNameRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateUserNameRequest>): UpdateUserNameRequest {
    const message = createBaseUpdateUserNameRequest();
    message.userId = object.userId ?? "";
    message.userName = object.userName ?? "";
    return message;
  },
};

function createBaseUpdateUserNameResponse(): UpdateUserNameResponse {
  return { details: undefined };
}

export const UpdateUserNameResponse = {
  encode(message: UpdateUserNameResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateUserNameResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserNameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateUserNameResponse>): UpdateUserNameResponse {
    return UpdateUserNameResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateUserNameResponse>): UpdateUserNameResponse {
    const message = createBaseUpdateUserNameResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListUserMetadataRequest(): ListUserMetadataRequest {
  return { id: "", query: undefined, queries: [] };
}

export const ListUserMetadataRequest = {
  encode(message: ListUserMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.queries) {
      MetadataQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(MetadataQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListUserMetadataRequest>): ListUserMetadataRequest {
    return ListUserMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUserMetadataRequest>): ListUserMetadataRequest {
    const message = createBaseListUserMetadataRequest();
    message.id = object.id ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => MetadataQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListUserMetadataResponse(): ListUserMetadataResponse {
  return { details: undefined, result: [] };
}

export const ListUserMetadataResponse = {
  encode(message: ListUserMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Metadata.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Metadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListUserMetadataResponse>): ListUserMetadataResponse {
    return ListUserMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUserMetadataResponse>): ListUserMetadataResponse {
    const message = createBaseListUserMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Metadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetUserMetadataRequest(): GetUserMetadataRequest {
  return { id: "", key: "" };
}

export const GetUserMetadataRequest = {
  encode(message: GetUserMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetUserMetadataRequest>): GetUserMetadataRequest {
    return GetUserMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserMetadataRequest>): GetUserMetadataRequest {
    const message = createBaseGetUserMetadataRequest();
    message.id = object.id ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseGetUserMetadataResponse(): GetUserMetadataResponse {
  return { metadata: undefined };
}

export const GetUserMetadataResponse = {
  encode(message: GetUserMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetUserMetadataResponse>): GetUserMetadataResponse {
    return GetUserMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserMetadataResponse>): GetUserMetadataResponse {
    const message = createBaseGetUserMetadataResponse();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseSetUserMetadataRequest(): SetUserMetadataRequest {
  return { id: "", key: "", value: new Uint8Array(0) };
}

export const SetUserMetadataRequest = {
  encode(message: SetUserMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(26).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetUserMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUserMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetUserMetadataRequest>): SetUserMetadataRequest {
    return SetUserMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetUserMetadataRequest>): SetUserMetadataRequest {
    const message = createBaseSetUserMetadataRequest();
    message.id = object.id ?? "";
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSetUserMetadataResponse(): SetUserMetadataResponse {
  return { id: "", details: undefined };
}

export const SetUserMetadataResponse = {
  encode(message: SetUserMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetUserMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetUserMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetUserMetadataResponse>): SetUserMetadataResponse {
    return SetUserMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetUserMetadataResponse>): SetUserMetadataResponse {
    const message = createBaseSetUserMetadataResponse();
    message.id = object.id ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseBulkSetUserMetadataRequest(): BulkSetUserMetadataRequest {
  return { id: "", metadata: [] };
}

export const BulkSetUserMetadataRequest = {
  encode(message: BulkSetUserMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.metadata) {
      BulkSetUserMetadataRequest_Metadata.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkSetUserMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkSetUserMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadata.push(BulkSetUserMetadataRequest_Metadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkSetUserMetadataRequest>): BulkSetUserMetadataRequest {
    return BulkSetUserMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkSetUserMetadataRequest>): BulkSetUserMetadataRequest {
    const message = createBaseBulkSetUserMetadataRequest();
    message.id = object.id ?? "";
    message.metadata = object.metadata?.map((e) => BulkSetUserMetadataRequest_Metadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBulkSetUserMetadataRequest_Metadata(): BulkSetUserMetadataRequest_Metadata {
  return { key: "", value: new Uint8Array(0) };
}

export const BulkSetUserMetadataRequest_Metadata = {
  encode(message: BulkSetUserMetadataRequest_Metadata, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkSetUserMetadataRequest_Metadata {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkSetUserMetadataRequest_Metadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkSetUserMetadataRequest_Metadata>): BulkSetUserMetadataRequest_Metadata {
    return BulkSetUserMetadataRequest_Metadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkSetUserMetadataRequest_Metadata>): BulkSetUserMetadataRequest_Metadata {
    const message = createBaseBulkSetUserMetadataRequest_Metadata();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseBulkSetUserMetadataResponse(): BulkSetUserMetadataResponse {
  return { details: undefined };
}

export const BulkSetUserMetadataResponse = {
  encode(message: BulkSetUserMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkSetUserMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkSetUserMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkSetUserMetadataResponse>): BulkSetUserMetadataResponse {
    return BulkSetUserMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkSetUserMetadataResponse>): BulkSetUserMetadataResponse {
    const message = createBaseBulkSetUserMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveUserMetadataRequest(): RemoveUserMetadataRequest {
  return { id: "", key: "" };
}

export const RemoveUserMetadataRequest = {
  encode(message: RemoveUserMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveUserMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveUserMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveUserMetadataRequest>): RemoveUserMetadataRequest {
    return RemoveUserMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveUserMetadataRequest>): RemoveUserMetadataRequest {
    const message = createBaseRemoveUserMetadataRequest();
    message.id = object.id ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseRemoveUserMetadataResponse(): RemoveUserMetadataResponse {
  return { details: undefined };
}

export const RemoveUserMetadataResponse = {
  encode(message: RemoveUserMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveUserMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveUserMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveUserMetadataResponse>): RemoveUserMetadataResponse {
    return RemoveUserMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveUserMetadataResponse>): RemoveUserMetadataResponse {
    const message = createBaseRemoveUserMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseBulkRemoveUserMetadataRequest(): BulkRemoveUserMetadataRequest {
  return { id: "", keys: [] };
}

export const BulkRemoveUserMetadataRequest = {
  encode(message: BulkRemoveUserMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.keys) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkRemoveUserMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkRemoveUserMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkRemoveUserMetadataRequest>): BulkRemoveUserMetadataRequest {
    return BulkRemoveUserMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkRemoveUserMetadataRequest>): BulkRemoveUserMetadataRequest {
    const message = createBaseBulkRemoveUserMetadataRequest();
    message.id = object.id ?? "";
    message.keys = object.keys?.map((e) => e) || [];
    return message;
  },
};

function createBaseBulkRemoveUserMetadataResponse(): BulkRemoveUserMetadataResponse {
  return { details: undefined };
}

export const BulkRemoveUserMetadataResponse = {
  encode(message: BulkRemoveUserMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkRemoveUserMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkRemoveUserMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkRemoveUserMetadataResponse>): BulkRemoveUserMetadataResponse {
    return BulkRemoveUserMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkRemoveUserMetadataResponse>): BulkRemoveUserMetadataResponse {
    const message = createBaseBulkRemoveUserMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetHumanProfileRequest(): GetHumanProfileRequest {
  return { userId: "" };
}

export const GetHumanProfileRequest = {
  encode(message: GetHumanProfileRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHumanProfileRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHumanProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetHumanProfileRequest>): GetHumanProfileRequest {
    return GetHumanProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHumanProfileRequest>): GetHumanProfileRequest {
    const message = createBaseGetHumanProfileRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetHumanProfileResponse(): GetHumanProfileResponse {
  return { details: undefined, profile: undefined };
}

export const GetHumanProfileResponse = {
  encode(message: GetHumanProfileResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.profile !== undefined) {
      Profile.encode(message.profile, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHumanProfileResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHumanProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.profile = Profile.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetHumanProfileResponse>): GetHumanProfileResponse {
    return GetHumanProfileResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHumanProfileResponse>): GetHumanProfileResponse {
    const message = createBaseGetHumanProfileResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? Profile.fromPartial(object.profile)
      : undefined;
    return message;
  },
};

function createBaseUpdateHumanProfileRequest(): UpdateHumanProfileRequest {
  return { userId: "", firstName: "", lastName: "", nickName: "", displayName: "", preferredLanguage: "", gender: 0 };
}

export const UpdateHumanProfileRequest = {
  encode(message: UpdateHumanProfileRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.firstName !== "") {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(26).string(message.lastName);
    }
    if (message.nickName !== "") {
      writer.uint32(34).string(message.nickName);
    }
    if (message.displayName !== "") {
      writer.uint32(42).string(message.displayName);
    }
    if (message.preferredLanguage !== "") {
      writer.uint32(50).string(message.preferredLanguage);
    }
    if (message.gender !== 0) {
      writer.uint32(56).int32(message.gender);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateHumanProfileRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHumanProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.nickName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.preferredLanguage = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.gender = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateHumanProfileRequest>): UpdateHumanProfileRequest {
    return UpdateHumanProfileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateHumanProfileRequest>): UpdateHumanProfileRequest {
    const message = createBaseUpdateHumanProfileRequest();
    message.userId = object.userId ?? "";
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.nickName = object.nickName ?? "";
    message.displayName = object.displayName ?? "";
    message.preferredLanguage = object.preferredLanguage ?? "";
    message.gender = object.gender ?? 0;
    return message;
  },
};

function createBaseUpdateHumanProfileResponse(): UpdateHumanProfileResponse {
  return { details: undefined };
}

export const UpdateHumanProfileResponse = {
  encode(message: UpdateHumanProfileResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateHumanProfileResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHumanProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateHumanProfileResponse>): UpdateHumanProfileResponse {
    return UpdateHumanProfileResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateHumanProfileResponse>): UpdateHumanProfileResponse {
    const message = createBaseUpdateHumanProfileResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetHumanEmailRequest(): GetHumanEmailRequest {
  return { userId: "" };
}

export const GetHumanEmailRequest = {
  encode(message: GetHumanEmailRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHumanEmailRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHumanEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetHumanEmailRequest>): GetHumanEmailRequest {
    return GetHumanEmailRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHumanEmailRequest>): GetHumanEmailRequest {
    const message = createBaseGetHumanEmailRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetHumanEmailResponse(): GetHumanEmailResponse {
  return { details: undefined, email: undefined };
}

export const GetHumanEmailResponse = {
  encode(message: GetHumanEmailResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.email !== undefined) {
      Email.encode(message.email, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHumanEmailResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHumanEmailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = Email.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetHumanEmailResponse>): GetHumanEmailResponse {
    return GetHumanEmailResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHumanEmailResponse>): GetHumanEmailResponse {
    const message = createBaseGetHumanEmailResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.email = (object.email !== undefined && object.email !== null) ? Email.fromPartial(object.email) : undefined;
    return message;
  },
};

function createBaseUpdateHumanEmailRequest(): UpdateHumanEmailRequest {
  return { userId: "", email: "", isEmailVerified: false };
}

export const UpdateHumanEmailRequest = {
  encode(message: UpdateHumanEmailRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.isEmailVerified === true) {
      writer.uint32(24).bool(message.isEmailVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateHumanEmailRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHumanEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isEmailVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateHumanEmailRequest>): UpdateHumanEmailRequest {
    return UpdateHumanEmailRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateHumanEmailRequest>): UpdateHumanEmailRequest {
    const message = createBaseUpdateHumanEmailRequest();
    message.userId = object.userId ?? "";
    message.email = object.email ?? "";
    message.isEmailVerified = object.isEmailVerified ?? false;
    return message;
  },
};

function createBaseUpdateHumanEmailResponse(): UpdateHumanEmailResponse {
  return { details: undefined };
}

export const UpdateHumanEmailResponse = {
  encode(message: UpdateHumanEmailResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateHumanEmailResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHumanEmailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateHumanEmailResponse>): UpdateHumanEmailResponse {
    return UpdateHumanEmailResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateHumanEmailResponse>): UpdateHumanEmailResponse {
    const message = createBaseUpdateHumanEmailResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResendHumanInitializationRequest(): ResendHumanInitializationRequest {
  return { userId: "", email: "" };
}

export const ResendHumanInitializationRequest = {
  encode(message: ResendHumanInitializationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResendHumanInitializationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendHumanInitializationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResendHumanInitializationRequest>): ResendHumanInitializationRequest {
    return ResendHumanInitializationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResendHumanInitializationRequest>): ResendHumanInitializationRequest {
    const message = createBaseResendHumanInitializationRequest();
    message.userId = object.userId ?? "";
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseResendHumanInitializationResponse(): ResendHumanInitializationResponse {
  return { details: undefined };
}

export const ResendHumanInitializationResponse = {
  encode(message: ResendHumanInitializationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResendHumanInitializationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendHumanInitializationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResendHumanInitializationResponse>): ResendHumanInitializationResponse {
    return ResendHumanInitializationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResendHumanInitializationResponse>): ResendHumanInitializationResponse {
    const message = createBaseResendHumanInitializationResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResendHumanEmailVerificationRequest(): ResendHumanEmailVerificationRequest {
  return { userId: "" };
}

export const ResendHumanEmailVerificationRequest = {
  encode(message: ResendHumanEmailVerificationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResendHumanEmailVerificationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendHumanEmailVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResendHumanEmailVerificationRequest>): ResendHumanEmailVerificationRequest {
    return ResendHumanEmailVerificationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResendHumanEmailVerificationRequest>): ResendHumanEmailVerificationRequest {
    const message = createBaseResendHumanEmailVerificationRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseResendHumanEmailVerificationResponse(): ResendHumanEmailVerificationResponse {
  return { details: undefined };
}

export const ResendHumanEmailVerificationResponse = {
  encode(message: ResendHumanEmailVerificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResendHumanEmailVerificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendHumanEmailVerificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResendHumanEmailVerificationResponse>): ResendHumanEmailVerificationResponse {
    return ResendHumanEmailVerificationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResendHumanEmailVerificationResponse>): ResendHumanEmailVerificationResponse {
    const message = createBaseResendHumanEmailVerificationResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetHumanPhoneRequest(): GetHumanPhoneRequest {
  return { userId: "" };
}

export const GetHumanPhoneRequest = {
  encode(message: GetHumanPhoneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHumanPhoneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHumanPhoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetHumanPhoneRequest>): GetHumanPhoneRequest {
    return GetHumanPhoneRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHumanPhoneRequest>): GetHumanPhoneRequest {
    const message = createBaseGetHumanPhoneRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetHumanPhoneResponse(): GetHumanPhoneResponse {
  return { details: undefined, phone: undefined };
}

export const GetHumanPhoneResponse = {
  encode(message: GetHumanPhoneResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.phone !== undefined) {
      Phone.encode(message.phone, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHumanPhoneResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHumanPhoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.phone = Phone.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetHumanPhoneResponse>): GetHumanPhoneResponse {
    return GetHumanPhoneResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHumanPhoneResponse>): GetHumanPhoneResponse {
    const message = createBaseGetHumanPhoneResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.phone = (object.phone !== undefined && object.phone !== null) ? Phone.fromPartial(object.phone) : undefined;
    return message;
  },
};

function createBaseUpdateHumanPhoneRequest(): UpdateHumanPhoneRequest {
  return { userId: "", phone: "", isPhoneVerified: false };
}

export const UpdateHumanPhoneRequest = {
  encode(message: UpdateHumanPhoneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.phone !== "") {
      writer.uint32(18).string(message.phone);
    }
    if (message.isPhoneVerified === true) {
      writer.uint32(24).bool(message.isPhoneVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateHumanPhoneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHumanPhoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.phone = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isPhoneVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateHumanPhoneRequest>): UpdateHumanPhoneRequest {
    return UpdateHumanPhoneRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateHumanPhoneRequest>): UpdateHumanPhoneRequest {
    const message = createBaseUpdateHumanPhoneRequest();
    message.userId = object.userId ?? "";
    message.phone = object.phone ?? "";
    message.isPhoneVerified = object.isPhoneVerified ?? false;
    return message;
  },
};

function createBaseUpdateHumanPhoneResponse(): UpdateHumanPhoneResponse {
  return { details: undefined };
}

export const UpdateHumanPhoneResponse = {
  encode(message: UpdateHumanPhoneResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateHumanPhoneResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateHumanPhoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateHumanPhoneResponse>): UpdateHumanPhoneResponse {
    return UpdateHumanPhoneResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateHumanPhoneResponse>): UpdateHumanPhoneResponse {
    const message = createBaseUpdateHumanPhoneResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveHumanPhoneRequest(): RemoveHumanPhoneRequest {
  return { userId: "" };
}

export const RemoveHumanPhoneRequest = {
  encode(message: RemoveHumanPhoneRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanPhoneRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanPhoneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanPhoneRequest>): RemoveHumanPhoneRequest {
    return RemoveHumanPhoneRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanPhoneRequest>): RemoveHumanPhoneRequest {
    const message = createBaseRemoveHumanPhoneRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveHumanPhoneResponse(): RemoveHumanPhoneResponse {
  return { details: undefined };
}

export const RemoveHumanPhoneResponse = {
  encode(message: RemoveHumanPhoneResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanPhoneResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanPhoneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanPhoneResponse>): RemoveHumanPhoneResponse {
    return RemoveHumanPhoneResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanPhoneResponse>): RemoveHumanPhoneResponse {
    const message = createBaseRemoveHumanPhoneResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResendHumanPhoneVerificationRequest(): ResendHumanPhoneVerificationRequest {
  return { userId: "" };
}

export const ResendHumanPhoneVerificationRequest = {
  encode(message: ResendHumanPhoneVerificationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResendHumanPhoneVerificationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendHumanPhoneVerificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResendHumanPhoneVerificationRequest>): ResendHumanPhoneVerificationRequest {
    return ResendHumanPhoneVerificationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResendHumanPhoneVerificationRequest>): ResendHumanPhoneVerificationRequest {
    const message = createBaseResendHumanPhoneVerificationRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseResendHumanPhoneVerificationResponse(): ResendHumanPhoneVerificationResponse {
  return { details: undefined };
}

export const ResendHumanPhoneVerificationResponse = {
  encode(message: ResendHumanPhoneVerificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResendHumanPhoneVerificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResendHumanPhoneVerificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResendHumanPhoneVerificationResponse>): ResendHumanPhoneVerificationResponse {
    return ResendHumanPhoneVerificationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResendHumanPhoneVerificationResponse>): ResendHumanPhoneVerificationResponse {
    const message = createBaseResendHumanPhoneVerificationResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveHumanAvatarRequest(): RemoveHumanAvatarRequest {
  return { userId: "" };
}

export const RemoveHumanAvatarRequest = {
  encode(message: RemoveHumanAvatarRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAvatarRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAvatarRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanAvatarRequest>): RemoveHumanAvatarRequest {
    return RemoveHumanAvatarRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanAvatarRequest>): RemoveHumanAvatarRequest {
    const message = createBaseRemoveHumanAvatarRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveHumanAvatarResponse(): RemoveHumanAvatarResponse {
  return { details: undefined };
}

export const RemoveHumanAvatarResponse = {
  encode(message: RemoveHumanAvatarResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAvatarResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAvatarResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanAvatarResponse>): RemoveHumanAvatarResponse {
    return RemoveHumanAvatarResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanAvatarResponse>): RemoveHumanAvatarResponse {
    const message = createBaseRemoveHumanAvatarResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseSetHumanInitialPasswordRequest(): SetHumanInitialPasswordRequest {
  return { userId: "", password: "" };
}

export const SetHumanInitialPasswordRequest = {
  encode(message: SetHumanInitialPasswordRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetHumanInitialPasswordRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetHumanInitialPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetHumanInitialPasswordRequest>): SetHumanInitialPasswordRequest {
    return SetHumanInitialPasswordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetHumanInitialPasswordRequest>): SetHumanInitialPasswordRequest {
    const message = createBaseSetHumanInitialPasswordRequest();
    message.userId = object.userId ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseSetHumanInitialPasswordResponse(): SetHumanInitialPasswordResponse {
  return { details: undefined };
}

export const SetHumanInitialPasswordResponse = {
  encode(message: SetHumanInitialPasswordResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetHumanInitialPasswordResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetHumanInitialPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetHumanInitialPasswordResponse>): SetHumanInitialPasswordResponse {
    return SetHumanInitialPasswordResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetHumanInitialPasswordResponse>): SetHumanInitialPasswordResponse {
    const message = createBaseSetHumanInitialPasswordResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseSetHumanPasswordRequest(): SetHumanPasswordRequest {
  return { userId: "", password: "", noChangeRequired: false };
}

export const SetHumanPasswordRequest = {
  encode(message: SetHumanPasswordRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    if (message.noChangeRequired === true) {
      writer.uint32(24).bool(message.noChangeRequired);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetHumanPasswordRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetHumanPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.noChangeRequired = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetHumanPasswordRequest>): SetHumanPasswordRequest {
    return SetHumanPasswordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetHumanPasswordRequest>): SetHumanPasswordRequest {
    const message = createBaseSetHumanPasswordRequest();
    message.userId = object.userId ?? "";
    message.password = object.password ?? "";
    message.noChangeRequired = object.noChangeRequired ?? false;
    return message;
  },
};

function createBaseSetHumanPasswordResponse(): SetHumanPasswordResponse {
  return { details: undefined };
}

export const SetHumanPasswordResponse = {
  encode(message: SetHumanPasswordResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetHumanPasswordResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetHumanPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetHumanPasswordResponse>): SetHumanPasswordResponse {
    return SetHumanPasswordResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetHumanPasswordResponse>): SetHumanPasswordResponse {
    const message = createBaseSetHumanPasswordResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseSendHumanResetPasswordNotificationRequest(): SendHumanResetPasswordNotificationRequest {
  return { userId: "", type: 0 };
}

export const SendHumanResetPasswordNotificationRequest = {
  encode(message: SendHumanResetPasswordNotificationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SendHumanResetPasswordNotificationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendHumanResetPasswordNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SendHumanResetPasswordNotificationRequest>): SendHumanResetPasswordNotificationRequest {
    return SendHumanResetPasswordNotificationRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SendHumanResetPasswordNotificationRequest>,
  ): SendHumanResetPasswordNotificationRequest {
    const message = createBaseSendHumanResetPasswordNotificationRequest();
    message.userId = object.userId ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseSendHumanResetPasswordNotificationResponse(): SendHumanResetPasswordNotificationResponse {
  return { details: undefined };
}

export const SendHumanResetPasswordNotificationResponse = {
  encode(message: SendHumanResetPasswordNotificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SendHumanResetPasswordNotificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendHumanResetPasswordNotificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SendHumanResetPasswordNotificationResponse>): SendHumanResetPasswordNotificationResponse {
    return SendHumanResetPasswordNotificationResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SendHumanResetPasswordNotificationResponse>,
  ): SendHumanResetPasswordNotificationResponse {
    const message = createBaseSendHumanResetPasswordNotificationResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListHumanAuthFactorsRequest(): ListHumanAuthFactorsRequest {
  return { userId: "" };
}

export const ListHumanAuthFactorsRequest = {
  encode(message: ListHumanAuthFactorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHumanAuthFactorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHumanAuthFactorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListHumanAuthFactorsRequest>): ListHumanAuthFactorsRequest {
    return ListHumanAuthFactorsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHumanAuthFactorsRequest>): ListHumanAuthFactorsRequest {
    const message = createBaseListHumanAuthFactorsRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseListHumanAuthFactorsResponse(): ListHumanAuthFactorsResponse {
  return { result: [] };
}

export const ListHumanAuthFactorsResponse = {
  encode(message: ListHumanAuthFactorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      AuthFactor.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHumanAuthFactorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHumanAuthFactorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(AuthFactor.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListHumanAuthFactorsResponse>): ListHumanAuthFactorsResponse {
    return ListHumanAuthFactorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHumanAuthFactorsResponse>): ListHumanAuthFactorsResponse {
    const message = createBaseListHumanAuthFactorsResponse();
    message.result = object.result?.map((e) => AuthFactor.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveHumanAuthFactorOTPRequest(): RemoveHumanAuthFactorOTPRequest {
  return { userId: "" };
}

export const RemoveHumanAuthFactorOTPRequest = {
  encode(message: RemoveHumanAuthFactorOTPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAuthFactorOTPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAuthFactorOTPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanAuthFactorOTPRequest>): RemoveHumanAuthFactorOTPRequest {
    return RemoveHumanAuthFactorOTPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanAuthFactorOTPRequest>): RemoveHumanAuthFactorOTPRequest {
    const message = createBaseRemoveHumanAuthFactorOTPRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveHumanAuthFactorOTPResponse(): RemoveHumanAuthFactorOTPResponse {
  return { details: undefined };
}

export const RemoveHumanAuthFactorOTPResponse = {
  encode(message: RemoveHumanAuthFactorOTPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAuthFactorOTPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAuthFactorOTPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanAuthFactorOTPResponse>): RemoveHumanAuthFactorOTPResponse {
    return RemoveHumanAuthFactorOTPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanAuthFactorOTPResponse>): RemoveHumanAuthFactorOTPResponse {
    const message = createBaseRemoveHumanAuthFactorOTPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveHumanAuthFactorU2FRequest(): RemoveHumanAuthFactorU2FRequest {
  return { userId: "", tokenId: "" };
}

export const RemoveHumanAuthFactorU2FRequest = {
  encode(message: RemoveHumanAuthFactorU2FRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.tokenId !== "") {
      writer.uint32(18).string(message.tokenId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAuthFactorU2FRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAuthFactorU2FRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tokenId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanAuthFactorU2FRequest>): RemoveHumanAuthFactorU2FRequest {
    return RemoveHumanAuthFactorU2FRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanAuthFactorU2FRequest>): RemoveHumanAuthFactorU2FRequest {
    const message = createBaseRemoveHumanAuthFactorU2FRequest();
    message.userId = object.userId ?? "";
    message.tokenId = object.tokenId ?? "";
    return message;
  },
};

function createBaseRemoveHumanAuthFactorU2FResponse(): RemoveHumanAuthFactorU2FResponse {
  return { details: undefined };
}

export const RemoveHumanAuthFactorU2FResponse = {
  encode(message: RemoveHumanAuthFactorU2FResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAuthFactorU2FResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAuthFactorU2FResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanAuthFactorU2FResponse>): RemoveHumanAuthFactorU2FResponse {
    return RemoveHumanAuthFactorU2FResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanAuthFactorU2FResponse>): RemoveHumanAuthFactorU2FResponse {
    const message = createBaseRemoveHumanAuthFactorU2FResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveHumanAuthFactorOTPSMSRequest(): RemoveHumanAuthFactorOTPSMSRequest {
  return { userId: "" };
}

export const RemoveHumanAuthFactorOTPSMSRequest = {
  encode(message: RemoveHumanAuthFactorOTPSMSRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAuthFactorOTPSMSRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAuthFactorOTPSMSRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanAuthFactorOTPSMSRequest>): RemoveHumanAuthFactorOTPSMSRequest {
    return RemoveHumanAuthFactorOTPSMSRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanAuthFactorOTPSMSRequest>): RemoveHumanAuthFactorOTPSMSRequest {
    const message = createBaseRemoveHumanAuthFactorOTPSMSRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveHumanAuthFactorOTPSMSResponse(): RemoveHumanAuthFactorOTPSMSResponse {
  return { details: undefined };
}

export const RemoveHumanAuthFactorOTPSMSResponse = {
  encode(message: RemoveHumanAuthFactorOTPSMSResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAuthFactorOTPSMSResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAuthFactorOTPSMSResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanAuthFactorOTPSMSResponse>): RemoveHumanAuthFactorOTPSMSResponse {
    return RemoveHumanAuthFactorOTPSMSResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanAuthFactorOTPSMSResponse>): RemoveHumanAuthFactorOTPSMSResponse {
    const message = createBaseRemoveHumanAuthFactorOTPSMSResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveHumanAuthFactorOTPEmailRequest(): RemoveHumanAuthFactorOTPEmailRequest {
  return { userId: "" };
}

export const RemoveHumanAuthFactorOTPEmailRequest = {
  encode(message: RemoveHumanAuthFactorOTPEmailRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAuthFactorOTPEmailRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAuthFactorOTPEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanAuthFactorOTPEmailRequest>): RemoveHumanAuthFactorOTPEmailRequest {
    return RemoveHumanAuthFactorOTPEmailRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanAuthFactorOTPEmailRequest>): RemoveHumanAuthFactorOTPEmailRequest {
    const message = createBaseRemoveHumanAuthFactorOTPEmailRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveHumanAuthFactorOTPEmailResponse(): RemoveHumanAuthFactorOTPEmailResponse {
  return { details: undefined };
}

export const RemoveHumanAuthFactorOTPEmailResponse = {
  encode(message: RemoveHumanAuthFactorOTPEmailResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanAuthFactorOTPEmailResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanAuthFactorOTPEmailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanAuthFactorOTPEmailResponse>): RemoveHumanAuthFactorOTPEmailResponse {
    return RemoveHumanAuthFactorOTPEmailResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanAuthFactorOTPEmailResponse>): RemoveHumanAuthFactorOTPEmailResponse {
    const message = createBaseRemoveHumanAuthFactorOTPEmailResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListHumanPasswordlessRequest(): ListHumanPasswordlessRequest {
  return { userId: "" };
}

export const ListHumanPasswordlessRequest = {
  encode(message: ListHumanPasswordlessRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHumanPasswordlessRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHumanPasswordlessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListHumanPasswordlessRequest>): ListHumanPasswordlessRequest {
    return ListHumanPasswordlessRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHumanPasswordlessRequest>): ListHumanPasswordlessRequest {
    const message = createBaseListHumanPasswordlessRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseListHumanPasswordlessResponse(): ListHumanPasswordlessResponse {
  return { result: [] };
}

export const ListHumanPasswordlessResponse = {
  encode(message: ListHumanPasswordlessResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      WebAuthNToken.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHumanPasswordlessResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHumanPasswordlessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(WebAuthNToken.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListHumanPasswordlessResponse>): ListHumanPasswordlessResponse {
    return ListHumanPasswordlessResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHumanPasswordlessResponse>): ListHumanPasswordlessResponse {
    const message = createBaseListHumanPasswordlessResponse();
    message.result = object.result?.map((e) => WebAuthNToken.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddPasswordlessRegistrationRequest(): AddPasswordlessRegistrationRequest {
  return { userId: "" };
}

export const AddPasswordlessRegistrationRequest = {
  encode(message: AddPasswordlessRegistrationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddPasswordlessRegistrationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPasswordlessRegistrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddPasswordlessRegistrationRequest>): AddPasswordlessRegistrationRequest {
    return AddPasswordlessRegistrationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddPasswordlessRegistrationRequest>): AddPasswordlessRegistrationRequest {
    const message = createBaseAddPasswordlessRegistrationRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseAddPasswordlessRegistrationResponse(): AddPasswordlessRegistrationResponse {
  return { details: undefined, link: "", expiration: undefined };
}

export const AddPasswordlessRegistrationResponse = {
  encode(message: AddPasswordlessRegistrationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.link !== "") {
      writer.uint32(18).string(message.link);
    }
    if (message.expiration !== undefined) {
      Duration.encode(message.expiration, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddPasswordlessRegistrationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPasswordlessRegistrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.link = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expiration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddPasswordlessRegistrationResponse>): AddPasswordlessRegistrationResponse {
    return AddPasswordlessRegistrationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddPasswordlessRegistrationResponse>): AddPasswordlessRegistrationResponse {
    const message = createBaseAddPasswordlessRegistrationResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.link = object.link ?? "";
    message.expiration = (object.expiration !== undefined && object.expiration !== null)
      ? Duration.fromPartial(object.expiration)
      : undefined;
    return message;
  },
};

function createBaseSendPasswordlessRegistrationRequest(): SendPasswordlessRegistrationRequest {
  return { userId: "" };
}

export const SendPasswordlessRegistrationRequest = {
  encode(message: SendPasswordlessRegistrationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SendPasswordlessRegistrationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendPasswordlessRegistrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SendPasswordlessRegistrationRequest>): SendPasswordlessRegistrationRequest {
    return SendPasswordlessRegistrationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendPasswordlessRegistrationRequest>): SendPasswordlessRegistrationRequest {
    const message = createBaseSendPasswordlessRegistrationRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseSendPasswordlessRegistrationResponse(): SendPasswordlessRegistrationResponse {
  return { details: undefined };
}

export const SendPasswordlessRegistrationResponse = {
  encode(message: SendPasswordlessRegistrationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SendPasswordlessRegistrationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendPasswordlessRegistrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SendPasswordlessRegistrationResponse>): SendPasswordlessRegistrationResponse {
    return SendPasswordlessRegistrationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendPasswordlessRegistrationResponse>): SendPasswordlessRegistrationResponse {
    const message = createBaseSendPasswordlessRegistrationResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveHumanPasswordlessRequest(): RemoveHumanPasswordlessRequest {
  return { userId: "", tokenId: "" };
}

export const RemoveHumanPasswordlessRequest = {
  encode(message: RemoveHumanPasswordlessRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.tokenId !== "") {
      writer.uint32(18).string(message.tokenId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanPasswordlessRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanPasswordlessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tokenId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanPasswordlessRequest>): RemoveHumanPasswordlessRequest {
    return RemoveHumanPasswordlessRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanPasswordlessRequest>): RemoveHumanPasswordlessRequest {
    const message = createBaseRemoveHumanPasswordlessRequest();
    message.userId = object.userId ?? "";
    message.tokenId = object.tokenId ?? "";
    return message;
  },
};

function createBaseRemoveHumanPasswordlessResponse(): RemoveHumanPasswordlessResponse {
  return { details: undefined };
}

export const RemoveHumanPasswordlessResponse = {
  encode(message: RemoveHumanPasswordlessResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanPasswordlessResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanPasswordlessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanPasswordlessResponse>): RemoveHumanPasswordlessResponse {
    return RemoveHumanPasswordlessResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanPasswordlessResponse>): RemoveHumanPasswordlessResponse {
    const message = createBaseRemoveHumanPasswordlessResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateMachineRequest(): UpdateMachineRequest {
  return { userId: "", description: "", name: "", accessTokenType: 0 };
}

export const UpdateMachineRequest = {
  encode(message: UpdateMachineRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.accessTokenType !== 0) {
      writer.uint32(32).int32(message.accessTokenType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateMachineRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMachineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.accessTokenType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateMachineRequest>): UpdateMachineRequest {
    return UpdateMachineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateMachineRequest>): UpdateMachineRequest {
    const message = createBaseUpdateMachineRequest();
    message.userId = object.userId ?? "";
    message.description = object.description ?? "";
    message.name = object.name ?? "";
    message.accessTokenType = object.accessTokenType ?? 0;
    return message;
  },
};

function createBaseUpdateMachineResponse(): UpdateMachineResponse {
  return { details: undefined };
}

export const UpdateMachineResponse = {
  encode(message: UpdateMachineResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateMachineResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMachineResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateMachineResponse>): UpdateMachineResponse {
    return UpdateMachineResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateMachineResponse>): UpdateMachineResponse {
    const message = createBaseUpdateMachineResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGenerateMachineSecretRequest(): GenerateMachineSecretRequest {
  return { userId: "" };
}

export const GenerateMachineSecretRequest = {
  encode(message: GenerateMachineSecretRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenerateMachineSecretRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateMachineSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GenerateMachineSecretRequest>): GenerateMachineSecretRequest {
    return GenerateMachineSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateMachineSecretRequest>): GenerateMachineSecretRequest {
    const message = createBaseGenerateMachineSecretRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGenerateMachineSecretResponse(): GenerateMachineSecretResponse {
  return { clientId: "", clientSecret: "", details: undefined };
}

export const GenerateMachineSecretResponse = {
  encode(message: GenerateMachineSecretResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(18).string(message.clientSecret);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenerateMachineSecretResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateMachineSecretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GenerateMachineSecretResponse>): GenerateMachineSecretResponse {
    return GenerateMachineSecretResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateMachineSecretResponse>): GenerateMachineSecretResponse {
    const message = createBaseGenerateMachineSecretResponse();
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveMachineSecretRequest(): RemoveMachineSecretRequest {
  return { userId: "" };
}

export const RemoveMachineSecretRequest = {
  encode(message: RemoveMachineSecretRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMachineSecretRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMachineSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveMachineSecretRequest>): RemoveMachineSecretRequest {
    return RemoveMachineSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveMachineSecretRequest>): RemoveMachineSecretRequest {
    const message = createBaseRemoveMachineSecretRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveMachineSecretResponse(): RemoveMachineSecretResponse {
  return { details: undefined };
}

export const RemoveMachineSecretResponse = {
  encode(message: RemoveMachineSecretResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMachineSecretResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMachineSecretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveMachineSecretResponse>): RemoveMachineSecretResponse {
    return RemoveMachineSecretResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveMachineSecretResponse>): RemoveMachineSecretResponse {
    const message = createBaseRemoveMachineSecretResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetMachineKeyByIDsRequest(): GetMachineKeyByIDsRequest {
  return { userId: "", keyId: "" };
}

export const GetMachineKeyByIDsRequest = {
  encode(message: GetMachineKeyByIDsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.keyId !== "") {
      writer.uint32(18).string(message.keyId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMachineKeyByIDsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMachineKeyByIDsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetMachineKeyByIDsRequest>): GetMachineKeyByIDsRequest {
    return GetMachineKeyByIDsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMachineKeyByIDsRequest>): GetMachineKeyByIDsRequest {
    const message = createBaseGetMachineKeyByIDsRequest();
    message.userId = object.userId ?? "";
    message.keyId = object.keyId ?? "";
    return message;
  },
};

function createBaseGetMachineKeyByIDsResponse(): GetMachineKeyByIDsResponse {
  return { key: undefined };
}

export const GetMachineKeyByIDsResponse = {
  encode(message: GetMachineKeyByIDsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== undefined) {
      Key.encode(message.key, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMachineKeyByIDsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMachineKeyByIDsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = Key.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetMachineKeyByIDsResponse>): GetMachineKeyByIDsResponse {
    return GetMachineKeyByIDsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMachineKeyByIDsResponse>): GetMachineKeyByIDsResponse {
    const message = createBaseGetMachineKeyByIDsResponse();
    message.key = (object.key !== undefined && object.key !== null) ? Key.fromPartial(object.key) : undefined;
    return message;
  },
};

function createBaseListMachineKeysRequest(): ListMachineKeysRequest {
  return { userId: "", query: undefined };
}

export const ListMachineKeysRequest = {
  encode(message: ListMachineKeysRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListMachineKeysRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMachineKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListMachineKeysRequest>): ListMachineKeysRequest {
    return ListMachineKeysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMachineKeysRequest>): ListMachineKeysRequest {
    const message = createBaseListMachineKeysRequest();
    message.userId = object.userId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListMachineKeysResponse(): ListMachineKeysResponse {
  return { details: undefined, result: [] };
}

export const ListMachineKeysResponse = {
  encode(message: ListMachineKeysResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Key.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListMachineKeysResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMachineKeysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Key.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListMachineKeysResponse>): ListMachineKeysResponse {
    return ListMachineKeysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMachineKeysResponse>): ListMachineKeysResponse {
    const message = createBaseListMachineKeysResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Key.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddMachineKeyRequest(): AddMachineKeyRequest {
  return { userId: "", type: 0, expirationDate: undefined };
}

export const AddMachineKeyRequest = {
  encode(message: AddMachineKeyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.expirationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationDate), writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMachineKeyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMachineKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.expirationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddMachineKeyRequest>): AddMachineKeyRequest {
    return AddMachineKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddMachineKeyRequest>): AddMachineKeyRequest {
    const message = createBaseAddMachineKeyRequest();
    message.userId = object.userId ?? "";
    message.type = object.type ?? 0;
    message.expirationDate = object.expirationDate ?? undefined;
    return message;
  },
};

function createBaseAddMachineKeyResponse(): AddMachineKeyResponse {
  return { keyId: "", keyDetails: new Uint8Array(0), details: undefined };
}

export const AddMachineKeyResponse = {
  encode(message: AddMachineKeyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.keyId !== "") {
      writer.uint32(10).string(message.keyId);
    }
    if (message.keyDetails.length !== 0) {
      writer.uint32(18).bytes(message.keyDetails);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMachineKeyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMachineKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keyDetails = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddMachineKeyResponse>): AddMachineKeyResponse {
    return AddMachineKeyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddMachineKeyResponse>): AddMachineKeyResponse {
    const message = createBaseAddMachineKeyResponse();
    message.keyId = object.keyId ?? "";
    message.keyDetails = object.keyDetails ?? new Uint8Array(0);
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveMachineKeyRequest(): RemoveMachineKeyRequest {
  return { userId: "", keyId: "" };
}

export const RemoveMachineKeyRequest = {
  encode(message: RemoveMachineKeyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.keyId !== "") {
      writer.uint32(18).string(message.keyId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMachineKeyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMachineKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.keyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveMachineKeyRequest>): RemoveMachineKeyRequest {
    return RemoveMachineKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveMachineKeyRequest>): RemoveMachineKeyRequest {
    const message = createBaseRemoveMachineKeyRequest();
    message.userId = object.userId ?? "";
    message.keyId = object.keyId ?? "";
    return message;
  },
};

function createBaseRemoveMachineKeyResponse(): RemoveMachineKeyResponse {
  return { details: undefined };
}

export const RemoveMachineKeyResponse = {
  encode(message: RemoveMachineKeyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMachineKeyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMachineKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveMachineKeyResponse>): RemoveMachineKeyResponse {
    return RemoveMachineKeyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveMachineKeyResponse>): RemoveMachineKeyResponse {
    const message = createBaseRemoveMachineKeyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPersonalAccessTokenByIDsRequest(): GetPersonalAccessTokenByIDsRequest {
  return { userId: "", tokenId: "" };
}

export const GetPersonalAccessTokenByIDsRequest = {
  encode(message: GetPersonalAccessTokenByIDsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.tokenId !== "") {
      writer.uint32(18).string(message.tokenId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPersonalAccessTokenByIDsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPersonalAccessTokenByIDsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tokenId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPersonalAccessTokenByIDsRequest>): GetPersonalAccessTokenByIDsRequest {
    return GetPersonalAccessTokenByIDsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPersonalAccessTokenByIDsRequest>): GetPersonalAccessTokenByIDsRequest {
    const message = createBaseGetPersonalAccessTokenByIDsRequest();
    message.userId = object.userId ?? "";
    message.tokenId = object.tokenId ?? "";
    return message;
  },
};

function createBaseGetPersonalAccessTokenByIDsResponse(): GetPersonalAccessTokenByIDsResponse {
  return { token: undefined };
}

export const GetPersonalAccessTokenByIDsResponse = {
  encode(message: GetPersonalAccessTokenByIDsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.token !== undefined) {
      PersonalAccessToken.encode(message.token, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPersonalAccessTokenByIDsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPersonalAccessTokenByIDsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token = PersonalAccessToken.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPersonalAccessTokenByIDsResponse>): GetPersonalAccessTokenByIDsResponse {
    return GetPersonalAccessTokenByIDsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPersonalAccessTokenByIDsResponse>): GetPersonalAccessTokenByIDsResponse {
    const message = createBaseGetPersonalAccessTokenByIDsResponse();
    message.token = (object.token !== undefined && object.token !== null)
      ? PersonalAccessToken.fromPartial(object.token)
      : undefined;
    return message;
  },
};

function createBaseListPersonalAccessTokensRequest(): ListPersonalAccessTokensRequest {
  return { userId: "", query: undefined };
}

export const ListPersonalAccessTokensRequest = {
  encode(message: ListPersonalAccessTokensRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListPersonalAccessTokensRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPersonalAccessTokensRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListPersonalAccessTokensRequest>): ListPersonalAccessTokensRequest {
    return ListPersonalAccessTokensRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPersonalAccessTokensRequest>): ListPersonalAccessTokensRequest {
    const message = createBaseListPersonalAccessTokensRequest();
    message.userId = object.userId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListPersonalAccessTokensResponse(): ListPersonalAccessTokensResponse {
  return { details: undefined, result: [] };
}

export const ListPersonalAccessTokensResponse = {
  encode(message: ListPersonalAccessTokensResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      PersonalAccessToken.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListPersonalAccessTokensResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPersonalAccessTokensResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(PersonalAccessToken.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListPersonalAccessTokensResponse>): ListPersonalAccessTokensResponse {
    return ListPersonalAccessTokensResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPersonalAccessTokensResponse>): ListPersonalAccessTokensResponse {
    const message = createBaseListPersonalAccessTokensResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => PersonalAccessToken.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddPersonalAccessTokenRequest(): AddPersonalAccessTokenRequest {
  return { userId: "", expirationDate: undefined };
}

export const AddPersonalAccessTokenRequest = {
  encode(message: AddPersonalAccessTokenRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.expirationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationDate), writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddPersonalAccessTokenRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPersonalAccessTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.expirationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddPersonalAccessTokenRequest>): AddPersonalAccessTokenRequest {
    return AddPersonalAccessTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddPersonalAccessTokenRequest>): AddPersonalAccessTokenRequest {
    const message = createBaseAddPersonalAccessTokenRequest();
    message.userId = object.userId ?? "";
    message.expirationDate = object.expirationDate ?? undefined;
    return message;
  },
};

function createBaseAddPersonalAccessTokenResponse(): AddPersonalAccessTokenResponse {
  return { tokenId: "", token: "", details: undefined };
}

export const AddPersonalAccessTokenResponse = {
  encode(message: AddPersonalAccessTokenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tokenId !== "") {
      writer.uint32(10).string(message.tokenId);
    }
    if (message.token !== "") {
      writer.uint32(18).string(message.token);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddPersonalAccessTokenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddPersonalAccessTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tokenId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.token = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddPersonalAccessTokenResponse>): AddPersonalAccessTokenResponse {
    return AddPersonalAccessTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddPersonalAccessTokenResponse>): AddPersonalAccessTokenResponse {
    const message = createBaseAddPersonalAccessTokenResponse();
    message.tokenId = object.tokenId ?? "";
    message.token = object.token ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemovePersonalAccessTokenRequest(): RemovePersonalAccessTokenRequest {
  return { userId: "", tokenId: "" };
}

export const RemovePersonalAccessTokenRequest = {
  encode(message: RemovePersonalAccessTokenRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.tokenId !== "") {
      writer.uint32(18).string(message.tokenId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemovePersonalAccessTokenRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemovePersonalAccessTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tokenId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemovePersonalAccessTokenRequest>): RemovePersonalAccessTokenRequest {
    return RemovePersonalAccessTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemovePersonalAccessTokenRequest>): RemovePersonalAccessTokenRequest {
    const message = createBaseRemovePersonalAccessTokenRequest();
    message.userId = object.userId ?? "";
    message.tokenId = object.tokenId ?? "";
    return message;
  },
};

function createBaseRemovePersonalAccessTokenResponse(): RemovePersonalAccessTokenResponse {
  return { details: undefined };
}

export const RemovePersonalAccessTokenResponse = {
  encode(message: RemovePersonalAccessTokenResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemovePersonalAccessTokenResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemovePersonalAccessTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemovePersonalAccessTokenResponse>): RemovePersonalAccessTokenResponse {
    return RemovePersonalAccessTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemovePersonalAccessTokenResponse>): RemovePersonalAccessTokenResponse {
    const message = createBaseRemovePersonalAccessTokenResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListHumanLinkedIDPsRequest(): ListHumanLinkedIDPsRequest {
  return { userId: "", query: undefined };
}

export const ListHumanLinkedIDPsRequest = {
  encode(message: ListHumanLinkedIDPsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHumanLinkedIDPsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHumanLinkedIDPsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListHumanLinkedIDPsRequest>): ListHumanLinkedIDPsRequest {
    return ListHumanLinkedIDPsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHumanLinkedIDPsRequest>): ListHumanLinkedIDPsRequest {
    const message = createBaseListHumanLinkedIDPsRequest();
    message.userId = object.userId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListHumanLinkedIDPsResponse(): ListHumanLinkedIDPsResponse {
  return { details: undefined, result: [] };
}

export const ListHumanLinkedIDPsResponse = {
  encode(message: ListHumanLinkedIDPsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      IDPUserLink.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListHumanLinkedIDPsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListHumanLinkedIDPsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(IDPUserLink.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListHumanLinkedIDPsResponse>): ListHumanLinkedIDPsResponse {
    return ListHumanLinkedIDPsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListHumanLinkedIDPsResponse>): ListHumanLinkedIDPsResponse {
    const message = createBaseListHumanLinkedIDPsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => IDPUserLink.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveHumanLinkedIDPRequest(): RemoveHumanLinkedIDPRequest {
  return { userId: "", idpId: "", linkedUserId: "" };
}

export const RemoveHumanLinkedIDPRequest = {
  encode(message: RemoveHumanLinkedIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.idpId !== "") {
      writer.uint32(18).string(message.idpId);
    }
    if (message.linkedUserId !== "") {
      writer.uint32(26).string(message.linkedUserId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanLinkedIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanLinkedIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.linkedUserId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanLinkedIDPRequest>): RemoveHumanLinkedIDPRequest {
    return RemoveHumanLinkedIDPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanLinkedIDPRequest>): RemoveHumanLinkedIDPRequest {
    const message = createBaseRemoveHumanLinkedIDPRequest();
    message.userId = object.userId ?? "";
    message.idpId = object.idpId ?? "";
    message.linkedUserId = object.linkedUserId ?? "";
    return message;
  },
};

function createBaseRemoveHumanLinkedIDPResponse(): RemoveHumanLinkedIDPResponse {
  return { details: undefined };
}

export const RemoveHumanLinkedIDPResponse = {
  encode(message: RemoveHumanLinkedIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveHumanLinkedIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveHumanLinkedIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveHumanLinkedIDPResponse>): RemoveHumanLinkedIDPResponse {
    return RemoveHumanLinkedIDPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveHumanLinkedIDPResponse>): RemoveHumanLinkedIDPResponse {
    const message = createBaseRemoveHumanLinkedIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListUserMembershipsRequest(): ListUserMembershipsRequest {
  return { userId: "", query: undefined, queries: [] };
}

export const ListUserMembershipsRequest = {
  encode(message: ListUserMembershipsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.queries) {
      MembershipQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserMembershipsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserMembershipsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(MembershipQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListUserMembershipsRequest>): ListUserMembershipsRequest {
    return ListUserMembershipsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUserMembershipsRequest>): ListUserMembershipsRequest {
    const message = createBaseListUserMembershipsRequest();
    message.userId = object.userId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => MembershipQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListUserMembershipsResponse(): ListUserMembershipsResponse {
  return { details: undefined, result: [] };
}

export const ListUserMembershipsResponse = {
  encode(message: ListUserMembershipsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Membership.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserMembershipsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserMembershipsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Membership.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListUserMembershipsResponse>): ListUserMembershipsResponse {
    return ListUserMembershipsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUserMembershipsResponse>): ListUserMembershipsResponse {
    const message = createBaseListUserMembershipsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Membership.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetMyOrgRequest(): GetMyOrgRequest {
  return {};
}

export const GetMyOrgRequest = {
  encode(_: GetMyOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMyOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMyOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetMyOrgRequest>): GetMyOrgRequest {
    return GetMyOrgRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetMyOrgRequest>): GetMyOrgRequest {
    const message = createBaseGetMyOrgRequest();
    return message;
  },
};

function createBaseGetMyOrgResponse(): GetMyOrgResponse {
  return { org: undefined };
}

export const GetMyOrgResponse = {
  encode(message: GetMyOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.org !== undefined) {
      Org.encode(message.org, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMyOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMyOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.org = Org.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetMyOrgResponse>): GetMyOrgResponse {
    return GetMyOrgResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMyOrgResponse>): GetMyOrgResponse {
    const message = createBaseGetMyOrgResponse();
    message.org = (object.org !== undefined && object.org !== null) ? Org.fromPartial(object.org) : undefined;
    return message;
  },
};

function createBaseGetOrgByDomainGlobalRequest(): GetOrgByDomainGlobalRequest {
  return { domain: "" };
}

export const GetOrgByDomainGlobalRequest = {
  encode(message: GetOrgByDomainGlobalRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgByDomainGlobalRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgByDomainGlobalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetOrgByDomainGlobalRequest>): GetOrgByDomainGlobalRequest {
    return GetOrgByDomainGlobalRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOrgByDomainGlobalRequest>): GetOrgByDomainGlobalRequest {
    const message = createBaseGetOrgByDomainGlobalRequest();
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseListOrgChangesRequest(): ListOrgChangesRequest {
  return { query: undefined };
}

export const ListOrgChangesRequest = {
  encode(message: ListOrgChangesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ChangeQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgChangesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgChangesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ChangeQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListOrgChangesRequest>): ListOrgChangesRequest {
    return ListOrgChangesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgChangesRequest>): ListOrgChangesRequest {
    const message = createBaseListOrgChangesRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ChangeQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListOrgChangesResponse(): ListOrgChangesResponse {
  return { result: [] };
}

export const ListOrgChangesResponse = {
  encode(message: ListOrgChangesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      Change.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgChangesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgChangesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Change.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListOrgChangesResponse>): ListOrgChangesResponse {
    return ListOrgChangesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgChangesResponse>): ListOrgChangesResponse {
    const message = createBaseListOrgChangesResponse();
    message.result = object.result?.map((e) => Change.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetOrgByDomainGlobalResponse(): GetOrgByDomainGlobalResponse {
  return { org: undefined };
}

export const GetOrgByDomainGlobalResponse = {
  encode(message: GetOrgByDomainGlobalResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.org !== undefined) {
      Org.encode(message.org, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgByDomainGlobalResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgByDomainGlobalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.org = Org.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetOrgByDomainGlobalResponse>): GetOrgByDomainGlobalResponse {
    return GetOrgByDomainGlobalResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOrgByDomainGlobalResponse>): GetOrgByDomainGlobalResponse {
    const message = createBaseGetOrgByDomainGlobalResponse();
    message.org = (object.org !== undefined && object.org !== null) ? Org.fromPartial(object.org) : undefined;
    return message;
  },
};

function createBaseAddOrgRequest(): AddOrgRequest {
  return { name: "" };
}

export const AddOrgRequest = {
  encode(message: AddOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddOrgRequest>): AddOrgRequest {
    return AddOrgRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOrgRequest>): AddOrgRequest {
    const message = createBaseAddOrgRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseAddOrgResponse(): AddOrgResponse {
  return { id: "", details: undefined };
}

export const AddOrgResponse = {
  encode(message: AddOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddOrgResponse>): AddOrgResponse {
    return AddOrgResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOrgResponse>): AddOrgResponse {
    const message = createBaseAddOrgResponse();
    message.id = object.id ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateOrgRequest(): UpdateOrgRequest {
  return { name: "" };
}

export const UpdateOrgRequest = {
  encode(message: UpdateOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateOrgRequest>): UpdateOrgRequest {
    return UpdateOrgRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOrgRequest>): UpdateOrgRequest {
    const message = createBaseUpdateOrgRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateOrgResponse(): UpdateOrgResponse {
  return { details: undefined };
}

export const UpdateOrgResponse = {
  encode(message: UpdateOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateOrgResponse>): UpdateOrgResponse {
    return UpdateOrgResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOrgResponse>): UpdateOrgResponse {
    const message = createBaseUpdateOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateOrgRequest(): DeactivateOrgRequest {
  return {};
}

export const DeactivateOrgRequest = {
  encode(_: DeactivateOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateOrgRequest>): DeactivateOrgRequest {
    return DeactivateOrgRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeactivateOrgRequest>): DeactivateOrgRequest {
    const message = createBaseDeactivateOrgRequest();
    return message;
  },
};

function createBaseDeactivateOrgResponse(): DeactivateOrgResponse {
  return { details: undefined };
}

export const DeactivateOrgResponse = {
  encode(message: DeactivateOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateOrgResponse>): DeactivateOrgResponse {
    return DeactivateOrgResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateOrgResponse>): DeactivateOrgResponse {
    const message = createBaseDeactivateOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateOrgRequest(): ReactivateOrgRequest {
  return {};
}

export const ReactivateOrgRequest = {
  encode(_: ReactivateOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateOrgRequest>): ReactivateOrgRequest {
    return ReactivateOrgRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ReactivateOrgRequest>): ReactivateOrgRequest {
    const message = createBaseReactivateOrgRequest();
    return message;
  },
};

function createBaseReactivateOrgResponse(): ReactivateOrgResponse {
  return { details: undefined };
}

export const ReactivateOrgResponse = {
  encode(message: ReactivateOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateOrgResponse>): ReactivateOrgResponse {
    return ReactivateOrgResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateOrgResponse>): ReactivateOrgResponse {
    const message = createBaseReactivateOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveOrgRequest(): RemoveOrgRequest {
  return {};
}

export const RemoveOrgRequest = {
  encode(_: RemoveOrgRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveOrgRequest>): RemoveOrgRequest {
    return RemoveOrgRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveOrgRequest>): RemoveOrgRequest {
    const message = createBaseRemoveOrgRequest();
    return message;
  },
};

function createBaseRemoveOrgResponse(): RemoveOrgResponse {
  return { details: undefined };
}

export const RemoveOrgResponse = {
  encode(message: RemoveOrgResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveOrgResponse>): RemoveOrgResponse {
    return RemoveOrgResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveOrgResponse>): RemoveOrgResponse {
    const message = createBaseRemoveOrgResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListOrgDomainsRequest(): ListOrgDomainsRequest {
  return { query: undefined, queries: [] };
}

export const ListOrgDomainsRequest = {
  encode(message: ListOrgDomainsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      DomainSearchQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgDomainsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgDomainsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(DomainSearchQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListOrgDomainsRequest>): ListOrgDomainsRequest {
    return ListOrgDomainsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgDomainsRequest>): ListOrgDomainsRequest {
    const message = createBaseListOrgDomainsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => DomainSearchQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListOrgDomainsResponse(): ListOrgDomainsResponse {
  return { details: undefined, result: [] };
}

export const ListOrgDomainsResponse = {
  encode(message: ListOrgDomainsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Domain.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgDomainsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgDomainsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Domain.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListOrgDomainsResponse>): ListOrgDomainsResponse {
    return ListOrgDomainsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgDomainsResponse>): ListOrgDomainsResponse {
    const message = createBaseListOrgDomainsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Domain.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddOrgDomainRequest(): AddOrgDomainRequest {
  return { domain: "" };
}

export const AddOrgDomainRequest = {
  encode(message: AddOrgDomainRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgDomainRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddOrgDomainRequest>): AddOrgDomainRequest {
    return AddOrgDomainRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOrgDomainRequest>): AddOrgDomainRequest {
    const message = createBaseAddOrgDomainRequest();
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseAddOrgDomainResponse(): AddOrgDomainResponse {
  return { details: undefined };
}

export const AddOrgDomainResponse = {
  encode(message: AddOrgDomainResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgDomainResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgDomainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddOrgDomainResponse>): AddOrgDomainResponse {
    return AddOrgDomainResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOrgDomainResponse>): AddOrgDomainResponse {
    const message = createBaseAddOrgDomainResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveOrgDomainRequest(): RemoveOrgDomainRequest {
  return { domain: "" };
}

export const RemoveOrgDomainRequest = {
  encode(message: RemoveOrgDomainRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgDomainRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveOrgDomainRequest>): RemoveOrgDomainRequest {
    return RemoveOrgDomainRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveOrgDomainRequest>): RemoveOrgDomainRequest {
    const message = createBaseRemoveOrgDomainRequest();
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseRemoveOrgDomainResponse(): RemoveOrgDomainResponse {
  return { details: undefined };
}

export const RemoveOrgDomainResponse = {
  encode(message: RemoveOrgDomainResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgDomainResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgDomainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveOrgDomainResponse>): RemoveOrgDomainResponse {
    return RemoveOrgDomainResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveOrgDomainResponse>): RemoveOrgDomainResponse {
    const message = createBaseRemoveOrgDomainResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGenerateOrgDomainValidationRequest(): GenerateOrgDomainValidationRequest {
  return { domain: "", type: 0 };
}

export const GenerateOrgDomainValidationRequest = {
  encode(message: GenerateOrgDomainValidationRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenerateOrgDomainValidationRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateOrgDomainValidationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GenerateOrgDomainValidationRequest>): GenerateOrgDomainValidationRequest {
    return GenerateOrgDomainValidationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateOrgDomainValidationRequest>): GenerateOrgDomainValidationRequest {
    const message = createBaseGenerateOrgDomainValidationRequest();
    message.domain = object.domain ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseGenerateOrgDomainValidationResponse(): GenerateOrgDomainValidationResponse {
  return { token: "", url: "" };
}

export const GenerateOrgDomainValidationResponse = {
  encode(message: GenerateOrgDomainValidationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenerateOrgDomainValidationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateOrgDomainValidationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GenerateOrgDomainValidationResponse>): GenerateOrgDomainValidationResponse {
    return GenerateOrgDomainValidationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateOrgDomainValidationResponse>): GenerateOrgDomainValidationResponse {
    const message = createBaseGenerateOrgDomainValidationResponse();
    message.token = object.token ?? "";
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseValidateOrgDomainRequest(): ValidateOrgDomainRequest {
  return { domain: "" };
}

export const ValidateOrgDomainRequest = {
  encode(message: ValidateOrgDomainRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ValidateOrgDomainRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateOrgDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ValidateOrgDomainRequest>): ValidateOrgDomainRequest {
    return ValidateOrgDomainRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateOrgDomainRequest>): ValidateOrgDomainRequest {
    const message = createBaseValidateOrgDomainRequest();
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseValidateOrgDomainResponse(): ValidateOrgDomainResponse {
  return { details: undefined };
}

export const ValidateOrgDomainResponse = {
  encode(message: ValidateOrgDomainResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ValidateOrgDomainResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateOrgDomainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ValidateOrgDomainResponse>): ValidateOrgDomainResponse {
    return ValidateOrgDomainResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateOrgDomainResponse>): ValidateOrgDomainResponse {
    const message = createBaseValidateOrgDomainResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseSetPrimaryOrgDomainRequest(): SetPrimaryOrgDomainRequest {
  return { domain: "" };
}

export const SetPrimaryOrgDomainRequest = {
  encode(message: SetPrimaryOrgDomainRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.domain !== "") {
      writer.uint32(10).string(message.domain);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPrimaryOrgDomainRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPrimaryOrgDomainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.domain = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetPrimaryOrgDomainRequest>): SetPrimaryOrgDomainRequest {
    return SetPrimaryOrgDomainRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetPrimaryOrgDomainRequest>): SetPrimaryOrgDomainRequest {
    const message = createBaseSetPrimaryOrgDomainRequest();
    message.domain = object.domain ?? "";
    return message;
  },
};

function createBaseSetPrimaryOrgDomainResponse(): SetPrimaryOrgDomainResponse {
  return { details: undefined };
}

export const SetPrimaryOrgDomainResponse = {
  encode(message: SetPrimaryOrgDomainResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetPrimaryOrgDomainResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPrimaryOrgDomainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetPrimaryOrgDomainResponse>): SetPrimaryOrgDomainResponse {
    return SetPrimaryOrgDomainResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetPrimaryOrgDomainResponse>): SetPrimaryOrgDomainResponse {
    const message = createBaseSetPrimaryOrgDomainResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListOrgMemberRolesRequest(): ListOrgMemberRolesRequest {
  return {};
}

export const ListOrgMemberRolesRequest = {
  encode(_: ListOrgMemberRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgMemberRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgMemberRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListOrgMemberRolesRequest>): ListOrgMemberRolesRequest {
    return ListOrgMemberRolesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListOrgMemberRolesRequest>): ListOrgMemberRolesRequest {
    const message = createBaseListOrgMemberRolesRequest();
    return message;
  },
};

function createBaseListOrgMemberRolesResponse(): ListOrgMemberRolesResponse {
  return { result: [] };
}

export const ListOrgMemberRolesResponse = {
  encode(message: ListOrgMemberRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgMemberRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgMemberRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListOrgMemberRolesResponse>): ListOrgMemberRolesResponse {
    return ListOrgMemberRolesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgMemberRolesResponse>): ListOrgMemberRolesResponse {
    const message = createBaseListOrgMemberRolesResponse();
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseListOrgMembersRequest(): ListOrgMembersRequest {
  return { query: undefined, queries: [] };
}

export const ListOrgMembersRequest = {
  encode(message: ListOrgMembersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      SearchQuery1.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgMembersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgMembersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(SearchQuery1.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListOrgMembersRequest>): ListOrgMembersRequest {
    return ListOrgMembersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgMembersRequest>): ListOrgMembersRequest {
    const message = createBaseListOrgMembersRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => SearchQuery1.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListOrgMembersResponse(): ListOrgMembersResponse {
  return { details: undefined, result: [] };
}

export const ListOrgMembersResponse = {
  encode(message: ListOrgMembersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Member.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgMembersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgMembersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Member.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListOrgMembersResponse>): ListOrgMembersResponse {
    return ListOrgMembersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgMembersResponse>): ListOrgMembersResponse {
    const message = createBaseListOrgMembersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Member.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddOrgMemberRequest(): AddOrgMemberRequest {
  return { userId: "", roles: [] };
}

export const AddOrgMemberRequest = {
  encode(message: AddOrgMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddOrgMemberRequest>): AddOrgMemberRequest {
    return AddOrgMemberRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOrgMemberRequest>): AddOrgMemberRequest {
    const message = createBaseAddOrgMemberRequest();
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddOrgMemberResponse(): AddOrgMemberResponse {
  return { details: undefined };
}

export const AddOrgMemberResponse = {
  encode(message: AddOrgMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddOrgMemberResponse>): AddOrgMemberResponse {
    return AddOrgMemberResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOrgMemberResponse>): AddOrgMemberResponse {
    const message = createBaseAddOrgMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateOrgMemberRequest(): UpdateOrgMemberRequest {
  return { userId: "", roles: [] };
}

export const UpdateOrgMemberRequest = {
  encode(message: UpdateOrgMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateOrgMemberRequest>): UpdateOrgMemberRequest {
    return UpdateOrgMemberRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOrgMemberRequest>): UpdateOrgMemberRequest {
    const message = createBaseUpdateOrgMemberRequest();
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateOrgMemberResponse(): UpdateOrgMemberResponse {
  return { details: undefined };
}

export const UpdateOrgMemberResponse = {
  encode(message: UpdateOrgMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateOrgMemberResponse>): UpdateOrgMemberResponse {
    return UpdateOrgMemberResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOrgMemberResponse>): UpdateOrgMemberResponse {
    const message = createBaseUpdateOrgMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveOrgMemberRequest(): RemoveOrgMemberRequest {
  return { userId: "" };
}

export const RemoveOrgMemberRequest = {
  encode(message: RemoveOrgMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveOrgMemberRequest>): RemoveOrgMemberRequest {
    return RemoveOrgMemberRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveOrgMemberRequest>): RemoveOrgMemberRequest {
    const message = createBaseRemoveOrgMemberRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveOrgMemberResponse(): RemoveOrgMemberResponse {
  return { details: undefined };
}

export const RemoveOrgMemberResponse = {
  encode(message: RemoveOrgMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveOrgMemberResponse>): RemoveOrgMemberResponse {
    return RemoveOrgMemberResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveOrgMemberResponse>): RemoveOrgMemberResponse {
    const message = createBaseRemoveOrgMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListOrgMetadataRequest(): ListOrgMetadataRequest {
  return { query: undefined, queries: [] };
}

export const ListOrgMetadataRequest = {
  encode(message: ListOrgMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      MetadataQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(MetadataQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListOrgMetadataRequest>): ListOrgMetadataRequest {
    return ListOrgMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgMetadataRequest>): ListOrgMetadataRequest {
    const message = createBaseListOrgMetadataRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => MetadataQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListOrgMetadataResponse(): ListOrgMetadataResponse {
  return { details: undefined, result: [] };
}

export const ListOrgMetadataResponse = {
  encode(message: ListOrgMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Metadata.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Metadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListOrgMetadataResponse>): ListOrgMetadataResponse {
    return ListOrgMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgMetadataResponse>): ListOrgMetadataResponse {
    const message = createBaseListOrgMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Metadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetOrgMetadataRequest(): GetOrgMetadataRequest {
  return { key: "" };
}

export const GetOrgMetadataRequest = {
  encode(message: GetOrgMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetOrgMetadataRequest>): GetOrgMetadataRequest {
    return GetOrgMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOrgMetadataRequest>): GetOrgMetadataRequest {
    const message = createBaseGetOrgMetadataRequest();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseGetOrgMetadataResponse(): GetOrgMetadataResponse {
  return { metadata: undefined };
}

export const GetOrgMetadataResponse = {
  encode(message: GetOrgMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetOrgMetadataResponse>): GetOrgMetadataResponse {
    return GetOrgMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOrgMetadataResponse>): GetOrgMetadataResponse {
    const message = createBaseGetOrgMetadataResponse();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseSetOrgMetadataRequest(): SetOrgMetadataRequest {
  return { key: "", value: new Uint8Array(0) };
}

export const SetOrgMetadataRequest = {
  encode(message: SetOrgMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetOrgMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetOrgMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetOrgMetadataRequest>): SetOrgMetadataRequest {
    return SetOrgMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetOrgMetadataRequest>): SetOrgMetadataRequest {
    const message = createBaseSetOrgMetadataRequest();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSetOrgMetadataResponse(): SetOrgMetadataResponse {
  return { details: undefined };
}

export const SetOrgMetadataResponse = {
  encode(message: SetOrgMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetOrgMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetOrgMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetOrgMetadataResponse>): SetOrgMetadataResponse {
    return SetOrgMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetOrgMetadataResponse>): SetOrgMetadataResponse {
    const message = createBaseSetOrgMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseBulkSetOrgMetadataRequest(): BulkSetOrgMetadataRequest {
  return { metadata: [] };
}

export const BulkSetOrgMetadataRequest = {
  encode(message: BulkSetOrgMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.metadata) {
      BulkSetOrgMetadataRequest_Metadata.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkSetOrgMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkSetOrgMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.metadata.push(BulkSetOrgMetadataRequest_Metadata.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkSetOrgMetadataRequest>): BulkSetOrgMetadataRequest {
    return BulkSetOrgMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkSetOrgMetadataRequest>): BulkSetOrgMetadataRequest {
    const message = createBaseBulkSetOrgMetadataRequest();
    message.metadata = object.metadata?.map((e) => BulkSetOrgMetadataRequest_Metadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBulkSetOrgMetadataRequest_Metadata(): BulkSetOrgMetadataRequest_Metadata {
  return { key: "", value: new Uint8Array(0) };
}

export const BulkSetOrgMetadataRequest_Metadata = {
  encode(message: BulkSetOrgMetadataRequest_Metadata, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkSetOrgMetadataRequest_Metadata {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkSetOrgMetadataRequest_Metadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkSetOrgMetadataRequest_Metadata>): BulkSetOrgMetadataRequest_Metadata {
    return BulkSetOrgMetadataRequest_Metadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkSetOrgMetadataRequest_Metadata>): BulkSetOrgMetadataRequest_Metadata {
    const message = createBaseBulkSetOrgMetadataRequest_Metadata();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseBulkSetOrgMetadataResponse(): BulkSetOrgMetadataResponse {
  return { details: undefined };
}

export const BulkSetOrgMetadataResponse = {
  encode(message: BulkSetOrgMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkSetOrgMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkSetOrgMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkSetOrgMetadataResponse>): BulkSetOrgMetadataResponse {
    return BulkSetOrgMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkSetOrgMetadataResponse>): BulkSetOrgMetadataResponse {
    const message = createBaseBulkSetOrgMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveOrgMetadataRequest(): RemoveOrgMetadataRequest {
  return { key: "" };
}

export const RemoveOrgMetadataRequest = {
  encode(message: RemoveOrgMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveOrgMetadataRequest>): RemoveOrgMetadataRequest {
    return RemoveOrgMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveOrgMetadataRequest>): RemoveOrgMetadataRequest {
    const message = createBaseRemoveOrgMetadataRequest();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseRemoveOrgMetadataResponse(): RemoveOrgMetadataResponse {
  return { details: undefined };
}

export const RemoveOrgMetadataResponse = {
  encode(message: RemoveOrgMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveOrgMetadataResponse>): RemoveOrgMetadataResponse {
    return RemoveOrgMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveOrgMetadataResponse>): RemoveOrgMetadataResponse {
    const message = createBaseRemoveOrgMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseBulkRemoveOrgMetadataRequest(): BulkRemoveOrgMetadataRequest {
  return { keys: [] };
}

export const BulkRemoveOrgMetadataRequest = {
  encode(message: BulkRemoveOrgMetadataRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.keys) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkRemoveOrgMetadataRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkRemoveOrgMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.keys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkRemoveOrgMetadataRequest>): BulkRemoveOrgMetadataRequest {
    return BulkRemoveOrgMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkRemoveOrgMetadataRequest>): BulkRemoveOrgMetadataRequest {
    const message = createBaseBulkRemoveOrgMetadataRequest();
    message.keys = object.keys?.map((e) => e) || [];
    return message;
  },
};

function createBaseBulkRemoveOrgMetadataResponse(): BulkRemoveOrgMetadataResponse {
  return { details: undefined };
}

export const BulkRemoveOrgMetadataResponse = {
  encode(message: BulkRemoveOrgMetadataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkRemoveOrgMetadataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkRemoveOrgMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkRemoveOrgMetadataResponse>): BulkRemoveOrgMetadataResponse {
    return BulkRemoveOrgMetadataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkRemoveOrgMetadataResponse>): BulkRemoveOrgMetadataResponse {
    const message = createBaseBulkRemoveOrgMetadataResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetProjectByIDRequest(): GetProjectByIDRequest {
  return { id: "" };
}

export const GetProjectByIDRequest = {
  encode(message: GetProjectByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetProjectByIDRequest>): GetProjectByIDRequest {
    return GetProjectByIDRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProjectByIDRequest>): GetProjectByIDRequest {
    const message = createBaseGetProjectByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetProjectByIDResponse(): GetProjectByIDResponse {
  return { project: undefined };
}

export const GetProjectByIDResponse = {
  encode(message: GetProjectByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.project !== undefined) {
      Project.encode(message.project, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.project = Project.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetProjectByIDResponse>): GetProjectByIDResponse {
    return GetProjectByIDResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProjectByIDResponse>): GetProjectByIDResponse {
    const message = createBaseGetProjectByIDResponse();
    message.project = (object.project !== undefined && object.project !== null)
      ? Project.fromPartial(object.project)
      : undefined;
    return message;
  },
};

function createBaseGetGrantedProjectByIDRequest(): GetGrantedProjectByIDRequest {
  return { projectId: "", grantId: "" };
}

export const GetGrantedProjectByIDRequest = {
  encode(message: GetGrantedProjectByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetGrantedProjectByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGrantedProjectByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetGrantedProjectByIDRequest>): GetGrantedProjectByIDRequest {
    return GetGrantedProjectByIDRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGrantedProjectByIDRequest>): GetGrantedProjectByIDRequest {
    const message = createBaseGetGrantedProjectByIDRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseGetGrantedProjectByIDResponse(): GetGrantedProjectByIDResponse {
  return { grantedProject: undefined };
}

export const GetGrantedProjectByIDResponse = {
  encode(message: GetGrantedProjectByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.grantedProject !== undefined) {
      GrantedProject.encode(message.grantedProject, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetGrantedProjectByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGrantedProjectByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.grantedProject = GrantedProject.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetGrantedProjectByIDResponse>): GetGrantedProjectByIDResponse {
    return GetGrantedProjectByIDResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetGrantedProjectByIDResponse>): GetGrantedProjectByIDResponse {
    const message = createBaseGetGrantedProjectByIDResponse();
    message.grantedProject = (object.grantedProject !== undefined && object.grantedProject !== null)
      ? GrantedProject.fromPartial(object.grantedProject)
      : undefined;
    return message;
  },
};

function createBaseListProjectsRequest(): ListProjectsRequest {
  return { query: undefined, queries: [] };
}

export const ListProjectsRequest = {
  encode(message: ListProjectsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      ProjectQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(ProjectQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectsRequest>): ListProjectsRequest {
    return ListProjectsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectsRequest>): ListProjectsRequest {
    const message = createBaseListProjectsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => ProjectQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectsResponse(): ListProjectsResponse {
  return { details: undefined, result: [] };
}

export const ListProjectsResponse = {
  encode(message: ListProjectsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Project.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Project.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectsResponse>): ListProjectsResponse {
    return ListProjectsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectsResponse>): ListProjectsResponse {
    const message = createBaseListProjectsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Project.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListGrantedProjectsRequest(): ListGrantedProjectsRequest {
  return { query: undefined, queries: [] };
}

export const ListGrantedProjectsRequest = {
  encode(message: ListGrantedProjectsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      ProjectQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListGrantedProjectsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGrantedProjectsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(ProjectQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListGrantedProjectsRequest>): ListGrantedProjectsRequest {
    return ListGrantedProjectsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGrantedProjectsRequest>): ListGrantedProjectsRequest {
    const message = createBaseListGrantedProjectsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => ProjectQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListGrantedProjectsResponse(): ListGrantedProjectsResponse {
  return { details: undefined, result: [] };
}

export const ListGrantedProjectsResponse = {
  encode(message: ListGrantedProjectsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      GrantedProject.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListGrantedProjectsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGrantedProjectsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(GrantedProject.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListGrantedProjectsResponse>): ListGrantedProjectsResponse {
    return ListGrantedProjectsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGrantedProjectsResponse>): ListGrantedProjectsResponse {
    const message = createBaseListGrantedProjectsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => GrantedProject.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectChangesRequest(): ListProjectChangesRequest {
  return { query: undefined, projectId: "" };
}

export const ListProjectChangesRequest = {
  encode(message: ListProjectChangesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ChangeQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectChangesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectChangesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ChangeQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectChangesRequest>): ListProjectChangesRequest {
    return ListProjectChangesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectChangesRequest>): ListProjectChangesRequest {
    const message = createBaseListProjectChangesRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ChangeQuery.fromPartial(object.query)
      : undefined;
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseListProjectChangesResponse(): ListProjectChangesResponse {
  return { result: [] };
}

export const ListProjectChangesResponse = {
  encode(message: ListProjectChangesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      Change.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectChangesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectChangesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Change.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectChangesResponse>): ListProjectChangesResponse {
    return ListProjectChangesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectChangesResponse>): ListProjectChangesResponse {
    const message = createBaseListProjectChangesResponse();
    message.result = object.result?.map((e) => Change.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddProjectRequest(): AddProjectRequest {
  return {
    name: "",
    projectRoleAssertion: false,
    projectRoleCheck: false,
    hasProjectCheck: false,
    privateLabelingSetting: 0,
  };
}

export const AddProjectRequest = {
  encode(message: AddProjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.projectRoleAssertion === true) {
      writer.uint32(16).bool(message.projectRoleAssertion);
    }
    if (message.projectRoleCheck === true) {
      writer.uint32(24).bool(message.projectRoleCheck);
    }
    if (message.hasProjectCheck === true) {
      writer.uint32(32).bool(message.hasProjectCheck);
    }
    if (message.privateLabelingSetting !== 0) {
      writer.uint32(40).int32(message.privateLabelingSetting);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.projectRoleAssertion = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.projectRoleCheck = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.hasProjectCheck = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.privateLabelingSetting = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddProjectRequest>): AddProjectRequest {
    return AddProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddProjectRequest>): AddProjectRequest {
    const message = createBaseAddProjectRequest();
    message.name = object.name ?? "";
    message.projectRoleAssertion = object.projectRoleAssertion ?? false;
    message.projectRoleCheck = object.projectRoleCheck ?? false;
    message.hasProjectCheck = object.hasProjectCheck ?? false;
    message.privateLabelingSetting = object.privateLabelingSetting ?? 0;
    return message;
  },
};

function createBaseAddProjectResponse(): AddProjectResponse {
  return { id: "", details: undefined };
}

export const AddProjectResponse = {
  encode(message: AddProjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddProjectResponse>): AddProjectResponse {
    return AddProjectResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddProjectResponse>): AddProjectResponse {
    const message = createBaseAddProjectResponse();
    message.id = object.id ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateProjectRequest(): UpdateProjectRequest {
  return {
    id: "",
    name: "",
    projectRoleAssertion: false,
    projectRoleCheck: false,
    hasProjectCheck: false,
    privateLabelingSetting: 0,
  };
}

export const UpdateProjectRequest = {
  encode(message: UpdateProjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.projectRoleAssertion === true) {
      writer.uint32(24).bool(message.projectRoleAssertion);
    }
    if (message.projectRoleCheck === true) {
      writer.uint32(32).bool(message.projectRoleCheck);
    }
    if (message.hasProjectCheck === true) {
      writer.uint32(40).bool(message.hasProjectCheck);
    }
    if (message.privateLabelingSetting !== 0) {
      writer.uint32(48).int32(message.privateLabelingSetting);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.projectRoleAssertion = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.projectRoleCheck = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.hasProjectCheck = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.privateLabelingSetting = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateProjectRequest>): UpdateProjectRequest {
    return UpdateProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProjectRequest>): UpdateProjectRequest {
    const message = createBaseUpdateProjectRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.projectRoleAssertion = object.projectRoleAssertion ?? false;
    message.projectRoleCheck = object.projectRoleCheck ?? false;
    message.hasProjectCheck = object.hasProjectCheck ?? false;
    message.privateLabelingSetting = object.privateLabelingSetting ?? 0;
    return message;
  },
};

function createBaseUpdateProjectResponse(): UpdateProjectResponse {
  return { details: undefined };
}

export const UpdateProjectResponse = {
  encode(message: UpdateProjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateProjectResponse>): UpdateProjectResponse {
    return UpdateProjectResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProjectResponse>): UpdateProjectResponse {
    const message = createBaseUpdateProjectResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateProjectRequest(): DeactivateProjectRequest {
  return { id: "" };
}

export const DeactivateProjectRequest = {
  encode(message: DeactivateProjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateProjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateProjectRequest>): DeactivateProjectRequest {
    return DeactivateProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateProjectRequest>): DeactivateProjectRequest {
    const message = createBaseDeactivateProjectRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeactivateProjectResponse(): DeactivateProjectResponse {
  return { details: undefined };
}

export const DeactivateProjectResponse = {
  encode(message: DeactivateProjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateProjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateProjectResponse>): DeactivateProjectResponse {
    return DeactivateProjectResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateProjectResponse>): DeactivateProjectResponse {
    const message = createBaseDeactivateProjectResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateProjectRequest(): ReactivateProjectRequest {
  return { id: "" };
}

export const ReactivateProjectRequest = {
  encode(message: ReactivateProjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateProjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateProjectRequest>): ReactivateProjectRequest {
    return ReactivateProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateProjectRequest>): ReactivateProjectRequest {
    const message = createBaseReactivateProjectRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseReactivateProjectResponse(): ReactivateProjectResponse {
  return { details: undefined };
}

export const ReactivateProjectResponse = {
  encode(message: ReactivateProjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateProjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateProjectResponse>): ReactivateProjectResponse {
    return ReactivateProjectResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateProjectResponse>): ReactivateProjectResponse {
    const message = createBaseReactivateProjectResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveProjectRequest(): RemoveProjectRequest {
  return { id: "" };
}

export const RemoveProjectRequest = {
  encode(message: RemoveProjectRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveProjectRequest>): RemoveProjectRequest {
    return RemoveProjectRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveProjectRequest>): RemoveProjectRequest {
    const message = createBaseRemoveProjectRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveProjectResponse(): RemoveProjectResponse {
  return { details: undefined };
}

export const RemoveProjectResponse = {
  encode(message: RemoveProjectResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveProjectResponse>): RemoveProjectResponse {
    return RemoveProjectResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveProjectResponse>): RemoveProjectResponse {
    const message = createBaseRemoveProjectResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListProjectMemberRolesRequest(): ListProjectMemberRolesRequest {
  return {};
}

export const ListProjectMemberRolesRequest = {
  encode(_: ListProjectMemberRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectMemberRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectMemberRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectMemberRolesRequest>): ListProjectMemberRolesRequest {
    return ListProjectMemberRolesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListProjectMemberRolesRequest>): ListProjectMemberRolesRequest {
    const message = createBaseListProjectMemberRolesRequest();
    return message;
  },
};

function createBaseListProjectMemberRolesResponse(): ListProjectMemberRolesResponse {
  return { details: undefined, result: [] };
}

export const ListProjectMemberRolesResponse = {
  encode(message: ListProjectMemberRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectMemberRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectMemberRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectMemberRolesResponse>): ListProjectMemberRolesResponse {
    return ListProjectMemberRolesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectMemberRolesResponse>): ListProjectMemberRolesResponse {
    const message = createBaseListProjectMemberRolesResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddProjectRoleRequest(): AddProjectRoleRequest {
  return { projectId: "", roleKey: "", displayName: "", group: "" };
}

export const AddProjectRoleRequest = {
  encode(message: AddProjectRoleRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.roleKey !== "") {
      writer.uint32(18).string(message.roleKey);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.group !== "") {
      writer.uint32(34).string(message.group);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectRoleRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roleKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.group = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddProjectRoleRequest>): AddProjectRoleRequest {
    return AddProjectRoleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddProjectRoleRequest>): AddProjectRoleRequest {
    const message = createBaseAddProjectRoleRequest();
    message.projectId = object.projectId ?? "";
    message.roleKey = object.roleKey ?? "";
    message.displayName = object.displayName ?? "";
    message.group = object.group ?? "";
    return message;
  },
};

function createBaseAddProjectRoleResponse(): AddProjectRoleResponse {
  return { details: undefined };
}

export const AddProjectRoleResponse = {
  encode(message: AddProjectRoleResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectRoleResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddProjectRoleResponse>): AddProjectRoleResponse {
    return AddProjectRoleResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddProjectRoleResponse>): AddProjectRoleResponse {
    const message = createBaseAddProjectRoleResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseBulkAddProjectRolesRequest(): BulkAddProjectRolesRequest {
  return { projectId: "", roles: [] };
}

export const BulkAddProjectRolesRequest = {
  encode(message: BulkAddProjectRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    for (const v of message.roles) {
      BulkAddProjectRolesRequest_Role.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkAddProjectRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkAddProjectRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roles.push(BulkAddProjectRolesRequest_Role.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkAddProjectRolesRequest>): BulkAddProjectRolesRequest {
    return BulkAddProjectRolesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkAddProjectRolesRequest>): BulkAddProjectRolesRequest {
    const message = createBaseBulkAddProjectRolesRequest();
    message.projectId = object.projectId ?? "";
    message.roles = object.roles?.map((e) => BulkAddProjectRolesRequest_Role.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBulkAddProjectRolesRequest_Role(): BulkAddProjectRolesRequest_Role {
  return { key: "", displayName: "", group: "" };
}

export const BulkAddProjectRolesRequest_Role = {
  encode(message: BulkAddProjectRolesRequest_Role, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.group !== "") {
      writer.uint32(26).string(message.group);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkAddProjectRolesRequest_Role {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkAddProjectRolesRequest_Role();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.group = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkAddProjectRolesRequest_Role>): BulkAddProjectRolesRequest_Role {
    return BulkAddProjectRolesRequest_Role.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkAddProjectRolesRequest_Role>): BulkAddProjectRolesRequest_Role {
    const message = createBaseBulkAddProjectRolesRequest_Role();
    message.key = object.key ?? "";
    message.displayName = object.displayName ?? "";
    message.group = object.group ?? "";
    return message;
  },
};

function createBaseBulkAddProjectRolesResponse(): BulkAddProjectRolesResponse {
  return { details: undefined };
}

export const BulkAddProjectRolesResponse = {
  encode(message: BulkAddProjectRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkAddProjectRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkAddProjectRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkAddProjectRolesResponse>): BulkAddProjectRolesResponse {
    return BulkAddProjectRolesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkAddProjectRolesResponse>): BulkAddProjectRolesResponse {
    const message = createBaseBulkAddProjectRolesResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateProjectRoleRequest(): UpdateProjectRoleRequest {
  return { projectId: "", roleKey: "", displayName: "", group: "" };
}

export const UpdateProjectRoleRequest = {
  encode(message: UpdateProjectRoleRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.roleKey !== "") {
      writer.uint32(18).string(message.roleKey);
    }
    if (message.displayName !== "") {
      writer.uint32(26).string(message.displayName);
    }
    if (message.group !== "") {
      writer.uint32(34).string(message.group);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectRoleRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roleKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.displayName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.group = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateProjectRoleRequest>): UpdateProjectRoleRequest {
    return UpdateProjectRoleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProjectRoleRequest>): UpdateProjectRoleRequest {
    const message = createBaseUpdateProjectRoleRequest();
    message.projectId = object.projectId ?? "";
    message.roleKey = object.roleKey ?? "";
    message.displayName = object.displayName ?? "";
    message.group = object.group ?? "";
    return message;
  },
};

function createBaseUpdateProjectRoleResponse(): UpdateProjectRoleResponse {
  return { details: undefined };
}

export const UpdateProjectRoleResponse = {
  encode(message: UpdateProjectRoleResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectRoleResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateProjectRoleResponse>): UpdateProjectRoleResponse {
    return UpdateProjectRoleResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProjectRoleResponse>): UpdateProjectRoleResponse {
    const message = createBaseUpdateProjectRoleResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveProjectRoleRequest(): RemoveProjectRoleRequest {
  return { projectId: "", roleKey: "" };
}

export const RemoveProjectRoleRequest = {
  encode(message: RemoveProjectRoleRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.roleKey !== "") {
      writer.uint32(18).string(message.roleKey);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectRoleRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectRoleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.roleKey = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveProjectRoleRequest>): RemoveProjectRoleRequest {
    return RemoveProjectRoleRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveProjectRoleRequest>): RemoveProjectRoleRequest {
    const message = createBaseRemoveProjectRoleRequest();
    message.projectId = object.projectId ?? "";
    message.roleKey = object.roleKey ?? "";
    return message;
  },
};

function createBaseRemoveProjectRoleResponse(): RemoveProjectRoleResponse {
  return { details: undefined };
}

export const RemoveProjectRoleResponse = {
  encode(message: RemoveProjectRoleResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectRoleResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectRoleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveProjectRoleResponse>): RemoveProjectRoleResponse {
    return RemoveProjectRoleResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveProjectRoleResponse>): RemoveProjectRoleResponse {
    const message = createBaseRemoveProjectRoleResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListProjectRolesRequest(): ListProjectRolesRequest {
  return { projectId: "", query: undefined, queries: [] };
}

export const ListProjectRolesRequest = {
  encode(message: ListProjectRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.queries) {
      RoleQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(RoleQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectRolesRequest>): ListProjectRolesRequest {
    return ListProjectRolesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectRolesRequest>): ListProjectRolesRequest {
    const message = createBaseListProjectRolesRequest();
    message.projectId = object.projectId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => RoleQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectRolesResponse(): ListProjectRolesResponse {
  return { details: undefined, result: [] };
}

export const ListProjectRolesResponse = {
  encode(message: ListProjectRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Role.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Role.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectRolesResponse>): ListProjectRolesResponse {
    return ListProjectRolesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectRolesResponse>): ListProjectRolesResponse {
    const message = createBaseListProjectRolesResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Role.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListGrantedProjectRolesRequest(): ListGrantedProjectRolesRequest {
  return { projectId: "", grantId: "", query: undefined, queries: [] };
}

export const ListGrantedProjectRolesRequest = {
  encode(message: ListGrantedProjectRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.queries) {
      RoleQuery.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListGrantedProjectRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGrantedProjectRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.queries.push(RoleQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListGrantedProjectRolesRequest>): ListGrantedProjectRolesRequest {
    return ListGrantedProjectRolesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGrantedProjectRolesRequest>): ListGrantedProjectRolesRequest {
    const message = createBaseListGrantedProjectRolesRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => RoleQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListGrantedProjectRolesResponse(): ListGrantedProjectRolesResponse {
  return { details: undefined, result: [] };
}

export const ListGrantedProjectRolesResponse = {
  encode(message: ListGrantedProjectRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Role.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListGrantedProjectRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGrantedProjectRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Role.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListGrantedProjectRolesResponse>): ListGrantedProjectRolesResponse {
    return ListGrantedProjectRolesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListGrantedProjectRolesResponse>): ListGrantedProjectRolesResponse {
    const message = createBaseListGrantedProjectRolesResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Role.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectMembersRequest(): ListProjectMembersRequest {
  return { projectId: "", query: undefined, queries: [] };
}

export const ListProjectMembersRequest = {
  encode(message: ListProjectMembersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.queries) {
      SearchQuery1.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectMembersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectMembersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(SearchQuery1.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectMembersRequest>): ListProjectMembersRequest {
    return ListProjectMembersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectMembersRequest>): ListProjectMembersRequest {
    const message = createBaseListProjectMembersRequest();
    message.projectId = object.projectId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => SearchQuery1.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectMembersResponse(): ListProjectMembersResponse {
  return { details: undefined, result: [] };
}

export const ListProjectMembersResponse = {
  encode(message: ListProjectMembersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Member.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectMembersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectMembersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Member.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectMembersResponse>): ListProjectMembersResponse {
    return ListProjectMembersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectMembersResponse>): ListProjectMembersResponse {
    const message = createBaseListProjectMembersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Member.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddProjectMemberRequest(): AddProjectMemberRequest {
  return { projectId: "", userId: "", roles: [] };
}

export const AddProjectMemberRequest = {
  encode(message: AddProjectMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddProjectMemberRequest>): AddProjectMemberRequest {
    return AddProjectMemberRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddProjectMemberRequest>): AddProjectMemberRequest {
    const message = createBaseAddProjectMemberRequest();
    message.projectId = object.projectId ?? "";
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddProjectMemberResponse(): AddProjectMemberResponse {
  return { details: undefined };
}

export const AddProjectMemberResponse = {
  encode(message: AddProjectMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddProjectMemberResponse>): AddProjectMemberResponse {
    return AddProjectMemberResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddProjectMemberResponse>): AddProjectMemberResponse {
    const message = createBaseAddProjectMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateProjectMemberRequest(): UpdateProjectMemberRequest {
  return { projectId: "", userId: "", roles: [] };
}

export const UpdateProjectMemberRequest = {
  encode(message: UpdateProjectMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateProjectMemberRequest>): UpdateProjectMemberRequest {
    return UpdateProjectMemberRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProjectMemberRequest>): UpdateProjectMemberRequest {
    const message = createBaseUpdateProjectMemberRequest();
    message.projectId = object.projectId ?? "";
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateProjectMemberResponse(): UpdateProjectMemberResponse {
  return { details: undefined };
}

export const UpdateProjectMemberResponse = {
  encode(message: UpdateProjectMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateProjectMemberResponse>): UpdateProjectMemberResponse {
    return UpdateProjectMemberResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProjectMemberResponse>): UpdateProjectMemberResponse {
    const message = createBaseUpdateProjectMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveProjectMemberRequest(): RemoveProjectMemberRequest {
  return { projectId: "", userId: "" };
}

export const RemoveProjectMemberRequest = {
  encode(message: RemoveProjectMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveProjectMemberRequest>): RemoveProjectMemberRequest {
    return RemoveProjectMemberRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveProjectMemberRequest>): RemoveProjectMemberRequest {
    const message = createBaseRemoveProjectMemberRequest();
    message.projectId = object.projectId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveProjectMemberResponse(): RemoveProjectMemberResponse {
  return { details: undefined };
}

export const RemoveProjectMemberResponse = {
  encode(message: RemoveProjectMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveProjectMemberResponse>): RemoveProjectMemberResponse {
    return RemoveProjectMemberResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveProjectMemberResponse>): RemoveProjectMemberResponse {
    const message = createBaseRemoveProjectMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetAppByIDRequest(): GetAppByIDRequest {
  return { projectId: "", appId: "" };
}

export const GetAppByIDRequest = {
  encode(message: GetAppByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAppByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetAppByIDRequest>): GetAppByIDRequest {
    return GetAppByIDRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAppByIDRequest>): GetAppByIDRequest {
    const message = createBaseGetAppByIDRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseGetAppByIDResponse(): GetAppByIDResponse {
  return { app: undefined };
}

export const GetAppByIDResponse = {
  encode(message: GetAppByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.app !== undefined) {
      App.encode(message.app, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAppByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.app = App.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetAppByIDResponse>): GetAppByIDResponse {
    return GetAppByIDResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAppByIDResponse>): GetAppByIDResponse {
    const message = createBaseGetAppByIDResponse();
    message.app = (object.app !== undefined && object.app !== null) ? App.fromPartial(object.app) : undefined;
    return message;
  },
};

function createBaseListAppsRequest(): ListAppsRequest {
  return { projectId: "", query: undefined, queries: [] };
}

export const ListAppsRequest = {
  encode(message: ListAppsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.queries) {
      AppQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAppsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(AppQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListAppsRequest>): ListAppsRequest {
    return ListAppsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppsRequest>): ListAppsRequest {
    const message = createBaseListAppsRequest();
    message.projectId = object.projectId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => AppQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListAppsResponse(): ListAppsResponse {
  return { details: undefined, result: [] };
}

export const ListAppsResponse = {
  encode(message: ListAppsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      App.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAppsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(App.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListAppsResponse>): ListAppsResponse {
    return ListAppsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppsResponse>): ListAppsResponse {
    const message = createBaseListAppsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => App.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListAppChangesRequest(): ListAppChangesRequest {
  return { query: undefined, projectId: "", appId: "" };
}

export const ListAppChangesRequest = {
  encode(message: ListAppChangesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ChangeQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(26).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAppChangesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppChangesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ChangeQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListAppChangesRequest>): ListAppChangesRequest {
    return ListAppChangesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppChangesRequest>): ListAppChangesRequest {
    const message = createBaseListAppChangesRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ChangeQuery.fromPartial(object.query)
      : undefined;
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseListAppChangesResponse(): ListAppChangesResponse {
  return { result: [] };
}

export const ListAppChangesResponse = {
  encode(message: ListAppChangesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      Change.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAppChangesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppChangesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Change.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListAppChangesResponse>): ListAppChangesResponse {
    return ListAppChangesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppChangesResponse>): ListAppChangesResponse {
    const message = createBaseListAppChangesResponse();
    message.result = object.result?.map((e) => Change.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddOIDCAppRequest(): AddOIDCAppRequest {
  return {
    projectId: "",
    name: "",
    redirectUris: [],
    responseTypes: [],
    grantTypes: [],
    appType: 0,
    authMethodType: 0,
    postLogoutRedirectUris: [],
    version: 0,
    devMode: false,
    accessTokenType: 0,
    accessTokenRoleAssertion: false,
    idTokenRoleAssertion: false,
    idTokenUserinfoAssertion: false,
    clockSkew: undefined,
    additionalOrigins: [],
    skipNativeAppSuccessPage: false,
  };
}

export const AddOIDCAppRequest = {
  encode(message: AddOIDCAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.redirectUris) {
      writer.uint32(26).string(v!);
    }
    writer.uint32(34).fork();
    for (const v of message.responseTypes) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(42).fork();
    for (const v of message.grantTypes) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.appType !== 0) {
      writer.uint32(48).int32(message.appType);
    }
    if (message.authMethodType !== 0) {
      writer.uint32(56).int32(message.authMethodType);
    }
    for (const v of message.postLogoutRedirectUris) {
      writer.uint32(66).string(v!);
    }
    if (message.version !== 0) {
      writer.uint32(72).int32(message.version);
    }
    if (message.devMode === true) {
      writer.uint32(80).bool(message.devMode);
    }
    if (message.accessTokenType !== 0) {
      writer.uint32(88).int32(message.accessTokenType);
    }
    if (message.accessTokenRoleAssertion === true) {
      writer.uint32(96).bool(message.accessTokenRoleAssertion);
    }
    if (message.idTokenRoleAssertion === true) {
      writer.uint32(104).bool(message.idTokenRoleAssertion);
    }
    if (message.idTokenUserinfoAssertion === true) {
      writer.uint32(112).bool(message.idTokenUserinfoAssertion);
    }
    if (message.clockSkew !== undefined) {
      Duration.encode(message.clockSkew, writer.uint32(122).fork()).ldelim();
    }
    for (const v of message.additionalOrigins) {
      writer.uint32(130).string(v!);
    }
    if (message.skipNativeAppSuccessPage === true) {
      writer.uint32(136).bool(message.skipNativeAppSuccessPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOIDCAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOIDCAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.redirectUris.push(reader.string());
          continue;
        case 4:
          if (tag === 32) {
            message.responseTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.responseTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag === 40) {
            message.grantTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.grantTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.appType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.authMethodType = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.postLogoutRedirectUris.push(reader.string());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.version = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.devMode = reader.bool();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.accessTokenType = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.accessTokenRoleAssertion = reader.bool();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.idTokenRoleAssertion = reader.bool();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.idTokenUserinfoAssertion = reader.bool();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.clockSkew = Duration.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.additionalOrigins.push(reader.string());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.skipNativeAppSuccessPage = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddOIDCAppRequest>): AddOIDCAppRequest {
    return AddOIDCAppRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOIDCAppRequest>): AddOIDCAppRequest {
    const message = createBaseAddOIDCAppRequest();
    message.projectId = object.projectId ?? "";
    message.name = object.name ?? "";
    message.redirectUris = object.redirectUris?.map((e) => e) || [];
    message.responseTypes = object.responseTypes?.map((e) => e) || [];
    message.grantTypes = object.grantTypes?.map((e) => e) || [];
    message.appType = object.appType ?? 0;
    message.authMethodType = object.authMethodType ?? 0;
    message.postLogoutRedirectUris = object.postLogoutRedirectUris?.map((e) => e) || [];
    message.version = object.version ?? 0;
    message.devMode = object.devMode ?? false;
    message.accessTokenType = object.accessTokenType ?? 0;
    message.accessTokenRoleAssertion = object.accessTokenRoleAssertion ?? false;
    message.idTokenRoleAssertion = object.idTokenRoleAssertion ?? false;
    message.idTokenUserinfoAssertion = object.idTokenUserinfoAssertion ?? false;
    message.clockSkew = (object.clockSkew !== undefined && object.clockSkew !== null)
      ? Duration.fromPartial(object.clockSkew)
      : undefined;
    message.additionalOrigins = object.additionalOrigins?.map((e) => e) || [];
    message.skipNativeAppSuccessPage = object.skipNativeAppSuccessPage ?? false;
    return message;
  },
};

function createBaseAddOIDCAppResponse(): AddOIDCAppResponse {
  return {
    appId: "",
    details: undefined,
    clientId: "",
    clientSecret: "",
    noneCompliant: false,
    complianceProblems: [],
  };
}

export const AddOIDCAppResponse = {
  encode(message: AddOIDCAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appId !== "") {
      writer.uint32(10).string(message.appId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.noneCompliant === true) {
      writer.uint32(40).bool(message.noneCompliant);
    }
    for (const v of message.complianceProblems) {
      LocalizedMessage.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOIDCAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOIDCAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.noneCompliant = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.complianceProblems.push(LocalizedMessage.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddOIDCAppResponse>): AddOIDCAppResponse {
    return AddOIDCAppResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOIDCAppResponse>): AddOIDCAppResponse {
    const message = createBaseAddOIDCAppResponse();
    message.appId = object.appId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.noneCompliant = object.noneCompliant ?? false;
    message.complianceProblems = object.complianceProblems?.map((e) => LocalizedMessage.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddSAMLAppRequest(): AddSAMLAppRequest {
  return { projectId: "", name: "", metadataXml: undefined, metadataUrl: undefined };
}

export const AddSAMLAppRequest = {
  encode(message: AddSAMLAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.metadataXml !== undefined) {
      writer.uint32(26).bytes(message.metadataXml);
    }
    if (message.metadataUrl !== undefined) {
      writer.uint32(34).string(message.metadataUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSAMLAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSAMLAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadataXml = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadataUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddSAMLAppRequest>): AddSAMLAppRequest {
    return AddSAMLAppRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSAMLAppRequest>): AddSAMLAppRequest {
    const message = createBaseAddSAMLAppRequest();
    message.projectId = object.projectId ?? "";
    message.name = object.name ?? "";
    message.metadataXml = object.metadataXml ?? undefined;
    message.metadataUrl = object.metadataUrl ?? undefined;
    return message;
  },
};

function createBaseAddSAMLAppResponse(): AddSAMLAppResponse {
  return { appId: "", details: undefined };
}

export const AddSAMLAppResponse = {
  encode(message: AddSAMLAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appId !== "") {
      writer.uint32(10).string(message.appId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSAMLAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSAMLAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddSAMLAppResponse>): AddSAMLAppResponse {
    return AddSAMLAppResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSAMLAppResponse>): AddSAMLAppResponse {
    const message = createBaseAddSAMLAppResponse();
    message.appId = object.appId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddAPIAppRequest(): AddAPIAppRequest {
  return { projectId: "", name: "", authMethodType: 0 };
}

export const AddAPIAppRequest = {
  encode(message: AddAPIAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.authMethodType !== 0) {
      writer.uint32(24).int32(message.authMethodType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAPIAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAPIAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.authMethodType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddAPIAppRequest>): AddAPIAppRequest {
    return AddAPIAppRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAPIAppRequest>): AddAPIAppRequest {
    const message = createBaseAddAPIAppRequest();
    message.projectId = object.projectId ?? "";
    message.name = object.name ?? "";
    message.authMethodType = object.authMethodType ?? 0;
    return message;
  },
};

function createBaseAddAPIAppResponse(): AddAPIAppResponse {
  return { appId: "", details: undefined, clientId: "", clientSecret: "" };
}

export const AddAPIAppResponse = {
  encode(message: AddAPIAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appId !== "") {
      writer.uint32(10).string(message.appId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAPIAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAPIAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddAPIAppResponse>): AddAPIAppResponse {
    return AddAPIAppResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAPIAppResponse>): AddAPIAppResponse {
    const message = createBaseAddAPIAppResponse();
    message.appId = object.appId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    return message;
  },
};

function createBaseUpdateAppRequest(): UpdateAppRequest {
  return { projectId: "", appId: "", name: "" };
}

export const UpdateAppRequest = {
  encode(message: UpdateAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateAppRequest>): UpdateAppRequest {
    return UpdateAppRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAppRequest>): UpdateAppRequest {
    const message = createBaseUpdateAppRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateAppResponse(): UpdateAppResponse {
  return { details: undefined };
}

export const UpdateAppResponse = {
  encode(message: UpdateAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateAppResponse>): UpdateAppResponse {
    return UpdateAppResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAppResponse>): UpdateAppResponse {
    const message = createBaseUpdateAppResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateOIDCAppConfigRequest(): UpdateOIDCAppConfigRequest {
  return {
    projectId: "",
    appId: "",
    redirectUris: [],
    responseTypes: [],
    grantTypes: [],
    appType: 0,
    authMethodType: 0,
    postLogoutRedirectUris: [],
    devMode: false,
    accessTokenType: 0,
    accessTokenRoleAssertion: false,
    idTokenRoleAssertion: false,
    idTokenUserinfoAssertion: false,
    clockSkew: undefined,
    additionalOrigins: [],
    skipNativeAppSuccessPage: false,
  };
}

export const UpdateOIDCAppConfigRequest = {
  encode(message: UpdateOIDCAppConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    for (const v of message.redirectUris) {
      writer.uint32(26).string(v!);
    }
    writer.uint32(34).fork();
    for (const v of message.responseTypes) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(42).fork();
    for (const v of message.grantTypes) {
      writer.int32(v);
    }
    writer.ldelim();
    if (message.appType !== 0) {
      writer.uint32(48).int32(message.appType);
    }
    if (message.authMethodType !== 0) {
      writer.uint32(56).int32(message.authMethodType);
    }
    for (const v of message.postLogoutRedirectUris) {
      writer.uint32(66).string(v!);
    }
    if (message.devMode === true) {
      writer.uint32(72).bool(message.devMode);
    }
    if (message.accessTokenType !== 0) {
      writer.uint32(80).int32(message.accessTokenType);
    }
    if (message.accessTokenRoleAssertion === true) {
      writer.uint32(88).bool(message.accessTokenRoleAssertion);
    }
    if (message.idTokenRoleAssertion === true) {
      writer.uint32(96).bool(message.idTokenRoleAssertion);
    }
    if (message.idTokenUserinfoAssertion === true) {
      writer.uint32(104).bool(message.idTokenUserinfoAssertion);
    }
    if (message.clockSkew !== undefined) {
      Duration.encode(message.clockSkew, writer.uint32(114).fork()).ldelim();
    }
    for (const v of message.additionalOrigins) {
      writer.uint32(122).string(v!);
    }
    if (message.skipNativeAppSuccessPage === true) {
      writer.uint32(128).bool(message.skipNativeAppSuccessPage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOIDCAppConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOIDCAppConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.redirectUris.push(reader.string());
          continue;
        case 4:
          if (tag === 32) {
            message.responseTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.responseTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag === 40) {
            message.grantTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.grantTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.appType = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.authMethodType = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.postLogoutRedirectUris.push(reader.string());
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.devMode = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.accessTokenType = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.accessTokenRoleAssertion = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.idTokenRoleAssertion = reader.bool();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.idTokenUserinfoAssertion = reader.bool();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.clockSkew = Duration.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.additionalOrigins.push(reader.string());
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.skipNativeAppSuccessPage = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateOIDCAppConfigRequest>): UpdateOIDCAppConfigRequest {
    return UpdateOIDCAppConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOIDCAppConfigRequest>): UpdateOIDCAppConfigRequest {
    const message = createBaseUpdateOIDCAppConfigRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.redirectUris = object.redirectUris?.map((e) => e) || [];
    message.responseTypes = object.responseTypes?.map((e) => e) || [];
    message.grantTypes = object.grantTypes?.map((e) => e) || [];
    message.appType = object.appType ?? 0;
    message.authMethodType = object.authMethodType ?? 0;
    message.postLogoutRedirectUris = object.postLogoutRedirectUris?.map((e) => e) || [];
    message.devMode = object.devMode ?? false;
    message.accessTokenType = object.accessTokenType ?? 0;
    message.accessTokenRoleAssertion = object.accessTokenRoleAssertion ?? false;
    message.idTokenRoleAssertion = object.idTokenRoleAssertion ?? false;
    message.idTokenUserinfoAssertion = object.idTokenUserinfoAssertion ?? false;
    message.clockSkew = (object.clockSkew !== undefined && object.clockSkew !== null)
      ? Duration.fromPartial(object.clockSkew)
      : undefined;
    message.additionalOrigins = object.additionalOrigins?.map((e) => e) || [];
    message.skipNativeAppSuccessPage = object.skipNativeAppSuccessPage ?? false;
    return message;
  },
};

function createBaseUpdateOIDCAppConfigResponse(): UpdateOIDCAppConfigResponse {
  return { details: undefined };
}

export const UpdateOIDCAppConfigResponse = {
  encode(message: UpdateOIDCAppConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOIDCAppConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOIDCAppConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateOIDCAppConfigResponse>): UpdateOIDCAppConfigResponse {
    return UpdateOIDCAppConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOIDCAppConfigResponse>): UpdateOIDCAppConfigResponse {
    const message = createBaseUpdateOIDCAppConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateSAMLAppConfigRequest(): UpdateSAMLAppConfigRequest {
  return { projectId: "", appId: "", metadataXml: undefined, metadataUrl: undefined };
}

export const UpdateSAMLAppConfigRequest = {
  encode(message: UpdateSAMLAppConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.metadataXml !== undefined) {
      writer.uint32(26).bytes(message.metadataXml);
    }
    if (message.metadataUrl !== undefined) {
      writer.uint32(34).string(message.metadataUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSAMLAppConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSAMLAppConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadataXml = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadataUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateSAMLAppConfigRequest>): UpdateSAMLAppConfigRequest {
    return UpdateSAMLAppConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSAMLAppConfigRequest>): UpdateSAMLAppConfigRequest {
    const message = createBaseUpdateSAMLAppConfigRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.metadataXml = object.metadataXml ?? undefined;
    message.metadataUrl = object.metadataUrl ?? undefined;
    return message;
  },
};

function createBaseUpdateSAMLAppConfigResponse(): UpdateSAMLAppConfigResponse {
  return { details: undefined };
}

export const UpdateSAMLAppConfigResponse = {
  encode(message: UpdateSAMLAppConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSAMLAppConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSAMLAppConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateSAMLAppConfigResponse>): UpdateSAMLAppConfigResponse {
    return UpdateSAMLAppConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSAMLAppConfigResponse>): UpdateSAMLAppConfigResponse {
    const message = createBaseUpdateSAMLAppConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateAPIAppConfigRequest(): UpdateAPIAppConfigRequest {
  return { projectId: "", appId: "", authMethodType: 0 };
}

export const UpdateAPIAppConfigRequest = {
  encode(message: UpdateAPIAppConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.authMethodType !== 0) {
      writer.uint32(56).int32(message.authMethodType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAPIAppConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAPIAppConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.authMethodType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateAPIAppConfigRequest>): UpdateAPIAppConfigRequest {
    return UpdateAPIAppConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAPIAppConfigRequest>): UpdateAPIAppConfigRequest {
    const message = createBaseUpdateAPIAppConfigRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.authMethodType = object.authMethodType ?? 0;
    return message;
  },
};

function createBaseUpdateAPIAppConfigResponse(): UpdateAPIAppConfigResponse {
  return { details: undefined };
}

export const UpdateAPIAppConfigResponse = {
  encode(message: UpdateAPIAppConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAPIAppConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAPIAppConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateAPIAppConfigResponse>): UpdateAPIAppConfigResponse {
    return UpdateAPIAppConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAPIAppConfigResponse>): UpdateAPIAppConfigResponse {
    const message = createBaseUpdateAPIAppConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateAppRequest(): DeactivateAppRequest {
  return { projectId: "", appId: "" };
}

export const DeactivateAppRequest = {
  encode(message: DeactivateAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateAppRequest>): DeactivateAppRequest {
    return DeactivateAppRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateAppRequest>): DeactivateAppRequest {
    const message = createBaseDeactivateAppRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseDeactivateAppResponse(): DeactivateAppResponse {
  return { details: undefined };
}

export const DeactivateAppResponse = {
  encode(message: DeactivateAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateAppResponse>): DeactivateAppResponse {
    return DeactivateAppResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateAppResponse>): DeactivateAppResponse {
    const message = createBaseDeactivateAppResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateAppRequest(): ReactivateAppRequest {
  return { projectId: "", appId: "" };
}

export const ReactivateAppRequest = {
  encode(message: ReactivateAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateAppRequest>): ReactivateAppRequest {
    return ReactivateAppRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateAppRequest>): ReactivateAppRequest {
    const message = createBaseReactivateAppRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseReactivateAppResponse(): ReactivateAppResponse {
  return { details: undefined };
}

export const ReactivateAppResponse = {
  encode(message: ReactivateAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateAppResponse>): ReactivateAppResponse {
    return ReactivateAppResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateAppResponse>): ReactivateAppResponse {
    const message = createBaseReactivateAppResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveAppRequest(): RemoveAppRequest {
  return { projectId: "", appId: "" };
}

export const RemoveAppRequest = {
  encode(message: RemoveAppRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveAppRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAppRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveAppRequest>): RemoveAppRequest {
    return RemoveAppRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveAppRequest>): RemoveAppRequest {
    const message = createBaseRemoveAppRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseRemoveAppResponse(): RemoveAppResponse {
  return { details: undefined };
}

export const RemoveAppResponse = {
  encode(message: RemoveAppResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveAppResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAppResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveAppResponse>): RemoveAppResponse {
    return RemoveAppResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveAppResponse>): RemoveAppResponse {
    const message = createBaseRemoveAppResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRegenerateOIDCClientSecretRequest(): RegenerateOIDCClientSecretRequest {
  return { projectId: "", appId: "" };
}

export const RegenerateOIDCClientSecretRequest = {
  encode(message: RegenerateOIDCClientSecretRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegenerateOIDCClientSecretRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegenerateOIDCClientSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RegenerateOIDCClientSecretRequest>): RegenerateOIDCClientSecretRequest {
    return RegenerateOIDCClientSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegenerateOIDCClientSecretRequest>): RegenerateOIDCClientSecretRequest {
    const message = createBaseRegenerateOIDCClientSecretRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseRegenerateOIDCClientSecretResponse(): RegenerateOIDCClientSecretResponse {
  return { clientSecret: "", details: undefined };
}

export const RegenerateOIDCClientSecretResponse = {
  encode(message: RegenerateOIDCClientSecretResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clientSecret !== "") {
      writer.uint32(10).string(message.clientSecret);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegenerateOIDCClientSecretResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegenerateOIDCClientSecretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RegenerateOIDCClientSecretResponse>): RegenerateOIDCClientSecretResponse {
    return RegenerateOIDCClientSecretResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegenerateOIDCClientSecretResponse>): RegenerateOIDCClientSecretResponse {
    const message = createBaseRegenerateOIDCClientSecretResponse();
    message.clientSecret = object.clientSecret ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRegenerateAPIClientSecretRequest(): RegenerateAPIClientSecretRequest {
  return { projectId: "", appId: "" };
}

export const RegenerateAPIClientSecretRequest = {
  encode(message: RegenerateAPIClientSecretRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegenerateAPIClientSecretRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegenerateAPIClientSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RegenerateAPIClientSecretRequest>): RegenerateAPIClientSecretRequest {
    return RegenerateAPIClientSecretRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegenerateAPIClientSecretRequest>): RegenerateAPIClientSecretRequest {
    const message = createBaseRegenerateAPIClientSecretRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    return message;
  },
};

function createBaseRegenerateAPIClientSecretResponse(): RegenerateAPIClientSecretResponse {
  return { clientSecret: "", details: undefined };
}

export const RegenerateAPIClientSecretResponse = {
  encode(message: RegenerateAPIClientSecretResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clientSecret !== "") {
      writer.uint32(10).string(message.clientSecret);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegenerateAPIClientSecretResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegenerateAPIClientSecretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RegenerateAPIClientSecretResponse>): RegenerateAPIClientSecretResponse {
    return RegenerateAPIClientSecretResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegenerateAPIClientSecretResponse>): RegenerateAPIClientSecretResponse {
    const message = createBaseRegenerateAPIClientSecretResponse();
    message.clientSecret = object.clientSecret ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetAppKeyRequest(): GetAppKeyRequest {
  return { projectId: "", appId: "", keyId: "" };
}

export const GetAppKeyRequest = {
  encode(message: GetAppKeyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.keyId !== "") {
      writer.uint32(26).string(message.keyId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAppKeyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetAppKeyRequest>): GetAppKeyRequest {
    return GetAppKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAppKeyRequest>): GetAppKeyRequest {
    const message = createBaseGetAppKeyRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.keyId = object.keyId ?? "";
    return message;
  },
};

function createBaseGetAppKeyResponse(): GetAppKeyResponse {
  return { key: undefined };
}

export const GetAppKeyResponse = {
  encode(message: GetAppKeyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== undefined) {
      Key.encode(message.key, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetAppKeyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = Key.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetAppKeyResponse>): GetAppKeyResponse {
    return GetAppKeyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAppKeyResponse>): GetAppKeyResponse {
    const message = createBaseGetAppKeyResponse();
    message.key = (object.key !== undefined && object.key !== null) ? Key.fromPartial(object.key) : undefined;
    return message;
  },
};

function createBaseListAppKeysRequest(): ListAppKeysRequest {
  return { query: undefined, appId: "", projectId: "" };
}

export const ListAppKeysRequest = {
  encode(message: ListAppKeysRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.projectId !== "") {
      writer.uint32(26).string(message.projectId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAppKeysRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListAppKeysRequest>): ListAppKeysRequest {
    return ListAppKeysRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppKeysRequest>): ListAppKeysRequest {
    const message = createBaseListAppKeysRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.appId = object.appId ?? "";
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseListAppKeysResponse(): ListAppKeysResponse {
  return { details: undefined, result: [] };
}

export const ListAppKeysResponse = {
  encode(message: ListAppKeysResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Key.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAppKeysResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAppKeysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Key.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListAppKeysResponse>): ListAppKeysResponse {
    return ListAppKeysResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAppKeysResponse>): ListAppKeysResponse {
    const message = createBaseListAppKeysResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Key.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddAppKeyRequest(): AddAppKeyRequest {
  return { projectId: "", appId: "", type: 0, expirationDate: undefined };
}

export const AddAppKeyRequest = {
  encode(message: AddAppKeyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.expirationDate !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationDate), writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAppKeyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAppKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.expirationDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddAppKeyRequest>): AddAppKeyRequest {
    return AddAppKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAppKeyRequest>): AddAppKeyRequest {
    const message = createBaseAddAppKeyRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.type = object.type ?? 0;
    message.expirationDate = object.expirationDate ?? undefined;
    return message;
  },
};

function createBaseAddAppKeyResponse(): AddAppKeyResponse {
  return { id: "", details: undefined, keyDetails: new Uint8Array(0) };
}

export const AddAppKeyResponse = {
  encode(message: AddAppKeyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    if (message.keyDetails.length !== 0) {
      writer.uint32(26).bytes(message.keyDetails);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAppKeyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAppKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keyDetails = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddAppKeyResponse>): AddAppKeyResponse {
    return AddAppKeyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAppKeyResponse>): AddAppKeyResponse {
    const message = createBaseAddAppKeyResponse();
    message.id = object.id ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.keyDetails = object.keyDetails ?? new Uint8Array(0);
    return message;
  },
};

function createBaseRemoveAppKeyRequest(): RemoveAppKeyRequest {
  return { projectId: "", appId: "", keyId: "" };
}

export const RemoveAppKeyRequest = {
  encode(message: RemoveAppKeyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.keyId !== "") {
      writer.uint32(26).string(message.keyId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveAppKeyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAppKeyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.keyId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveAppKeyRequest>): RemoveAppKeyRequest {
    return RemoveAppKeyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveAppKeyRequest>): RemoveAppKeyRequest {
    const message = createBaseRemoveAppKeyRequest();
    message.projectId = object.projectId ?? "";
    message.appId = object.appId ?? "";
    message.keyId = object.keyId ?? "";
    return message;
  },
};

function createBaseRemoveAppKeyResponse(): RemoveAppKeyResponse {
  return { details: undefined };
}

export const RemoveAppKeyResponse = {
  encode(message: RemoveAppKeyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveAppKeyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAppKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveAppKeyResponse>): RemoveAppKeyResponse {
    return RemoveAppKeyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveAppKeyResponse>): RemoveAppKeyResponse {
    const message = createBaseRemoveAppKeyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListProjectGrantChangesRequest(): ListProjectGrantChangesRequest {
  return { query: undefined, projectId: "", grantId: "" };
}

export const ListProjectGrantChangesRequest = {
  encode(message: ListProjectGrantChangesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ChangeQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(26).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantChangesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantChangesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ChangeQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectGrantChangesRequest>): ListProjectGrantChangesRequest {
    return ListProjectGrantChangesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectGrantChangesRequest>): ListProjectGrantChangesRequest {
    const message = createBaseListProjectGrantChangesRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ChangeQuery.fromPartial(object.query)
      : undefined;
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseListProjectGrantChangesResponse(): ListProjectGrantChangesResponse {
  return { result: [] };
}

export const ListProjectGrantChangesResponse = {
  encode(message: ListProjectGrantChangesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      Change.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantChangesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantChangesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Change.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectGrantChangesResponse>): ListProjectGrantChangesResponse {
    return ListProjectGrantChangesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectGrantChangesResponse>): ListProjectGrantChangesResponse {
    const message = createBaseListProjectGrantChangesResponse();
    message.result = object.result?.map((e) => Change.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetProjectGrantByIDRequest(): GetProjectGrantByIDRequest {
  return { projectId: "", grantId: "" };
}

export const GetProjectGrantByIDRequest = {
  encode(message: GetProjectGrantByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectGrantByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectGrantByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetProjectGrantByIDRequest>): GetProjectGrantByIDRequest {
    return GetProjectGrantByIDRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProjectGrantByIDRequest>): GetProjectGrantByIDRequest {
    const message = createBaseGetProjectGrantByIDRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseGetProjectGrantByIDResponse(): GetProjectGrantByIDResponse {
  return { projectGrant: undefined };
}

export const GetProjectGrantByIDResponse = {
  encode(message: GetProjectGrantByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectGrant !== undefined) {
      GrantedProject.encode(message.projectGrant, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectGrantByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProjectGrantByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectGrant = GrantedProject.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetProjectGrantByIDResponse>): GetProjectGrantByIDResponse {
    return GetProjectGrantByIDResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProjectGrantByIDResponse>): GetProjectGrantByIDResponse {
    const message = createBaseGetProjectGrantByIDResponse();
    message.projectGrant = (object.projectGrant !== undefined && object.projectGrant !== null)
      ? GrantedProject.fromPartial(object.projectGrant)
      : undefined;
    return message;
  },
};

function createBaseListProjectGrantsRequest(): ListProjectGrantsRequest {
  return { projectId: "", query: undefined, queries: [] };
}

export const ListProjectGrantsRequest = {
  encode(message: ListProjectGrantsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.queries) {
      ProjectGrantQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(ProjectGrantQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectGrantsRequest>): ListProjectGrantsRequest {
    return ListProjectGrantsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectGrantsRequest>): ListProjectGrantsRequest {
    const message = createBaseListProjectGrantsRequest();
    message.projectId = object.projectId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => ProjectGrantQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectGrantsResponse(): ListProjectGrantsResponse {
  return { details: undefined, result: [] };
}

export const ListProjectGrantsResponse = {
  encode(message: ListProjectGrantsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      GrantedProject.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(GrantedProject.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectGrantsResponse>): ListProjectGrantsResponse {
    return ListProjectGrantsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectGrantsResponse>): ListProjectGrantsResponse {
    const message = createBaseListProjectGrantsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => GrantedProject.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListAllProjectGrantsRequest(): ListAllProjectGrantsRequest {
  return { query: undefined, queries: [] };
}

export const ListAllProjectGrantsRequest = {
  encode(message: ListAllProjectGrantsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      AllProjectGrantQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAllProjectGrantsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllProjectGrantsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(AllProjectGrantQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListAllProjectGrantsRequest>): ListAllProjectGrantsRequest {
    return ListAllProjectGrantsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAllProjectGrantsRequest>): ListAllProjectGrantsRequest {
    const message = createBaseListAllProjectGrantsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => AllProjectGrantQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListAllProjectGrantsResponse(): ListAllProjectGrantsResponse {
  return { details: undefined, result: [] };
}

export const ListAllProjectGrantsResponse = {
  encode(message: ListAllProjectGrantsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      GrantedProject.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListAllProjectGrantsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAllProjectGrantsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(GrantedProject.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListAllProjectGrantsResponse>): ListAllProjectGrantsResponse {
    return ListAllProjectGrantsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAllProjectGrantsResponse>): ListAllProjectGrantsResponse {
    const message = createBaseListAllProjectGrantsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => GrantedProject.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddProjectGrantRequest(): AddProjectGrantRequest {
  return { projectId: "", grantedOrgId: "", roleKeys: [] };
}

export const AddProjectGrantRequest = {
  encode(message: AddProjectGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantedOrgId !== "") {
      writer.uint32(18).string(message.grantedOrgId);
    }
    for (const v of message.roleKeys) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantedOrgId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roleKeys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddProjectGrantRequest>): AddProjectGrantRequest {
    return AddProjectGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddProjectGrantRequest>): AddProjectGrantRequest {
    const message = createBaseAddProjectGrantRequest();
    message.projectId = object.projectId ?? "";
    message.grantedOrgId = object.grantedOrgId ?? "";
    message.roleKeys = object.roleKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddProjectGrantResponse(): AddProjectGrantResponse {
  return { grantId: "", details: undefined };
}

export const AddProjectGrantResponse = {
  encode(message: AddProjectGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.grantId !== "") {
      writer.uint32(10).string(message.grantId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddProjectGrantResponse>): AddProjectGrantResponse {
    return AddProjectGrantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddProjectGrantResponse>): AddProjectGrantResponse {
    const message = createBaseAddProjectGrantResponse();
    message.grantId = object.grantId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateProjectGrantRequest(): UpdateProjectGrantRequest {
  return { projectId: "", grantId: "", roleKeys: [] };
}

export const UpdateProjectGrantRequest = {
  encode(message: UpdateProjectGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    for (const v of message.roleKeys) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roleKeys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateProjectGrantRequest>): UpdateProjectGrantRequest {
    return UpdateProjectGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProjectGrantRequest>): UpdateProjectGrantRequest {
    const message = createBaseUpdateProjectGrantRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.roleKeys = object.roleKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateProjectGrantResponse(): UpdateProjectGrantResponse {
  return { details: undefined };
}

export const UpdateProjectGrantResponse = {
  encode(message: UpdateProjectGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateProjectGrantResponse>): UpdateProjectGrantResponse {
    return UpdateProjectGrantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProjectGrantResponse>): UpdateProjectGrantResponse {
    const message = createBaseUpdateProjectGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateProjectGrantRequest(): DeactivateProjectGrantRequest {
  return { projectId: "", grantId: "" };
}

export const DeactivateProjectGrantRequest = {
  encode(message: DeactivateProjectGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateProjectGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateProjectGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateProjectGrantRequest>): DeactivateProjectGrantRequest {
    return DeactivateProjectGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateProjectGrantRequest>): DeactivateProjectGrantRequest {
    const message = createBaseDeactivateProjectGrantRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseDeactivateProjectGrantResponse(): DeactivateProjectGrantResponse {
  return { details: undefined };
}

export const DeactivateProjectGrantResponse = {
  encode(message: DeactivateProjectGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateProjectGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateProjectGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateProjectGrantResponse>): DeactivateProjectGrantResponse {
    return DeactivateProjectGrantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateProjectGrantResponse>): DeactivateProjectGrantResponse {
    const message = createBaseDeactivateProjectGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateProjectGrantRequest(): ReactivateProjectGrantRequest {
  return { projectId: "", grantId: "" };
}

export const ReactivateProjectGrantRequest = {
  encode(message: ReactivateProjectGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateProjectGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateProjectGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateProjectGrantRequest>): ReactivateProjectGrantRequest {
    return ReactivateProjectGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateProjectGrantRequest>): ReactivateProjectGrantRequest {
    const message = createBaseReactivateProjectGrantRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseReactivateProjectGrantResponse(): ReactivateProjectGrantResponse {
  return { details: undefined };
}

export const ReactivateProjectGrantResponse = {
  encode(message: ReactivateProjectGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateProjectGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateProjectGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateProjectGrantResponse>): ReactivateProjectGrantResponse {
    return ReactivateProjectGrantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateProjectGrantResponse>): ReactivateProjectGrantResponse {
    const message = createBaseReactivateProjectGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveProjectGrantRequest(): RemoveProjectGrantRequest {
  return { projectId: "", grantId: "" };
}

export const RemoveProjectGrantRequest = {
  encode(message: RemoveProjectGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveProjectGrantRequest>): RemoveProjectGrantRequest {
    return RemoveProjectGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveProjectGrantRequest>): RemoveProjectGrantRequest {
    const message = createBaseRemoveProjectGrantRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseRemoveProjectGrantResponse(): RemoveProjectGrantResponse {
  return { details: undefined };
}

export const RemoveProjectGrantResponse = {
  encode(message: RemoveProjectGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveProjectGrantResponse>): RemoveProjectGrantResponse {
    return RemoveProjectGrantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveProjectGrantResponse>): RemoveProjectGrantResponse {
    const message = createBaseRemoveProjectGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListProjectGrantMemberRolesRequest(): ListProjectGrantMemberRolesRequest {
  return { query: undefined, result: [] };
}

export const ListProjectGrantMemberRolesRequest = {
  encode(message: ListProjectGrantMemberRolesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantMemberRolesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantMemberRolesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectGrantMemberRolesRequest>): ListProjectGrantMemberRolesRequest {
    return ListProjectGrantMemberRolesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectGrantMemberRolesRequest>): ListProjectGrantMemberRolesRequest {
    const message = createBaseListProjectGrantMemberRolesRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseListProjectGrantMemberRolesResponse(): ListProjectGrantMemberRolesResponse {
  return { details: undefined, result: [] };
}

export const ListProjectGrantMemberRolesResponse = {
  encode(message: ListProjectGrantMemberRolesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantMemberRolesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantMemberRolesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectGrantMemberRolesResponse>): ListProjectGrantMemberRolesResponse {
    return ListProjectGrantMemberRolesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectGrantMemberRolesResponse>): ListProjectGrantMemberRolesResponse {
    const message = createBaseListProjectGrantMemberRolesResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseListProjectGrantMembersRequest(): ListProjectGrantMembersRequest {
  return { projectId: "", grantId: "", query: undefined, queries: [] };
}

export const ListProjectGrantMembersRequest = {
  encode(message: ListProjectGrantMembersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.queries) {
      SearchQuery1.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantMembersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantMembersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.queries.push(SearchQuery1.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectGrantMembersRequest>): ListProjectGrantMembersRequest {
    return ListProjectGrantMembersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectGrantMembersRequest>): ListProjectGrantMembersRequest {
    const message = createBaseListProjectGrantMembersRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => SearchQuery1.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListProjectGrantMembersResponse(): ListProjectGrantMembersResponse {
  return { details: undefined, result: [] };
}

export const ListProjectGrantMembersResponse = {
  encode(message: ListProjectGrantMembersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Member.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProjectGrantMembersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProjectGrantMembersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Member.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProjectGrantMembersResponse>): ListProjectGrantMembersResponse {
    return ListProjectGrantMembersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProjectGrantMembersResponse>): ListProjectGrantMembersResponse {
    const message = createBaseListProjectGrantMembersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Member.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddProjectGrantMemberRequest(): AddProjectGrantMemberRequest {
  return { projectId: "", grantId: "", userId: "", roles: [] };
}

export const AddProjectGrantMemberRequest = {
  encode(message: AddProjectGrantMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectGrantMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectGrantMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddProjectGrantMemberRequest>): AddProjectGrantMemberRequest {
    return AddProjectGrantMemberRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddProjectGrantMemberRequest>): AddProjectGrantMemberRequest {
    const message = createBaseAddProjectGrantMemberRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddProjectGrantMemberResponse(): AddProjectGrantMemberResponse {
  return { details: undefined };
}

export const AddProjectGrantMemberResponse = {
  encode(message: AddProjectGrantMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectGrantMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddProjectGrantMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddProjectGrantMemberResponse>): AddProjectGrantMemberResponse {
    return AddProjectGrantMemberResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddProjectGrantMemberResponse>): AddProjectGrantMemberResponse {
    const message = createBaseAddProjectGrantMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateProjectGrantMemberRequest(): UpdateProjectGrantMemberRequest {
  return { projectId: "", grantId: "", userId: "", roles: [] };
}

export const UpdateProjectGrantMemberRequest = {
  encode(message: UpdateProjectGrantMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    for (const v of message.roles) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectGrantMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectGrantMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.roles.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateProjectGrantMemberRequest>): UpdateProjectGrantMemberRequest {
    return UpdateProjectGrantMemberRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProjectGrantMemberRequest>): UpdateProjectGrantMemberRequest {
    const message = createBaseUpdateProjectGrantMemberRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.userId = object.userId ?? "";
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateProjectGrantMemberResponse(): UpdateProjectGrantMemberResponse {
  return { details: undefined };
}

export const UpdateProjectGrantMemberResponse = {
  encode(message: UpdateProjectGrantMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectGrantMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectGrantMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateProjectGrantMemberResponse>): UpdateProjectGrantMemberResponse {
    return UpdateProjectGrantMemberResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProjectGrantMemberResponse>): UpdateProjectGrantMemberResponse {
    const message = createBaseUpdateProjectGrantMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveProjectGrantMemberRequest(): RemoveProjectGrantMemberRequest {
  return { projectId: "", grantId: "", userId: "" };
}

export const RemoveProjectGrantMemberRequest = {
  encode(message: RemoveProjectGrantMemberRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectGrantMemberRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectGrantMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveProjectGrantMemberRequest>): RemoveProjectGrantMemberRequest {
    return RemoveProjectGrantMemberRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveProjectGrantMemberRequest>): RemoveProjectGrantMemberRequest {
    const message = createBaseRemoveProjectGrantMemberRequest();
    message.projectId = object.projectId ?? "";
    message.grantId = object.grantId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseRemoveProjectGrantMemberResponse(): RemoveProjectGrantMemberResponse {
  return { details: undefined };
}

export const RemoveProjectGrantMemberResponse = {
  encode(message: RemoveProjectGrantMemberResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectGrantMemberResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveProjectGrantMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveProjectGrantMemberResponse>): RemoveProjectGrantMemberResponse {
    return RemoveProjectGrantMemberResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveProjectGrantMemberResponse>): RemoveProjectGrantMemberResponse {
    const message = createBaseRemoveProjectGrantMemberResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetUserGrantByIDRequest(): GetUserGrantByIDRequest {
  return { userId: "", grantId: "" };
}

export const GetUserGrantByIDRequest = {
  encode(message: GetUserGrantByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserGrantByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserGrantByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetUserGrantByIDRequest>): GetUserGrantByIDRequest {
    return GetUserGrantByIDRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserGrantByIDRequest>): GetUserGrantByIDRequest {
    const message = createBaseGetUserGrantByIDRequest();
    message.userId = object.userId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseGetUserGrantByIDResponse(): GetUserGrantByIDResponse {
  return { userGrant: undefined };
}

export const GetUserGrantByIDResponse = {
  encode(message: GetUserGrantByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userGrant !== undefined) {
      UserGrant.encode(message.userGrant, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserGrantByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserGrantByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userGrant = UserGrant.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetUserGrantByIDResponse>): GetUserGrantByIDResponse {
    return GetUserGrantByIDResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserGrantByIDResponse>): GetUserGrantByIDResponse {
    const message = createBaseGetUserGrantByIDResponse();
    message.userGrant = (object.userGrant !== undefined && object.userGrant !== null)
      ? UserGrant.fromPartial(object.userGrant)
      : undefined;
    return message;
  },
};

function createBaseListUserGrantRequest(): ListUserGrantRequest {
  return { query: undefined, queries: [] };
}

export const ListUserGrantRequest = {
  encode(message: ListUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      UserGrantQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(UserGrantQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListUserGrantRequest>): ListUserGrantRequest {
    return ListUserGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUserGrantRequest>): ListUserGrantRequest {
    const message = createBaseListUserGrantRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => UserGrantQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListUserGrantResponse(): ListUserGrantResponse {
  return { details: undefined, result: [] };
}

export const ListUserGrantResponse = {
  encode(message: ListUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      UserGrant.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(UserGrant.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListUserGrantResponse>): ListUserGrantResponse {
    return ListUserGrantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUserGrantResponse>): ListUserGrantResponse {
    const message = createBaseListUserGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => UserGrant.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddUserGrantRequest(): AddUserGrantRequest {
  return { userId: "", projectId: "", projectGrantId: "", roleKeys: [] };
}

export const AddUserGrantRequest = {
  encode(message: AddUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    if (message.projectGrantId !== "") {
      writer.uint32(26).string(message.projectGrantId);
    }
    for (const v of message.roleKeys) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.projectGrantId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.roleKeys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddUserGrantRequest>): AddUserGrantRequest {
    return AddUserGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddUserGrantRequest>): AddUserGrantRequest {
    const message = createBaseAddUserGrantRequest();
    message.userId = object.userId ?? "";
    message.projectId = object.projectId ?? "";
    message.projectGrantId = object.projectGrantId ?? "";
    message.roleKeys = object.roleKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddUserGrantResponse(): AddUserGrantResponse {
  return { userGrantId: "", details: undefined };
}

export const AddUserGrantResponse = {
  encode(message: AddUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userGrantId !== "") {
      writer.uint32(10).string(message.userGrantId);
    }
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userGrantId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddUserGrantResponse>): AddUserGrantResponse {
    return AddUserGrantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddUserGrantResponse>): AddUserGrantResponse {
    const message = createBaseAddUserGrantResponse();
    message.userGrantId = object.userGrantId ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateUserGrantRequest(): UpdateUserGrantRequest {
  return { userId: "", grantId: "", roleKeys: [] };
}

export const UpdateUserGrantRequest = {
  encode(message: UpdateUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    for (const v of message.roleKeys) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.roleKeys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateUserGrantRequest>): UpdateUserGrantRequest {
    return UpdateUserGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateUserGrantRequest>): UpdateUserGrantRequest {
    const message = createBaseUpdateUserGrantRequest();
    message.userId = object.userId ?? "";
    message.grantId = object.grantId ?? "";
    message.roleKeys = object.roleKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateUserGrantResponse(): UpdateUserGrantResponse {
  return { details: undefined };
}

export const UpdateUserGrantResponse = {
  encode(message: UpdateUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateUserGrantResponse>): UpdateUserGrantResponse {
    return UpdateUserGrantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateUserGrantResponse>): UpdateUserGrantResponse {
    const message = createBaseUpdateUserGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeactivateUserGrantRequest(): DeactivateUserGrantRequest {
  return { userId: "", grantId: "" };
}

export const DeactivateUserGrantRequest = {
  encode(message: DeactivateUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateUserGrantRequest>): DeactivateUserGrantRequest {
    return DeactivateUserGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateUserGrantRequest>): DeactivateUserGrantRequest {
    const message = createBaseDeactivateUserGrantRequest();
    message.userId = object.userId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseDeactivateUserGrantResponse(): DeactivateUserGrantResponse {
  return { details: undefined };
}

export const DeactivateUserGrantResponse = {
  encode(message: DeactivateUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateUserGrantResponse>): DeactivateUserGrantResponse {
    return DeactivateUserGrantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateUserGrantResponse>): DeactivateUserGrantResponse {
    const message = createBaseDeactivateUserGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateUserGrantRequest(): ReactivateUserGrantRequest {
  return { userId: "", grantId: "" };
}

export const ReactivateUserGrantRequest = {
  encode(message: ReactivateUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateUserGrantRequest>): ReactivateUserGrantRequest {
    return ReactivateUserGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateUserGrantRequest>): ReactivateUserGrantRequest {
    const message = createBaseReactivateUserGrantRequest();
    message.userId = object.userId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseReactivateUserGrantResponse(): ReactivateUserGrantResponse {
  return { details: undefined };
}

export const ReactivateUserGrantResponse = {
  encode(message: ReactivateUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateUserGrantResponse>): ReactivateUserGrantResponse {
    return ReactivateUserGrantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateUserGrantResponse>): ReactivateUserGrantResponse {
    const message = createBaseReactivateUserGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveUserGrantRequest(): RemoveUserGrantRequest {
  return { userId: "", grantId: "" };
}

export const RemoveUserGrantRequest = {
  encode(message: RemoveUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.grantId !== "") {
      writer.uint32(18).string(message.grantId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.grantId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveUserGrantRequest>): RemoveUserGrantRequest {
    return RemoveUserGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveUserGrantRequest>): RemoveUserGrantRequest {
    const message = createBaseRemoveUserGrantRequest();
    message.userId = object.userId ?? "";
    message.grantId = object.grantId ?? "";
    return message;
  },
};

function createBaseRemoveUserGrantResponse(): RemoveUserGrantResponse {
  return { details: undefined };
}

export const RemoveUserGrantResponse = {
  encode(message: RemoveUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveUserGrantResponse>): RemoveUserGrantResponse {
    return RemoveUserGrantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveUserGrantResponse>): RemoveUserGrantResponse {
    const message = createBaseRemoveUserGrantResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseBulkRemoveUserGrantRequest(): BulkRemoveUserGrantRequest {
  return { grantId: [] };
}

export const BulkRemoveUserGrantRequest = {
  encode(message: BulkRemoveUserGrantRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.grantId) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkRemoveUserGrantRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkRemoveUserGrantRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.grantId.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkRemoveUserGrantRequest>): BulkRemoveUserGrantRequest {
    return BulkRemoveUserGrantRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BulkRemoveUserGrantRequest>): BulkRemoveUserGrantRequest {
    const message = createBaseBulkRemoveUserGrantRequest();
    message.grantId = object.grantId?.map((e) => e) || [];
    return message;
  },
};

function createBaseBulkRemoveUserGrantResponse(): BulkRemoveUserGrantResponse {
  return {};
}

export const BulkRemoveUserGrantResponse = {
  encode(_: BulkRemoveUserGrantResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BulkRemoveUserGrantResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBulkRemoveUserGrantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BulkRemoveUserGrantResponse>): BulkRemoveUserGrantResponse {
    return BulkRemoveUserGrantResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<BulkRemoveUserGrantResponse>): BulkRemoveUserGrantResponse {
    const message = createBaseBulkRemoveUserGrantResponse();
    return message;
  },
};

function createBaseGetOrgIAMPolicyRequest(): GetOrgIAMPolicyRequest {
  return {};
}

export const GetOrgIAMPolicyRequest = {
  encode(_: GetOrgIAMPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgIAMPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgIAMPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetOrgIAMPolicyRequest>): GetOrgIAMPolicyRequest {
    return GetOrgIAMPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetOrgIAMPolicyRequest>): GetOrgIAMPolicyRequest {
    const message = createBaseGetOrgIAMPolicyRequest();
    return message;
  },
};

function createBaseGetOrgIAMPolicyResponse(): GetOrgIAMPolicyResponse {
  return { policy: undefined };
}

export const GetOrgIAMPolicyResponse = {
  encode(message: GetOrgIAMPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      OrgIAMPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgIAMPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgIAMPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = OrgIAMPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetOrgIAMPolicyResponse>): GetOrgIAMPolicyResponse {
    return GetOrgIAMPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOrgIAMPolicyResponse>): GetOrgIAMPolicyResponse {
    const message = createBaseGetOrgIAMPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? OrgIAMPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseGetDomainPolicyRequest(): GetDomainPolicyRequest {
  return {};
}

export const GetDomainPolicyRequest = {
  encode(_: GetDomainPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDomainPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDomainPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDomainPolicyRequest>): GetDomainPolicyRequest {
    return GetDomainPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetDomainPolicyRequest>): GetDomainPolicyRequest {
    const message = createBaseGetDomainPolicyRequest();
    return message;
  },
};

function createBaseGetDomainPolicyResponse(): GetDomainPolicyResponse {
  return { policy: undefined };
}

export const GetDomainPolicyResponse = {
  encode(message: GetDomainPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      DomainPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDomainPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDomainPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = DomainPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDomainPolicyResponse>): GetDomainPolicyResponse {
    return GetDomainPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDomainPolicyResponse>): GetDomainPolicyResponse {
    const message = createBaseGetDomainPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? DomainPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseGetLoginPolicyRequest(): GetLoginPolicyRequest {
  return {};
}

export const GetLoginPolicyRequest = {
  encode(_: GetLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetLoginPolicyRequest>): GetLoginPolicyRequest {
    return GetLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetLoginPolicyRequest>): GetLoginPolicyRequest {
    const message = createBaseGetLoginPolicyRequest();
    return message;
  },
};

function createBaseGetLoginPolicyResponse(): GetLoginPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetLoginPolicyResponse = {
  encode(message: GetLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LoginPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LoginPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetLoginPolicyResponse>): GetLoginPolicyResponse {
    return GetLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLoginPolicyResponse>): GetLoginPolicyResponse {
    const message = createBaseGetLoginPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LoginPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseGetDefaultLoginPolicyRequest(): GetDefaultLoginPolicyRequest {
  return {};
}

export const GetDefaultLoginPolicyRequest = {
  encode(_: GetDefaultLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultLoginPolicyRequest>): GetDefaultLoginPolicyRequest {
    return GetDefaultLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetDefaultLoginPolicyRequest>): GetDefaultLoginPolicyRequest {
    const message = createBaseGetDefaultLoginPolicyRequest();
    return message;
  },
};

function createBaseGetDefaultLoginPolicyResponse(): GetDefaultLoginPolicyResponse {
  return { policy: undefined };
}

export const GetDefaultLoginPolicyResponse = {
  encode(message: GetDefaultLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LoginPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LoginPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultLoginPolicyResponse>): GetDefaultLoginPolicyResponse {
    return GetDefaultLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultLoginPolicyResponse>): GetDefaultLoginPolicyResponse {
    const message = createBaseGetDefaultLoginPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LoginPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomLoginPolicyRequest(): AddCustomLoginPolicyRequest {
  return {
    allowUsernamePassword: false,
    allowRegister: false,
    allowExternalIdp: false,
    forceMfa: false,
    passwordlessType: 0,
    hidePasswordReset: false,
    ignoreUnknownUsernames: false,
    defaultRedirectUri: "",
    passwordCheckLifetime: undefined,
    externalLoginCheckLifetime: undefined,
    mfaInitSkipLifetime: undefined,
    secondFactorCheckLifetime: undefined,
    multiFactorCheckLifetime: undefined,
    secondFactors: [],
    multiFactors: [],
    idps: [],
    allowDomainDiscovery: false,
    disableLoginWithEmail: false,
    disableLoginWithPhone: false,
    forceMfaLocalOnly: false,
  };
}

export const AddCustomLoginPolicyRequest = {
  encode(message: AddCustomLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.allowUsernamePassword === true) {
      writer.uint32(8).bool(message.allowUsernamePassword);
    }
    if (message.allowRegister === true) {
      writer.uint32(16).bool(message.allowRegister);
    }
    if (message.allowExternalIdp === true) {
      writer.uint32(24).bool(message.allowExternalIdp);
    }
    if (message.forceMfa === true) {
      writer.uint32(32).bool(message.forceMfa);
    }
    if (message.passwordlessType !== 0) {
      writer.uint32(40).int32(message.passwordlessType);
    }
    if (message.hidePasswordReset === true) {
      writer.uint32(48).bool(message.hidePasswordReset);
    }
    if (message.ignoreUnknownUsernames === true) {
      writer.uint32(56).bool(message.ignoreUnknownUsernames);
    }
    if (message.defaultRedirectUri !== "") {
      writer.uint32(66).string(message.defaultRedirectUri);
    }
    if (message.passwordCheckLifetime !== undefined) {
      Duration.encode(message.passwordCheckLifetime, writer.uint32(74).fork()).ldelim();
    }
    if (message.externalLoginCheckLifetime !== undefined) {
      Duration.encode(message.externalLoginCheckLifetime, writer.uint32(82).fork()).ldelim();
    }
    if (message.mfaInitSkipLifetime !== undefined) {
      Duration.encode(message.mfaInitSkipLifetime, writer.uint32(90).fork()).ldelim();
    }
    if (message.secondFactorCheckLifetime !== undefined) {
      Duration.encode(message.secondFactorCheckLifetime, writer.uint32(98).fork()).ldelim();
    }
    if (message.multiFactorCheckLifetime !== undefined) {
      Duration.encode(message.multiFactorCheckLifetime, writer.uint32(106).fork()).ldelim();
    }
    writer.uint32(114).fork();
    for (const v of message.secondFactors) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(122).fork();
    for (const v of message.multiFactors) {
      writer.int32(v);
    }
    writer.ldelim();
    for (const v of message.idps) {
      AddCustomLoginPolicyRequest_IDP.encode(v!, writer.uint32(130).fork()).ldelim();
    }
    if (message.allowDomainDiscovery === true) {
      writer.uint32(136).bool(message.allowDomainDiscovery);
    }
    if (message.disableLoginWithEmail === true) {
      writer.uint32(144).bool(message.disableLoginWithEmail);
    }
    if (message.disableLoginWithPhone === true) {
      writer.uint32(152).bool(message.disableLoginWithPhone);
    }
    if (message.forceMfaLocalOnly === true) {
      writer.uint32(160).bool(message.forceMfaLocalOnly);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.allowUsernamePassword = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowRegister = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowExternalIdp = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.forceMfa = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.passwordlessType = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.hidePasswordReset = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.ignoreUnknownUsernames = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.defaultRedirectUri = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.passwordCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.externalLoginCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.mfaInitSkipLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.secondFactorCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.multiFactorCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag === 112) {
            message.secondFactors.push(reader.int32() as any);

            continue;
          }

          if (tag === 114) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.secondFactors.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 15:
          if (tag === 120) {
            message.multiFactors.push(reader.int32() as any);

            continue;
          }

          if (tag === 122) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.multiFactors.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.idps.push(AddCustomLoginPolicyRequest_IDP.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.allowDomainDiscovery = reader.bool();
          continue;
        case 18:
          if (tag !== 144) {
            break;
          }

          message.disableLoginWithEmail = reader.bool();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.disableLoginWithPhone = reader.bool();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.forceMfaLocalOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomLoginPolicyRequest>): AddCustomLoginPolicyRequest {
    return AddCustomLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomLoginPolicyRequest>): AddCustomLoginPolicyRequest {
    const message = createBaseAddCustomLoginPolicyRequest();
    message.allowUsernamePassword = object.allowUsernamePassword ?? false;
    message.allowRegister = object.allowRegister ?? false;
    message.allowExternalIdp = object.allowExternalIdp ?? false;
    message.forceMfa = object.forceMfa ?? false;
    message.passwordlessType = object.passwordlessType ?? 0;
    message.hidePasswordReset = object.hidePasswordReset ?? false;
    message.ignoreUnknownUsernames = object.ignoreUnknownUsernames ?? false;
    message.defaultRedirectUri = object.defaultRedirectUri ?? "";
    message.passwordCheckLifetime =
      (object.passwordCheckLifetime !== undefined && object.passwordCheckLifetime !== null)
        ? Duration.fromPartial(object.passwordCheckLifetime)
        : undefined;
    message.externalLoginCheckLifetime =
      (object.externalLoginCheckLifetime !== undefined && object.externalLoginCheckLifetime !== null)
        ? Duration.fromPartial(object.externalLoginCheckLifetime)
        : undefined;
    message.mfaInitSkipLifetime = (object.mfaInitSkipLifetime !== undefined && object.mfaInitSkipLifetime !== null)
      ? Duration.fromPartial(object.mfaInitSkipLifetime)
      : undefined;
    message.secondFactorCheckLifetime =
      (object.secondFactorCheckLifetime !== undefined && object.secondFactorCheckLifetime !== null)
        ? Duration.fromPartial(object.secondFactorCheckLifetime)
        : undefined;
    message.multiFactorCheckLifetime =
      (object.multiFactorCheckLifetime !== undefined && object.multiFactorCheckLifetime !== null)
        ? Duration.fromPartial(object.multiFactorCheckLifetime)
        : undefined;
    message.secondFactors = object.secondFactors?.map((e) => e) || [];
    message.multiFactors = object.multiFactors?.map((e) => e) || [];
    message.idps = object.idps?.map((e) => AddCustomLoginPolicyRequest_IDP.fromPartial(e)) || [];
    message.allowDomainDiscovery = object.allowDomainDiscovery ?? false;
    message.disableLoginWithEmail = object.disableLoginWithEmail ?? false;
    message.disableLoginWithPhone = object.disableLoginWithPhone ?? false;
    message.forceMfaLocalOnly = object.forceMfaLocalOnly ?? false;
    return message;
  },
};

function createBaseAddCustomLoginPolicyRequest_IDP(): AddCustomLoginPolicyRequest_IDP {
  return { idpId: "", ownerType: 0 };
}

export const AddCustomLoginPolicyRequest_IDP = {
  encode(message: AddCustomLoginPolicyRequest_IDP, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.ownerType !== 0) {
      writer.uint32(16).int32(message.ownerType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLoginPolicyRequest_IDP {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLoginPolicyRequest_IDP();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.ownerType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomLoginPolicyRequest_IDP>): AddCustomLoginPolicyRequest_IDP {
    return AddCustomLoginPolicyRequest_IDP.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomLoginPolicyRequest_IDP>): AddCustomLoginPolicyRequest_IDP {
    const message = createBaseAddCustomLoginPolicyRequest_IDP();
    message.idpId = object.idpId ?? "";
    message.ownerType = object.ownerType ?? 0;
    return message;
  },
};

function createBaseAddCustomLoginPolicyResponse(): AddCustomLoginPolicyResponse {
  return { details: undefined };
}

export const AddCustomLoginPolicyResponse = {
  encode(message: AddCustomLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomLoginPolicyResponse>): AddCustomLoginPolicyResponse {
    return AddCustomLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomLoginPolicyResponse>): AddCustomLoginPolicyResponse {
    const message = createBaseAddCustomLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomLoginPolicyRequest(): UpdateCustomLoginPolicyRequest {
  return {
    allowUsernamePassword: false,
    allowRegister: false,
    allowExternalIdp: false,
    forceMfa: false,
    passwordlessType: 0,
    hidePasswordReset: false,
    ignoreUnknownUsernames: false,
    defaultRedirectUri: "",
    passwordCheckLifetime: undefined,
    externalLoginCheckLifetime: undefined,
    mfaInitSkipLifetime: undefined,
    secondFactorCheckLifetime: undefined,
    multiFactorCheckLifetime: undefined,
    allowDomainDiscovery: false,
    disableLoginWithEmail: false,
    disableLoginWithPhone: false,
    forceMfaLocalOnly: false,
  };
}

export const UpdateCustomLoginPolicyRequest = {
  encode(message: UpdateCustomLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.allowUsernamePassword === true) {
      writer.uint32(8).bool(message.allowUsernamePassword);
    }
    if (message.allowRegister === true) {
      writer.uint32(16).bool(message.allowRegister);
    }
    if (message.allowExternalIdp === true) {
      writer.uint32(24).bool(message.allowExternalIdp);
    }
    if (message.forceMfa === true) {
      writer.uint32(32).bool(message.forceMfa);
    }
    if (message.passwordlessType !== 0) {
      writer.uint32(40).int32(message.passwordlessType);
    }
    if (message.hidePasswordReset === true) {
      writer.uint32(48).bool(message.hidePasswordReset);
    }
    if (message.ignoreUnknownUsernames === true) {
      writer.uint32(56).bool(message.ignoreUnknownUsernames);
    }
    if (message.defaultRedirectUri !== "") {
      writer.uint32(66).string(message.defaultRedirectUri);
    }
    if (message.passwordCheckLifetime !== undefined) {
      Duration.encode(message.passwordCheckLifetime, writer.uint32(74).fork()).ldelim();
    }
    if (message.externalLoginCheckLifetime !== undefined) {
      Duration.encode(message.externalLoginCheckLifetime, writer.uint32(82).fork()).ldelim();
    }
    if (message.mfaInitSkipLifetime !== undefined) {
      Duration.encode(message.mfaInitSkipLifetime, writer.uint32(90).fork()).ldelim();
    }
    if (message.secondFactorCheckLifetime !== undefined) {
      Duration.encode(message.secondFactorCheckLifetime, writer.uint32(98).fork()).ldelim();
    }
    if (message.multiFactorCheckLifetime !== undefined) {
      Duration.encode(message.multiFactorCheckLifetime, writer.uint32(106).fork()).ldelim();
    }
    if (message.allowDomainDiscovery === true) {
      writer.uint32(112).bool(message.allowDomainDiscovery);
    }
    if (message.disableLoginWithEmail === true) {
      writer.uint32(120).bool(message.disableLoginWithEmail);
    }
    if (message.disableLoginWithPhone === true) {
      writer.uint32(128).bool(message.disableLoginWithPhone);
    }
    if (message.forceMfaLocalOnly === true) {
      writer.uint32(136).bool(message.forceMfaLocalOnly);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.allowUsernamePassword = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.allowRegister = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.allowExternalIdp = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.forceMfa = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.passwordlessType = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.hidePasswordReset = reader.bool();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.ignoreUnknownUsernames = reader.bool();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.defaultRedirectUri = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.passwordCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.externalLoginCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.mfaInitSkipLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.secondFactorCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.multiFactorCheckLifetime = Duration.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.allowDomainDiscovery = reader.bool();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.disableLoginWithEmail = reader.bool();
          continue;
        case 16:
          if (tag !== 128) {
            break;
          }

          message.disableLoginWithPhone = reader.bool();
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.forceMfaLocalOnly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCustomLoginPolicyRequest>): UpdateCustomLoginPolicyRequest {
    return UpdateCustomLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomLoginPolicyRequest>): UpdateCustomLoginPolicyRequest {
    const message = createBaseUpdateCustomLoginPolicyRequest();
    message.allowUsernamePassword = object.allowUsernamePassword ?? false;
    message.allowRegister = object.allowRegister ?? false;
    message.allowExternalIdp = object.allowExternalIdp ?? false;
    message.forceMfa = object.forceMfa ?? false;
    message.passwordlessType = object.passwordlessType ?? 0;
    message.hidePasswordReset = object.hidePasswordReset ?? false;
    message.ignoreUnknownUsernames = object.ignoreUnknownUsernames ?? false;
    message.defaultRedirectUri = object.defaultRedirectUri ?? "";
    message.passwordCheckLifetime =
      (object.passwordCheckLifetime !== undefined && object.passwordCheckLifetime !== null)
        ? Duration.fromPartial(object.passwordCheckLifetime)
        : undefined;
    message.externalLoginCheckLifetime =
      (object.externalLoginCheckLifetime !== undefined && object.externalLoginCheckLifetime !== null)
        ? Duration.fromPartial(object.externalLoginCheckLifetime)
        : undefined;
    message.mfaInitSkipLifetime = (object.mfaInitSkipLifetime !== undefined && object.mfaInitSkipLifetime !== null)
      ? Duration.fromPartial(object.mfaInitSkipLifetime)
      : undefined;
    message.secondFactorCheckLifetime =
      (object.secondFactorCheckLifetime !== undefined && object.secondFactorCheckLifetime !== null)
        ? Duration.fromPartial(object.secondFactorCheckLifetime)
        : undefined;
    message.multiFactorCheckLifetime =
      (object.multiFactorCheckLifetime !== undefined && object.multiFactorCheckLifetime !== null)
        ? Duration.fromPartial(object.multiFactorCheckLifetime)
        : undefined;
    message.allowDomainDiscovery = object.allowDomainDiscovery ?? false;
    message.disableLoginWithEmail = object.disableLoginWithEmail ?? false;
    message.disableLoginWithPhone = object.disableLoginWithPhone ?? false;
    message.forceMfaLocalOnly = object.forceMfaLocalOnly ?? false;
    return message;
  },
};

function createBaseUpdateCustomLoginPolicyResponse(): UpdateCustomLoginPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomLoginPolicyResponse = {
  encode(message: UpdateCustomLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCustomLoginPolicyResponse>): UpdateCustomLoginPolicyResponse {
    return UpdateCustomLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomLoginPolicyResponse>): UpdateCustomLoginPolicyResponse {
    const message = createBaseUpdateCustomLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetLoginPolicyToDefaultRequest(): ResetLoginPolicyToDefaultRequest {
  return {};
}

export const ResetLoginPolicyToDefaultRequest = {
  encode(_: ResetLoginPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetLoginPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetLoginPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetLoginPolicyToDefaultRequest>): ResetLoginPolicyToDefaultRequest {
    return ResetLoginPolicyToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ResetLoginPolicyToDefaultRequest>): ResetLoginPolicyToDefaultRequest {
    const message = createBaseResetLoginPolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetLoginPolicyToDefaultResponse(): ResetLoginPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetLoginPolicyToDefaultResponse = {
  encode(message: ResetLoginPolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetLoginPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetLoginPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetLoginPolicyToDefaultResponse>): ResetLoginPolicyToDefaultResponse {
    return ResetLoginPolicyToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetLoginPolicyToDefaultResponse>): ResetLoginPolicyToDefaultResponse {
    const message = createBaseResetLoginPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicyIDPsRequest(): ListLoginPolicyIDPsRequest {
  return { query: undefined };
}

export const ListLoginPolicyIDPsRequest = {
  encode(message: ListLoginPolicyIDPsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicyIDPsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyIDPsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListLoginPolicyIDPsRequest>): ListLoginPolicyIDPsRequest {
    return ListLoginPolicyIDPsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLoginPolicyIDPsRequest>): ListLoginPolicyIDPsRequest {
    const message = createBaseListLoginPolicyIDPsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicyIDPsResponse(): ListLoginPolicyIDPsResponse {
  return { details: undefined, result: [] };
}

export const ListLoginPolicyIDPsResponse = {
  encode(message: ListLoginPolicyIDPsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      IDPLoginPolicyLink.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicyIDPsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyIDPsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(IDPLoginPolicyLink.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListLoginPolicyIDPsResponse>): ListLoginPolicyIDPsResponse {
    return ListLoginPolicyIDPsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLoginPolicyIDPsResponse>): ListLoginPolicyIDPsResponse {
    const message = createBaseListLoginPolicyIDPsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => IDPLoginPolicyLink.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddIDPToLoginPolicyRequest(): AddIDPToLoginPolicyRequest {
  return { idpId: "", ownerType: 0 };
}

export const AddIDPToLoginPolicyRequest = {
  encode(message: AddIDPToLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.ownerType !== 0) {
      writer.uint32(16).int32(message.ownerType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddIDPToLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIDPToLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.ownerType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddIDPToLoginPolicyRequest>): AddIDPToLoginPolicyRequest {
    return AddIDPToLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddIDPToLoginPolicyRequest>): AddIDPToLoginPolicyRequest {
    const message = createBaseAddIDPToLoginPolicyRequest();
    message.idpId = object.idpId ?? "";
    message.ownerType = object.ownerType ?? 0;
    return message;
  },
};

function createBaseAddIDPToLoginPolicyResponse(): AddIDPToLoginPolicyResponse {
  return { details: undefined };
}

export const AddIDPToLoginPolicyResponse = {
  encode(message: AddIDPToLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddIDPToLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddIDPToLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddIDPToLoginPolicyResponse>): AddIDPToLoginPolicyResponse {
    return AddIDPToLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddIDPToLoginPolicyResponse>): AddIDPToLoginPolicyResponse {
    const message = createBaseAddIDPToLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveIDPFromLoginPolicyRequest(): RemoveIDPFromLoginPolicyRequest {
  return { idpId: "" };
}

export const RemoveIDPFromLoginPolicyRequest = {
  encode(message: RemoveIDPFromLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveIDPFromLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIDPFromLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveIDPFromLoginPolicyRequest>): RemoveIDPFromLoginPolicyRequest {
    return RemoveIDPFromLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveIDPFromLoginPolicyRequest>): RemoveIDPFromLoginPolicyRequest {
    const message = createBaseRemoveIDPFromLoginPolicyRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseRemoveIDPFromLoginPolicyResponse(): RemoveIDPFromLoginPolicyResponse {
  return { details: undefined };
}

export const RemoveIDPFromLoginPolicyResponse = {
  encode(message: RemoveIDPFromLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveIDPFromLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveIDPFromLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveIDPFromLoginPolicyResponse>): RemoveIDPFromLoginPolicyResponse {
    return RemoveIDPFromLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveIDPFromLoginPolicyResponse>): RemoveIDPFromLoginPolicyResponse {
    const message = createBaseRemoveIDPFromLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicySecondFactorsRequest(): ListLoginPolicySecondFactorsRequest {
  return {};
}

export const ListLoginPolicySecondFactorsRequest = {
  encode(_: ListLoginPolicySecondFactorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicySecondFactorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicySecondFactorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListLoginPolicySecondFactorsRequest>): ListLoginPolicySecondFactorsRequest {
    return ListLoginPolicySecondFactorsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListLoginPolicySecondFactorsRequest>): ListLoginPolicySecondFactorsRequest {
    const message = createBaseListLoginPolicySecondFactorsRequest();
    return message;
  },
};

function createBaseListLoginPolicySecondFactorsResponse(): ListLoginPolicySecondFactorsResponse {
  return { details: undefined, result: [] };
}

export const ListLoginPolicySecondFactorsResponse = {
  encode(message: ListLoginPolicySecondFactorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    writer.uint32(18).fork();
    for (const v of message.result) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicySecondFactorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicySecondFactorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag === 16) {
            message.result.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.result.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListLoginPolicySecondFactorsResponse>): ListLoginPolicySecondFactorsResponse {
    return ListLoginPolicySecondFactorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLoginPolicySecondFactorsResponse>): ListLoginPolicySecondFactorsResponse {
    const message = createBaseListLoginPolicySecondFactorsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddSecondFactorToLoginPolicyRequest(): AddSecondFactorToLoginPolicyRequest {
  return { type: 0 };
}

export const AddSecondFactorToLoginPolicyRequest = {
  encode(message: AddSecondFactorToLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSecondFactorToLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSecondFactorToLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddSecondFactorToLoginPolicyRequest>): AddSecondFactorToLoginPolicyRequest {
    return AddSecondFactorToLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSecondFactorToLoginPolicyRequest>): AddSecondFactorToLoginPolicyRequest {
    const message = createBaseAddSecondFactorToLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseAddSecondFactorToLoginPolicyResponse(): AddSecondFactorToLoginPolicyResponse {
  return { details: undefined };
}

export const AddSecondFactorToLoginPolicyResponse = {
  encode(message: AddSecondFactorToLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSecondFactorToLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSecondFactorToLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddSecondFactorToLoginPolicyResponse>): AddSecondFactorToLoginPolicyResponse {
    return AddSecondFactorToLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSecondFactorToLoginPolicyResponse>): AddSecondFactorToLoginPolicyResponse {
    const message = createBaseAddSecondFactorToLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveSecondFactorFromLoginPolicyRequest(): RemoveSecondFactorFromLoginPolicyRequest {
  return { type: 0 };
}

export const RemoveSecondFactorFromLoginPolicyRequest = {
  encode(message: RemoveSecondFactorFromLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveSecondFactorFromLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSecondFactorFromLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>): RemoveSecondFactorFromLoginPolicyRequest {
    return RemoveSecondFactorFromLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>): RemoveSecondFactorFromLoginPolicyRequest {
    const message = createBaseRemoveSecondFactorFromLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseRemoveSecondFactorFromLoginPolicyResponse(): RemoveSecondFactorFromLoginPolicyResponse {
  return { details: undefined };
}

export const RemoveSecondFactorFromLoginPolicyResponse = {
  encode(message: RemoveSecondFactorFromLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveSecondFactorFromLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveSecondFactorFromLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveSecondFactorFromLoginPolicyResponse>): RemoveSecondFactorFromLoginPolicyResponse {
    return RemoveSecondFactorFromLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RemoveSecondFactorFromLoginPolicyResponse>,
  ): RemoveSecondFactorFromLoginPolicyResponse {
    const message = createBaseRemoveSecondFactorFromLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListLoginPolicyMultiFactorsRequest(): ListLoginPolicyMultiFactorsRequest {
  return {};
}

export const ListLoginPolicyMultiFactorsRequest = {
  encode(_: ListLoginPolicyMultiFactorsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicyMultiFactorsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyMultiFactorsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListLoginPolicyMultiFactorsRequest>): ListLoginPolicyMultiFactorsRequest {
    return ListLoginPolicyMultiFactorsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListLoginPolicyMultiFactorsRequest>): ListLoginPolicyMultiFactorsRequest {
    const message = createBaseListLoginPolicyMultiFactorsRequest();
    return message;
  },
};

function createBaseListLoginPolicyMultiFactorsResponse(): ListLoginPolicyMultiFactorsResponse {
  return { details: undefined, result: [] };
}

export const ListLoginPolicyMultiFactorsResponse = {
  encode(message: ListLoginPolicyMultiFactorsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    writer.uint32(18).fork();
    for (const v of message.result) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListLoginPolicyMultiFactorsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLoginPolicyMultiFactorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag === 16) {
            message.result.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.result.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListLoginPolicyMultiFactorsResponse>): ListLoginPolicyMultiFactorsResponse {
    return ListLoginPolicyMultiFactorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListLoginPolicyMultiFactorsResponse>): ListLoginPolicyMultiFactorsResponse {
    const message = createBaseListLoginPolicyMultiFactorsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddMultiFactorToLoginPolicyRequest(): AddMultiFactorToLoginPolicyRequest {
  return { type: 0 };
}

export const AddMultiFactorToLoginPolicyRequest = {
  encode(message: AddMultiFactorToLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMultiFactorToLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMultiFactorToLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddMultiFactorToLoginPolicyRequest>): AddMultiFactorToLoginPolicyRequest {
    return AddMultiFactorToLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddMultiFactorToLoginPolicyRequest>): AddMultiFactorToLoginPolicyRequest {
    const message = createBaseAddMultiFactorToLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseAddMultiFactorToLoginPolicyResponse(): AddMultiFactorToLoginPolicyResponse {
  return { details: undefined };
}

export const AddMultiFactorToLoginPolicyResponse = {
  encode(message: AddMultiFactorToLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddMultiFactorToLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMultiFactorToLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddMultiFactorToLoginPolicyResponse>): AddMultiFactorToLoginPolicyResponse {
    return AddMultiFactorToLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddMultiFactorToLoginPolicyResponse>): AddMultiFactorToLoginPolicyResponse {
    const message = createBaseAddMultiFactorToLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveMultiFactorFromLoginPolicyRequest(): RemoveMultiFactorFromLoginPolicyRequest {
  return { type: 0 };
}

export const RemoveMultiFactorFromLoginPolicyRequest = {
  encode(message: RemoveMultiFactorFromLoginPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMultiFactorFromLoginPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMultiFactorFromLoginPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>): RemoveMultiFactorFromLoginPolicyRequest {
    return RemoveMultiFactorFromLoginPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>): RemoveMultiFactorFromLoginPolicyRequest {
    const message = createBaseRemoveMultiFactorFromLoginPolicyRequest();
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseRemoveMultiFactorFromLoginPolicyResponse(): RemoveMultiFactorFromLoginPolicyResponse {
  return { details: undefined };
}

export const RemoveMultiFactorFromLoginPolicyResponse = {
  encode(message: RemoveMultiFactorFromLoginPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveMultiFactorFromLoginPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveMultiFactorFromLoginPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveMultiFactorFromLoginPolicyResponse>): RemoveMultiFactorFromLoginPolicyResponse {
    return RemoveMultiFactorFromLoginPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveMultiFactorFromLoginPolicyResponse>): RemoveMultiFactorFromLoginPolicyResponse {
    const message = createBaseRemoveMultiFactorFromLoginPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPasswordComplexityPolicyRequest(): GetPasswordComplexityPolicyRequest {
  return {};
}

export const GetPasswordComplexityPolicyRequest = {
  encode(_: GetPasswordComplexityPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPasswordComplexityPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordComplexityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPasswordComplexityPolicyRequest>): GetPasswordComplexityPolicyRequest {
    return GetPasswordComplexityPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetPasswordComplexityPolicyRequest>): GetPasswordComplexityPolicyRequest {
    const message = createBaseGetPasswordComplexityPolicyRequest();
    return message;
  },
};

function createBaseGetPasswordComplexityPolicyResponse(): GetPasswordComplexityPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetPasswordComplexityPolicyResponse = {
  encode(message: GetPasswordComplexityPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PasswordComplexityPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPasswordComplexityPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordComplexityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PasswordComplexityPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPasswordComplexityPolicyResponse>): GetPasswordComplexityPolicyResponse {
    return GetPasswordComplexityPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPasswordComplexityPolicyResponse>): GetPasswordComplexityPolicyResponse {
    const message = createBaseGetPasswordComplexityPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PasswordComplexityPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseGetDefaultPasswordComplexityPolicyRequest(): GetDefaultPasswordComplexityPolicyRequest {
  return {};
}

export const GetDefaultPasswordComplexityPolicyRequest = {
  encode(_: GetDefaultPasswordComplexityPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordComplexityPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordComplexityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultPasswordComplexityPolicyRequest>): GetDefaultPasswordComplexityPolicyRequest {
    return GetDefaultPasswordComplexityPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetDefaultPasswordComplexityPolicyRequest>): GetDefaultPasswordComplexityPolicyRequest {
    const message = createBaseGetDefaultPasswordComplexityPolicyRequest();
    return message;
  },
};

function createBaseGetDefaultPasswordComplexityPolicyResponse(): GetDefaultPasswordComplexityPolicyResponse {
  return { policy: undefined };
}

export const GetDefaultPasswordComplexityPolicyResponse = {
  encode(message: GetDefaultPasswordComplexityPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PasswordComplexityPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordComplexityPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordComplexityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PasswordComplexityPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultPasswordComplexityPolicyResponse>): GetDefaultPasswordComplexityPolicyResponse {
    return GetDefaultPasswordComplexityPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultPasswordComplexityPolicyResponse>,
  ): GetDefaultPasswordComplexityPolicyResponse {
    const message = createBaseGetDefaultPasswordComplexityPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PasswordComplexityPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomPasswordComplexityPolicyRequest(): AddCustomPasswordComplexityPolicyRequest {
  return { minLength: 0, hasUppercase: false, hasLowercase: false, hasNumber: false, hasSymbol: false };
}

export const AddCustomPasswordComplexityPolicyRequest = {
  encode(message: AddCustomPasswordComplexityPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.minLength !== 0) {
      writer.uint32(8).uint64(message.minLength);
    }
    if (message.hasUppercase === true) {
      writer.uint32(16).bool(message.hasUppercase);
    }
    if (message.hasLowercase === true) {
      writer.uint32(24).bool(message.hasLowercase);
    }
    if (message.hasNumber === true) {
      writer.uint32(32).bool(message.hasNumber);
    }
    if (message.hasSymbol === true) {
      writer.uint32(40).bool(message.hasSymbol);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomPasswordComplexityPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomPasswordComplexityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minLength = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.hasUppercase = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hasLowercase = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.hasNumber = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.hasSymbol = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomPasswordComplexityPolicyRequest>): AddCustomPasswordComplexityPolicyRequest {
    return AddCustomPasswordComplexityPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomPasswordComplexityPolicyRequest>): AddCustomPasswordComplexityPolicyRequest {
    const message = createBaseAddCustomPasswordComplexityPolicyRequest();
    message.minLength = object.minLength ?? 0;
    message.hasUppercase = object.hasUppercase ?? false;
    message.hasLowercase = object.hasLowercase ?? false;
    message.hasNumber = object.hasNumber ?? false;
    message.hasSymbol = object.hasSymbol ?? false;
    return message;
  },
};

function createBaseAddCustomPasswordComplexityPolicyResponse(): AddCustomPasswordComplexityPolicyResponse {
  return { details: undefined };
}

export const AddCustomPasswordComplexityPolicyResponse = {
  encode(message: AddCustomPasswordComplexityPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomPasswordComplexityPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomPasswordComplexityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomPasswordComplexityPolicyResponse>): AddCustomPasswordComplexityPolicyResponse {
    return AddCustomPasswordComplexityPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AddCustomPasswordComplexityPolicyResponse>,
  ): AddCustomPasswordComplexityPolicyResponse {
    const message = createBaseAddCustomPasswordComplexityPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomPasswordComplexityPolicyRequest(): UpdateCustomPasswordComplexityPolicyRequest {
  return { minLength: 0, hasUppercase: false, hasLowercase: false, hasNumber: false, hasSymbol: false };
}

export const UpdateCustomPasswordComplexityPolicyRequest = {
  encode(message: UpdateCustomPasswordComplexityPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.minLength !== 0) {
      writer.uint32(8).uint64(message.minLength);
    }
    if (message.hasUppercase === true) {
      writer.uint32(16).bool(message.hasUppercase);
    }
    if (message.hasLowercase === true) {
      writer.uint32(24).bool(message.hasLowercase);
    }
    if (message.hasNumber === true) {
      writer.uint32(32).bool(message.hasNumber);
    }
    if (message.hasSymbol === true) {
      writer.uint32(40).bool(message.hasSymbol);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomPasswordComplexityPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomPasswordComplexityPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.minLength = longToNumber(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.hasUppercase = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hasLowercase = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.hasNumber = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.hasSymbol = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCustomPasswordComplexityPolicyRequest>): UpdateCustomPasswordComplexityPolicyRequest {
    return UpdateCustomPasswordComplexityPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateCustomPasswordComplexityPolicyRequest>,
  ): UpdateCustomPasswordComplexityPolicyRequest {
    const message = createBaseUpdateCustomPasswordComplexityPolicyRequest();
    message.minLength = object.minLength ?? 0;
    message.hasUppercase = object.hasUppercase ?? false;
    message.hasLowercase = object.hasLowercase ?? false;
    message.hasNumber = object.hasNumber ?? false;
    message.hasSymbol = object.hasSymbol ?? false;
    return message;
  },
};

function createBaseUpdateCustomPasswordComplexityPolicyResponse(): UpdateCustomPasswordComplexityPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomPasswordComplexityPolicyResponse = {
  encode(message: UpdateCustomPasswordComplexityPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomPasswordComplexityPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomPasswordComplexityPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<UpdateCustomPasswordComplexityPolicyResponse>,
  ): UpdateCustomPasswordComplexityPolicyResponse {
    return UpdateCustomPasswordComplexityPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateCustomPasswordComplexityPolicyResponse>,
  ): UpdateCustomPasswordComplexityPolicyResponse {
    const message = createBaseUpdateCustomPasswordComplexityPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetPasswordComplexityPolicyToDefaultRequest(): ResetPasswordComplexityPolicyToDefaultRequest {
  return {};
}

export const ResetPasswordComplexityPolicyToDefaultRequest = {
  encode(_: ResetPasswordComplexityPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetPasswordComplexityPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordComplexityPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetPasswordComplexityPolicyToDefaultRequest>,
  ): ResetPasswordComplexityPolicyToDefaultRequest {
    return ResetPasswordComplexityPolicyToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<ResetPasswordComplexityPolicyToDefaultRequest>,
  ): ResetPasswordComplexityPolicyToDefaultRequest {
    const message = createBaseResetPasswordComplexityPolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetPasswordComplexityPolicyToDefaultResponse(): ResetPasswordComplexityPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetPasswordComplexityPolicyToDefaultResponse = {
  encode(
    message: ResetPasswordComplexityPolicyToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetPasswordComplexityPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordComplexityPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetPasswordComplexityPolicyToDefaultResponse>,
  ): ResetPasswordComplexityPolicyToDefaultResponse {
    return ResetPasswordComplexityPolicyToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetPasswordComplexityPolicyToDefaultResponse>,
  ): ResetPasswordComplexityPolicyToDefaultResponse {
    const message = createBaseResetPasswordComplexityPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPasswordAgePolicyRequest(): GetPasswordAgePolicyRequest {
  return {};
}

export const GetPasswordAgePolicyRequest = {
  encode(_: GetPasswordAgePolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPasswordAgePolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordAgePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPasswordAgePolicyRequest>): GetPasswordAgePolicyRequest {
    return GetPasswordAgePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetPasswordAgePolicyRequest>): GetPasswordAgePolicyRequest {
    const message = createBaseGetPasswordAgePolicyRequest();
    return message;
  },
};

function createBaseGetPasswordAgePolicyResponse(): GetPasswordAgePolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetPasswordAgePolicyResponse = {
  encode(message: GetPasswordAgePolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PasswordAgePolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPasswordAgePolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPasswordAgePolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PasswordAgePolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPasswordAgePolicyResponse>): GetPasswordAgePolicyResponse {
    return GetPasswordAgePolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPasswordAgePolicyResponse>): GetPasswordAgePolicyResponse {
    const message = createBaseGetPasswordAgePolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PasswordAgePolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseGetDefaultPasswordAgePolicyRequest(): GetDefaultPasswordAgePolicyRequest {
  return {};
}

export const GetDefaultPasswordAgePolicyRequest = {
  encode(_: GetDefaultPasswordAgePolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordAgePolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordAgePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultPasswordAgePolicyRequest>): GetDefaultPasswordAgePolicyRequest {
    return GetDefaultPasswordAgePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetDefaultPasswordAgePolicyRequest>): GetDefaultPasswordAgePolicyRequest {
    const message = createBaseGetDefaultPasswordAgePolicyRequest();
    return message;
  },
};

function createBaseGetDefaultPasswordAgePolicyResponse(): GetDefaultPasswordAgePolicyResponse {
  return { policy: undefined };
}

export const GetDefaultPasswordAgePolicyResponse = {
  encode(message: GetDefaultPasswordAgePolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PasswordAgePolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordAgePolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordAgePolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PasswordAgePolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultPasswordAgePolicyResponse>): GetDefaultPasswordAgePolicyResponse {
    return GetDefaultPasswordAgePolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultPasswordAgePolicyResponse>): GetDefaultPasswordAgePolicyResponse {
    const message = createBaseGetDefaultPasswordAgePolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PasswordAgePolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomPasswordAgePolicyRequest(): AddCustomPasswordAgePolicyRequest {
  return { maxAgeDays: 0, expireWarnDays: 0 };
}

export const AddCustomPasswordAgePolicyRequest = {
  encode(message: AddCustomPasswordAgePolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.maxAgeDays !== 0) {
      writer.uint32(8).uint32(message.maxAgeDays);
    }
    if (message.expireWarnDays !== 0) {
      writer.uint32(16).uint32(message.expireWarnDays);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomPasswordAgePolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomPasswordAgePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxAgeDays = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.expireWarnDays = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomPasswordAgePolicyRequest>): AddCustomPasswordAgePolicyRequest {
    return AddCustomPasswordAgePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomPasswordAgePolicyRequest>): AddCustomPasswordAgePolicyRequest {
    const message = createBaseAddCustomPasswordAgePolicyRequest();
    message.maxAgeDays = object.maxAgeDays ?? 0;
    message.expireWarnDays = object.expireWarnDays ?? 0;
    return message;
  },
};

function createBaseAddCustomPasswordAgePolicyResponse(): AddCustomPasswordAgePolicyResponse {
  return { details: undefined };
}

export const AddCustomPasswordAgePolicyResponse = {
  encode(message: AddCustomPasswordAgePolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomPasswordAgePolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomPasswordAgePolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomPasswordAgePolicyResponse>): AddCustomPasswordAgePolicyResponse {
    return AddCustomPasswordAgePolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomPasswordAgePolicyResponse>): AddCustomPasswordAgePolicyResponse {
    const message = createBaseAddCustomPasswordAgePolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomPasswordAgePolicyRequest(): UpdateCustomPasswordAgePolicyRequest {
  return { maxAgeDays: 0, expireWarnDays: 0 };
}

export const UpdateCustomPasswordAgePolicyRequest = {
  encode(message: UpdateCustomPasswordAgePolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.maxAgeDays !== 0) {
      writer.uint32(8).uint32(message.maxAgeDays);
    }
    if (message.expireWarnDays !== 0) {
      writer.uint32(16).uint32(message.expireWarnDays);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomPasswordAgePolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomPasswordAgePolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxAgeDays = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.expireWarnDays = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCustomPasswordAgePolicyRequest>): UpdateCustomPasswordAgePolicyRequest {
    return UpdateCustomPasswordAgePolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomPasswordAgePolicyRequest>): UpdateCustomPasswordAgePolicyRequest {
    const message = createBaseUpdateCustomPasswordAgePolicyRequest();
    message.maxAgeDays = object.maxAgeDays ?? 0;
    message.expireWarnDays = object.expireWarnDays ?? 0;
    return message;
  },
};

function createBaseUpdateCustomPasswordAgePolicyResponse(): UpdateCustomPasswordAgePolicyResponse {
  return { details: undefined };
}

export const UpdateCustomPasswordAgePolicyResponse = {
  encode(message: UpdateCustomPasswordAgePolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomPasswordAgePolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomPasswordAgePolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCustomPasswordAgePolicyResponse>): UpdateCustomPasswordAgePolicyResponse {
    return UpdateCustomPasswordAgePolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomPasswordAgePolicyResponse>): UpdateCustomPasswordAgePolicyResponse {
    const message = createBaseUpdateCustomPasswordAgePolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetPasswordAgePolicyToDefaultRequest(): ResetPasswordAgePolicyToDefaultRequest {
  return {};
}

export const ResetPasswordAgePolicyToDefaultRequest = {
  encode(_: ResetPasswordAgePolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetPasswordAgePolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordAgePolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetPasswordAgePolicyToDefaultRequest>): ResetPasswordAgePolicyToDefaultRequest {
    return ResetPasswordAgePolicyToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ResetPasswordAgePolicyToDefaultRequest>): ResetPasswordAgePolicyToDefaultRequest {
    const message = createBaseResetPasswordAgePolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetPasswordAgePolicyToDefaultResponse(): ResetPasswordAgePolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetPasswordAgePolicyToDefaultResponse = {
  encode(message: ResetPasswordAgePolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetPasswordAgePolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPasswordAgePolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetPasswordAgePolicyToDefaultResponse>): ResetPasswordAgePolicyToDefaultResponse {
    return ResetPasswordAgePolicyToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetPasswordAgePolicyToDefaultResponse>): ResetPasswordAgePolicyToDefaultResponse {
    const message = createBaseResetPasswordAgePolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetLockoutPolicyRequest(): GetLockoutPolicyRequest {
  return {};
}

export const GetLockoutPolicyRequest = {
  encode(_: GetLockoutPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLockoutPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLockoutPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetLockoutPolicyRequest>): GetLockoutPolicyRequest {
    return GetLockoutPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetLockoutPolicyRequest>): GetLockoutPolicyRequest {
    const message = createBaseGetLockoutPolicyRequest();
    return message;
  },
};

function createBaseGetLockoutPolicyResponse(): GetLockoutPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetLockoutPolicyResponse = {
  encode(message: GetLockoutPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LockoutPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLockoutPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLockoutPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LockoutPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetLockoutPolicyResponse>): GetLockoutPolicyResponse {
    return GetLockoutPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLockoutPolicyResponse>): GetLockoutPolicyResponse {
    const message = createBaseGetLockoutPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LockoutPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseGetDefaultLockoutPolicyRequest(): GetDefaultLockoutPolicyRequest {
  return {};
}

export const GetDefaultLockoutPolicyRequest = {
  encode(_: GetDefaultLockoutPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLockoutPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLockoutPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultLockoutPolicyRequest>): GetDefaultLockoutPolicyRequest {
    return GetDefaultLockoutPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetDefaultLockoutPolicyRequest>): GetDefaultLockoutPolicyRequest {
    const message = createBaseGetDefaultLockoutPolicyRequest();
    return message;
  },
};

function createBaseGetDefaultLockoutPolicyResponse(): GetDefaultLockoutPolicyResponse {
  return { policy: undefined };
}

export const GetDefaultLockoutPolicyResponse = {
  encode(message: GetDefaultLockoutPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LockoutPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLockoutPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLockoutPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LockoutPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultLockoutPolicyResponse>): GetDefaultLockoutPolicyResponse {
    return GetDefaultLockoutPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultLockoutPolicyResponse>): GetDefaultLockoutPolicyResponse {
    const message = createBaseGetDefaultLockoutPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LockoutPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomLockoutPolicyRequest(): AddCustomLockoutPolicyRequest {
  return { maxPasswordAttempts: 0 };
}

export const AddCustomLockoutPolicyRequest = {
  encode(message: AddCustomLockoutPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.maxPasswordAttempts !== 0) {
      writer.uint32(8).uint32(message.maxPasswordAttempts);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLockoutPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLockoutPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxPasswordAttempts = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomLockoutPolicyRequest>): AddCustomLockoutPolicyRequest {
    return AddCustomLockoutPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomLockoutPolicyRequest>): AddCustomLockoutPolicyRequest {
    const message = createBaseAddCustomLockoutPolicyRequest();
    message.maxPasswordAttempts = object.maxPasswordAttempts ?? 0;
    return message;
  },
};

function createBaseAddCustomLockoutPolicyResponse(): AddCustomLockoutPolicyResponse {
  return { details: undefined };
}

export const AddCustomLockoutPolicyResponse = {
  encode(message: AddCustomLockoutPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLockoutPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLockoutPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomLockoutPolicyResponse>): AddCustomLockoutPolicyResponse {
    return AddCustomLockoutPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomLockoutPolicyResponse>): AddCustomLockoutPolicyResponse {
    const message = createBaseAddCustomLockoutPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomLockoutPolicyRequest(): UpdateCustomLockoutPolicyRequest {
  return { maxPasswordAttempts: 0 };
}

export const UpdateCustomLockoutPolicyRequest = {
  encode(message: UpdateCustomLockoutPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.maxPasswordAttempts !== 0) {
      writer.uint32(8).uint32(message.maxPasswordAttempts);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomLockoutPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomLockoutPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.maxPasswordAttempts = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCustomLockoutPolicyRequest>): UpdateCustomLockoutPolicyRequest {
    return UpdateCustomLockoutPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomLockoutPolicyRequest>): UpdateCustomLockoutPolicyRequest {
    const message = createBaseUpdateCustomLockoutPolicyRequest();
    message.maxPasswordAttempts = object.maxPasswordAttempts ?? 0;
    return message;
  },
};

function createBaseUpdateCustomLockoutPolicyResponse(): UpdateCustomLockoutPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomLockoutPolicyResponse = {
  encode(message: UpdateCustomLockoutPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomLockoutPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomLockoutPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCustomLockoutPolicyResponse>): UpdateCustomLockoutPolicyResponse {
    return UpdateCustomLockoutPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomLockoutPolicyResponse>): UpdateCustomLockoutPolicyResponse {
    const message = createBaseUpdateCustomLockoutPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetLockoutPolicyToDefaultRequest(): ResetLockoutPolicyToDefaultRequest {
  return {};
}

export const ResetLockoutPolicyToDefaultRequest = {
  encode(_: ResetLockoutPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetLockoutPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetLockoutPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetLockoutPolicyToDefaultRequest>): ResetLockoutPolicyToDefaultRequest {
    return ResetLockoutPolicyToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ResetLockoutPolicyToDefaultRequest>): ResetLockoutPolicyToDefaultRequest {
    const message = createBaseResetLockoutPolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetLockoutPolicyToDefaultResponse(): ResetLockoutPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetLockoutPolicyToDefaultResponse = {
  encode(message: ResetLockoutPolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetLockoutPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetLockoutPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetLockoutPolicyToDefaultResponse>): ResetLockoutPolicyToDefaultResponse {
    return ResetLockoutPolicyToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetLockoutPolicyToDefaultResponse>): ResetLockoutPolicyToDefaultResponse {
    const message = createBaseResetLockoutPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetPrivacyPolicyRequest(): GetPrivacyPolicyRequest {
  return {};
}

export const GetPrivacyPolicyRequest = {
  encode(_: GetPrivacyPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPrivacyPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPrivacyPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPrivacyPolicyRequest>): GetPrivacyPolicyRequest {
    return GetPrivacyPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetPrivacyPolicyRequest>): GetPrivacyPolicyRequest {
    const message = createBaseGetPrivacyPolicyRequest();
    return message;
  },
};

function createBaseGetPrivacyPolicyResponse(): GetPrivacyPolicyResponse {
  return { policy: undefined };
}

export const GetPrivacyPolicyResponse = {
  encode(message: GetPrivacyPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PrivacyPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPrivacyPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPrivacyPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PrivacyPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPrivacyPolicyResponse>): GetPrivacyPolicyResponse {
    return GetPrivacyPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPrivacyPolicyResponse>): GetPrivacyPolicyResponse {
    const message = createBaseGetPrivacyPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PrivacyPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPrivacyPolicyRequest(): GetDefaultPrivacyPolicyRequest {
  return {};
}

export const GetDefaultPrivacyPolicyRequest = {
  encode(_: GetDefaultPrivacyPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPrivacyPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPrivacyPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultPrivacyPolicyRequest>): GetDefaultPrivacyPolicyRequest {
    return GetDefaultPrivacyPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetDefaultPrivacyPolicyRequest>): GetDefaultPrivacyPolicyRequest {
    const message = createBaseGetDefaultPrivacyPolicyRequest();
    return message;
  },
};

function createBaseGetDefaultPrivacyPolicyResponse(): GetDefaultPrivacyPolicyResponse {
  return { policy: undefined };
}

export const GetDefaultPrivacyPolicyResponse = {
  encode(message: GetDefaultPrivacyPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      PrivacyPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPrivacyPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPrivacyPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = PrivacyPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultPrivacyPolicyResponse>): GetDefaultPrivacyPolicyResponse {
    return GetDefaultPrivacyPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultPrivacyPolicyResponse>): GetDefaultPrivacyPolicyResponse {
    const message = createBaseGetDefaultPrivacyPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? PrivacyPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomPrivacyPolicyRequest(): AddCustomPrivacyPolicyRequest {
  return { tosLink: "", privacyLink: "", helpLink: "", supportEmail: "" };
}

export const AddCustomPrivacyPolicyRequest = {
  encode(message: AddCustomPrivacyPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tosLink !== "") {
      writer.uint32(10).string(message.tosLink);
    }
    if (message.privacyLink !== "") {
      writer.uint32(18).string(message.privacyLink);
    }
    if (message.helpLink !== "") {
      writer.uint32(26).string(message.helpLink);
    }
    if (message.supportEmail !== "") {
      writer.uint32(34).string(message.supportEmail);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomPrivacyPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomPrivacyPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tosLink = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.privacyLink = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.helpLink = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.supportEmail = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomPrivacyPolicyRequest>): AddCustomPrivacyPolicyRequest {
    return AddCustomPrivacyPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomPrivacyPolicyRequest>): AddCustomPrivacyPolicyRequest {
    const message = createBaseAddCustomPrivacyPolicyRequest();
    message.tosLink = object.tosLink ?? "";
    message.privacyLink = object.privacyLink ?? "";
    message.helpLink = object.helpLink ?? "";
    message.supportEmail = object.supportEmail ?? "";
    return message;
  },
};

function createBaseAddCustomPrivacyPolicyResponse(): AddCustomPrivacyPolicyResponse {
  return { details: undefined };
}

export const AddCustomPrivacyPolicyResponse = {
  encode(message: AddCustomPrivacyPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomPrivacyPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomPrivacyPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomPrivacyPolicyResponse>): AddCustomPrivacyPolicyResponse {
    return AddCustomPrivacyPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomPrivacyPolicyResponse>): AddCustomPrivacyPolicyResponse {
    const message = createBaseAddCustomPrivacyPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomPrivacyPolicyRequest(): UpdateCustomPrivacyPolicyRequest {
  return { tosLink: "", privacyLink: "", helpLink: "", supportEmail: "" };
}

export const UpdateCustomPrivacyPolicyRequest = {
  encode(message: UpdateCustomPrivacyPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tosLink !== "") {
      writer.uint32(10).string(message.tosLink);
    }
    if (message.privacyLink !== "") {
      writer.uint32(18).string(message.privacyLink);
    }
    if (message.helpLink !== "") {
      writer.uint32(26).string(message.helpLink);
    }
    if (message.supportEmail !== "") {
      writer.uint32(34).string(message.supportEmail);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomPrivacyPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomPrivacyPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tosLink = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.privacyLink = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.helpLink = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.supportEmail = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCustomPrivacyPolicyRequest>): UpdateCustomPrivacyPolicyRequest {
    return UpdateCustomPrivacyPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomPrivacyPolicyRequest>): UpdateCustomPrivacyPolicyRequest {
    const message = createBaseUpdateCustomPrivacyPolicyRequest();
    message.tosLink = object.tosLink ?? "";
    message.privacyLink = object.privacyLink ?? "";
    message.helpLink = object.helpLink ?? "";
    message.supportEmail = object.supportEmail ?? "";
    return message;
  },
};

function createBaseUpdateCustomPrivacyPolicyResponse(): UpdateCustomPrivacyPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomPrivacyPolicyResponse = {
  encode(message: UpdateCustomPrivacyPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomPrivacyPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomPrivacyPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCustomPrivacyPolicyResponse>): UpdateCustomPrivacyPolicyResponse {
    return UpdateCustomPrivacyPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomPrivacyPolicyResponse>): UpdateCustomPrivacyPolicyResponse {
    const message = createBaseUpdateCustomPrivacyPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetPrivacyPolicyToDefaultRequest(): ResetPrivacyPolicyToDefaultRequest {
  return {};
}

export const ResetPrivacyPolicyToDefaultRequest = {
  encode(_: ResetPrivacyPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetPrivacyPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPrivacyPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetPrivacyPolicyToDefaultRequest>): ResetPrivacyPolicyToDefaultRequest {
    return ResetPrivacyPolicyToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ResetPrivacyPolicyToDefaultRequest>): ResetPrivacyPolicyToDefaultRequest {
    const message = createBaseResetPrivacyPolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetPrivacyPolicyToDefaultResponse(): ResetPrivacyPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetPrivacyPolicyToDefaultResponse = {
  encode(message: ResetPrivacyPolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetPrivacyPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetPrivacyPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetPrivacyPolicyToDefaultResponse>): ResetPrivacyPolicyToDefaultResponse {
    return ResetPrivacyPolicyToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetPrivacyPolicyToDefaultResponse>): ResetPrivacyPolicyToDefaultResponse {
    const message = createBaseResetPrivacyPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetNotificationPolicyRequest(): GetNotificationPolicyRequest {
  return {};
}

export const GetNotificationPolicyRequest = {
  encode(_: GetNotificationPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetNotificationPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetNotificationPolicyRequest>): GetNotificationPolicyRequest {
    return GetNotificationPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetNotificationPolicyRequest>): GetNotificationPolicyRequest {
    const message = createBaseGetNotificationPolicyRequest();
    return message;
  },
};

function createBaseGetNotificationPolicyResponse(): GetNotificationPolicyResponse {
  return { policy: undefined };
}

export const GetNotificationPolicyResponse = {
  encode(message: GetNotificationPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      NotificationPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetNotificationPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = NotificationPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetNotificationPolicyResponse>): GetNotificationPolicyResponse {
    return GetNotificationPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetNotificationPolicyResponse>): GetNotificationPolicyResponse {
    const message = createBaseGetNotificationPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? NotificationPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultNotificationPolicyRequest(): GetDefaultNotificationPolicyRequest {
  return {};
}

export const GetDefaultNotificationPolicyRequest = {
  encode(_: GetDefaultNotificationPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultNotificationPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultNotificationPolicyRequest>): GetDefaultNotificationPolicyRequest {
    return GetDefaultNotificationPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetDefaultNotificationPolicyRequest>): GetDefaultNotificationPolicyRequest {
    const message = createBaseGetDefaultNotificationPolicyRequest();
    return message;
  },
};

function createBaseGetDefaultNotificationPolicyResponse(): GetDefaultNotificationPolicyResponse {
  return { policy: undefined };
}

export const GetDefaultNotificationPolicyResponse = {
  encode(message: GetDefaultNotificationPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      NotificationPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultNotificationPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = NotificationPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultNotificationPolicyResponse>): GetDefaultNotificationPolicyResponse {
    return GetDefaultNotificationPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultNotificationPolicyResponse>): GetDefaultNotificationPolicyResponse {
    const message = createBaseGetDefaultNotificationPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? NotificationPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomNotificationPolicyRequest(): AddCustomNotificationPolicyRequest {
  return { passwordChange: false };
}

export const AddCustomNotificationPolicyRequest = {
  encode(message: AddCustomNotificationPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.passwordChange === true) {
      writer.uint32(8).bool(message.passwordChange);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomNotificationPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.passwordChange = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomNotificationPolicyRequest>): AddCustomNotificationPolicyRequest {
    return AddCustomNotificationPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomNotificationPolicyRequest>): AddCustomNotificationPolicyRequest {
    const message = createBaseAddCustomNotificationPolicyRequest();
    message.passwordChange = object.passwordChange ?? false;
    return message;
  },
};

function createBaseAddCustomNotificationPolicyResponse(): AddCustomNotificationPolicyResponse {
  return { details: undefined };
}

export const AddCustomNotificationPolicyResponse = {
  encode(message: AddCustomNotificationPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomNotificationPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomNotificationPolicyResponse>): AddCustomNotificationPolicyResponse {
    return AddCustomNotificationPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomNotificationPolicyResponse>): AddCustomNotificationPolicyResponse {
    const message = createBaseAddCustomNotificationPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomNotificationPolicyRequest(): UpdateCustomNotificationPolicyRequest {
  return { passwordChange: false };
}

export const UpdateCustomNotificationPolicyRequest = {
  encode(message: UpdateCustomNotificationPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.passwordChange === true) {
      writer.uint32(8).bool(message.passwordChange);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomNotificationPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomNotificationPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.passwordChange = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCustomNotificationPolicyRequest>): UpdateCustomNotificationPolicyRequest {
    return UpdateCustomNotificationPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomNotificationPolicyRequest>): UpdateCustomNotificationPolicyRequest {
    const message = createBaseUpdateCustomNotificationPolicyRequest();
    message.passwordChange = object.passwordChange ?? false;
    return message;
  },
};

function createBaseUpdateCustomNotificationPolicyResponse(): UpdateCustomNotificationPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomNotificationPolicyResponse = {
  encode(message: UpdateCustomNotificationPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomNotificationPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomNotificationPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCustomNotificationPolicyResponse>): UpdateCustomNotificationPolicyResponse {
    return UpdateCustomNotificationPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomNotificationPolicyResponse>): UpdateCustomNotificationPolicyResponse {
    const message = createBaseUpdateCustomNotificationPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetNotificationPolicyToDefaultRequest(): ResetNotificationPolicyToDefaultRequest {
  return {};
}

export const ResetNotificationPolicyToDefaultRequest = {
  encode(_: ResetNotificationPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetNotificationPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetNotificationPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetNotificationPolicyToDefaultRequest>): ResetNotificationPolicyToDefaultRequest {
    return ResetNotificationPolicyToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ResetNotificationPolicyToDefaultRequest>): ResetNotificationPolicyToDefaultRequest {
    const message = createBaseResetNotificationPolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetNotificationPolicyToDefaultResponse(): ResetNotificationPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetNotificationPolicyToDefaultResponse = {
  encode(message: ResetNotificationPolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetNotificationPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetNotificationPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetNotificationPolicyToDefaultResponse>): ResetNotificationPolicyToDefaultResponse {
    return ResetNotificationPolicyToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetNotificationPolicyToDefaultResponse>): ResetNotificationPolicyToDefaultResponse {
    const message = createBaseResetNotificationPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetLabelPolicyRequest(): GetLabelPolicyRequest {
  return {};
}

export const GetLabelPolicyRequest = {
  encode(_: GetLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetLabelPolicyRequest>): GetLabelPolicyRequest {
    return GetLabelPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetLabelPolicyRequest>): GetLabelPolicyRequest {
    const message = createBaseGetLabelPolicyRequest();
    return message;
  },
};

function createBaseGetLabelPolicyResponse(): GetLabelPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetLabelPolicyResponse = {
  encode(message: GetLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LabelPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LabelPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetLabelPolicyResponse>): GetLabelPolicyResponse {
    return GetLabelPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLabelPolicyResponse>): GetLabelPolicyResponse {
    const message = createBaseGetLabelPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LabelPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseGetPreviewLabelPolicyRequest(): GetPreviewLabelPolicyRequest {
  return {};
}

export const GetPreviewLabelPolicyRequest = {
  encode(_: GetPreviewLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPreviewLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPreviewLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPreviewLabelPolicyRequest>): GetPreviewLabelPolicyRequest {
    return GetPreviewLabelPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetPreviewLabelPolicyRequest>): GetPreviewLabelPolicyRequest {
    const message = createBaseGetPreviewLabelPolicyRequest();
    return message;
  },
};

function createBaseGetPreviewLabelPolicyResponse(): GetPreviewLabelPolicyResponse {
  return { policy: undefined, isDefault: false };
}

export const GetPreviewLabelPolicyResponse = {
  encode(message: GetPreviewLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LabelPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    if (message.isDefault === true) {
      writer.uint32(16).bool(message.isDefault);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPreviewLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPreviewLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LabelPolicy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.isDefault = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetPreviewLabelPolicyResponse>): GetPreviewLabelPolicyResponse {
    return GetPreviewLabelPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPreviewLabelPolicyResponse>): GetPreviewLabelPolicyResponse {
    const message = createBaseGetPreviewLabelPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LabelPolicy.fromPartial(object.policy)
      : undefined;
    message.isDefault = object.isDefault ?? false;
    return message;
  },
};

function createBaseGetDefaultLabelPolicyRequest(): GetDefaultLabelPolicyRequest {
  return {};
}

export const GetDefaultLabelPolicyRequest = {
  encode(_: GetDefaultLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultLabelPolicyRequest>): GetDefaultLabelPolicyRequest {
    return GetDefaultLabelPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetDefaultLabelPolicyRequest>): GetDefaultLabelPolicyRequest {
    const message = createBaseGetDefaultLabelPolicyRequest();
    return message;
  },
};

function createBaseGetDefaultLabelPolicyResponse(): GetDefaultLabelPolicyResponse {
  return { policy: undefined };
}

export const GetDefaultLabelPolicyResponse = {
  encode(message: GetDefaultLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.policy !== undefined) {
      LabelPolicy.encode(message.policy, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.policy = LabelPolicy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultLabelPolicyResponse>): GetDefaultLabelPolicyResponse {
    return GetDefaultLabelPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultLabelPolicyResponse>): GetDefaultLabelPolicyResponse {
    const message = createBaseGetDefaultLabelPolicyResponse();
    message.policy = (object.policy !== undefined && object.policy !== null)
      ? LabelPolicy.fromPartial(object.policy)
      : undefined;
    return message;
  },
};

function createBaseAddCustomLabelPolicyRequest(): AddCustomLabelPolicyRequest {
  return {
    primaryColor: "",
    hideLoginNameSuffix: false,
    warnColor: "",
    backgroundColor: "",
    fontColor: "",
    primaryColorDark: "",
    backgroundColorDark: "",
    warnColorDark: "",
    fontColorDark: "",
    disableWatermark: false,
    themeMode: 0,
  };
}

export const AddCustomLabelPolicyRequest = {
  encode(message: AddCustomLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.primaryColor !== "") {
      writer.uint32(10).string(message.primaryColor);
    }
    if (message.hideLoginNameSuffix === true) {
      writer.uint32(24).bool(message.hideLoginNameSuffix);
    }
    if (message.warnColor !== "") {
      writer.uint32(34).string(message.warnColor);
    }
    if (message.backgroundColor !== "") {
      writer.uint32(42).string(message.backgroundColor);
    }
    if (message.fontColor !== "") {
      writer.uint32(50).string(message.fontColor);
    }
    if (message.primaryColorDark !== "") {
      writer.uint32(58).string(message.primaryColorDark);
    }
    if (message.backgroundColorDark !== "") {
      writer.uint32(66).string(message.backgroundColorDark);
    }
    if (message.warnColorDark !== "") {
      writer.uint32(74).string(message.warnColorDark);
    }
    if (message.fontColorDark !== "") {
      writer.uint32(82).string(message.fontColorDark);
    }
    if (message.disableWatermark === true) {
      writer.uint32(88).bool(message.disableWatermark);
    }
    if (message.themeMode !== 0) {
      writer.uint32(96).int32(message.themeMode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.primaryColor = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hideLoginNameSuffix = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.warnColor = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.backgroundColor = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.fontColor = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.primaryColorDark = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.backgroundColorDark = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.warnColorDark = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.fontColorDark = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.disableWatermark = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.themeMode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomLabelPolicyRequest>): AddCustomLabelPolicyRequest {
    return AddCustomLabelPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomLabelPolicyRequest>): AddCustomLabelPolicyRequest {
    const message = createBaseAddCustomLabelPolicyRequest();
    message.primaryColor = object.primaryColor ?? "";
    message.hideLoginNameSuffix = object.hideLoginNameSuffix ?? false;
    message.warnColor = object.warnColor ?? "";
    message.backgroundColor = object.backgroundColor ?? "";
    message.fontColor = object.fontColor ?? "";
    message.primaryColorDark = object.primaryColorDark ?? "";
    message.backgroundColorDark = object.backgroundColorDark ?? "";
    message.warnColorDark = object.warnColorDark ?? "";
    message.fontColorDark = object.fontColorDark ?? "";
    message.disableWatermark = object.disableWatermark ?? false;
    message.themeMode = object.themeMode ?? 0;
    return message;
  },
};

function createBaseAddCustomLabelPolicyResponse(): AddCustomLabelPolicyResponse {
  return { details: undefined };
}

export const AddCustomLabelPolicyResponse = {
  encode(message: AddCustomLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddCustomLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCustomLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddCustomLabelPolicyResponse>): AddCustomLabelPolicyResponse {
    return AddCustomLabelPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCustomLabelPolicyResponse>): AddCustomLabelPolicyResponse {
    const message = createBaseAddCustomLabelPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateCustomLabelPolicyRequest(): UpdateCustomLabelPolicyRequest {
  return {
    primaryColor: "",
    hideLoginNameSuffix: false,
    warnColor: "",
    backgroundColor: "",
    fontColor: "",
    primaryColorDark: "",
    backgroundColorDark: "",
    warnColorDark: "",
    fontColorDark: "",
    disableWatermark: false,
    themeMode: 0,
  };
}

export const UpdateCustomLabelPolicyRequest = {
  encode(message: UpdateCustomLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.primaryColor !== "") {
      writer.uint32(10).string(message.primaryColor);
    }
    if (message.hideLoginNameSuffix === true) {
      writer.uint32(24).bool(message.hideLoginNameSuffix);
    }
    if (message.warnColor !== "") {
      writer.uint32(34).string(message.warnColor);
    }
    if (message.backgroundColor !== "") {
      writer.uint32(42).string(message.backgroundColor);
    }
    if (message.fontColor !== "") {
      writer.uint32(50).string(message.fontColor);
    }
    if (message.primaryColorDark !== "") {
      writer.uint32(58).string(message.primaryColorDark);
    }
    if (message.backgroundColorDark !== "") {
      writer.uint32(66).string(message.backgroundColorDark);
    }
    if (message.warnColorDark !== "") {
      writer.uint32(74).string(message.warnColorDark);
    }
    if (message.fontColorDark !== "") {
      writer.uint32(82).string(message.fontColorDark);
    }
    if (message.disableWatermark === true) {
      writer.uint32(88).bool(message.disableWatermark);
    }
    if (message.themeMode !== 0) {
      writer.uint32(96).int32(message.themeMode);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.primaryColor = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.hideLoginNameSuffix = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.warnColor = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.backgroundColor = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.fontColor = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.primaryColorDark = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.backgroundColorDark = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.warnColorDark = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.fontColorDark = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.disableWatermark = reader.bool();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.themeMode = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCustomLabelPolicyRequest>): UpdateCustomLabelPolicyRequest {
    return UpdateCustomLabelPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomLabelPolicyRequest>): UpdateCustomLabelPolicyRequest {
    const message = createBaseUpdateCustomLabelPolicyRequest();
    message.primaryColor = object.primaryColor ?? "";
    message.hideLoginNameSuffix = object.hideLoginNameSuffix ?? false;
    message.warnColor = object.warnColor ?? "";
    message.backgroundColor = object.backgroundColor ?? "";
    message.fontColor = object.fontColor ?? "";
    message.primaryColorDark = object.primaryColorDark ?? "";
    message.backgroundColorDark = object.backgroundColorDark ?? "";
    message.warnColorDark = object.warnColorDark ?? "";
    message.fontColorDark = object.fontColorDark ?? "";
    message.disableWatermark = object.disableWatermark ?? false;
    message.themeMode = object.themeMode ?? 0;
    return message;
  },
};

function createBaseUpdateCustomLabelPolicyResponse(): UpdateCustomLabelPolicyResponse {
  return { details: undefined };
}

export const UpdateCustomLabelPolicyResponse = {
  encode(message: UpdateCustomLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateCustomLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCustomLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateCustomLabelPolicyResponse>): UpdateCustomLabelPolicyResponse {
    return UpdateCustomLabelPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCustomLabelPolicyResponse>): UpdateCustomLabelPolicyResponse {
    const message = createBaseUpdateCustomLabelPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseActivateCustomLabelPolicyRequest(): ActivateCustomLabelPolicyRequest {
  return {};
}

export const ActivateCustomLabelPolicyRequest = {
  encode(_: ActivateCustomLabelPolicyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActivateCustomLabelPolicyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateCustomLabelPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ActivateCustomLabelPolicyRequest>): ActivateCustomLabelPolicyRequest {
    return ActivateCustomLabelPolicyRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ActivateCustomLabelPolicyRequest>): ActivateCustomLabelPolicyRequest {
    const message = createBaseActivateCustomLabelPolicyRequest();
    return message;
  },
};

function createBaseActivateCustomLabelPolicyResponse(): ActivateCustomLabelPolicyResponse {
  return { details: undefined };
}

export const ActivateCustomLabelPolicyResponse = {
  encode(message: ActivateCustomLabelPolicyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActivateCustomLabelPolicyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActivateCustomLabelPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ActivateCustomLabelPolicyResponse>): ActivateCustomLabelPolicyResponse {
    return ActivateCustomLabelPolicyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActivateCustomLabelPolicyResponse>): ActivateCustomLabelPolicyResponse {
    const message = createBaseActivateCustomLabelPolicyResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyLogoRequest(): RemoveCustomLabelPolicyLogoRequest {
  return {};
}

export const RemoveCustomLabelPolicyLogoRequest = {
  encode(_: RemoveCustomLabelPolicyLogoRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyLogoRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyLogoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveCustomLabelPolicyLogoRequest>): RemoveCustomLabelPolicyLogoRequest {
    return RemoveCustomLabelPolicyLogoRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveCustomLabelPolicyLogoRequest>): RemoveCustomLabelPolicyLogoRequest {
    const message = createBaseRemoveCustomLabelPolicyLogoRequest();
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyLogoResponse(): RemoveCustomLabelPolicyLogoResponse {
  return { details: undefined };
}

export const RemoveCustomLabelPolicyLogoResponse = {
  encode(message: RemoveCustomLabelPolicyLogoResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyLogoResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyLogoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveCustomLabelPolicyLogoResponse>): RemoveCustomLabelPolicyLogoResponse {
    return RemoveCustomLabelPolicyLogoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveCustomLabelPolicyLogoResponse>): RemoveCustomLabelPolicyLogoResponse {
    const message = createBaseRemoveCustomLabelPolicyLogoResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyLogoDarkRequest(): RemoveCustomLabelPolicyLogoDarkRequest {
  return {};
}

export const RemoveCustomLabelPolicyLogoDarkRequest = {
  encode(_: RemoveCustomLabelPolicyLogoDarkRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyLogoDarkRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyLogoDarkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveCustomLabelPolicyLogoDarkRequest>): RemoveCustomLabelPolicyLogoDarkRequest {
    return RemoveCustomLabelPolicyLogoDarkRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveCustomLabelPolicyLogoDarkRequest>): RemoveCustomLabelPolicyLogoDarkRequest {
    const message = createBaseRemoveCustomLabelPolicyLogoDarkRequest();
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyLogoDarkResponse(): RemoveCustomLabelPolicyLogoDarkResponse {
  return { details: undefined };
}

export const RemoveCustomLabelPolicyLogoDarkResponse = {
  encode(message: RemoveCustomLabelPolicyLogoDarkResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyLogoDarkResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyLogoDarkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveCustomLabelPolicyLogoDarkResponse>): RemoveCustomLabelPolicyLogoDarkResponse {
    return RemoveCustomLabelPolicyLogoDarkResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveCustomLabelPolicyLogoDarkResponse>): RemoveCustomLabelPolicyLogoDarkResponse {
    const message = createBaseRemoveCustomLabelPolicyLogoDarkResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyIconRequest(): RemoveCustomLabelPolicyIconRequest {
  return {};
}

export const RemoveCustomLabelPolicyIconRequest = {
  encode(_: RemoveCustomLabelPolicyIconRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyIconRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyIconRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveCustomLabelPolicyIconRequest>): RemoveCustomLabelPolicyIconRequest {
    return RemoveCustomLabelPolicyIconRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveCustomLabelPolicyIconRequest>): RemoveCustomLabelPolicyIconRequest {
    const message = createBaseRemoveCustomLabelPolicyIconRequest();
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyIconResponse(): RemoveCustomLabelPolicyIconResponse {
  return { details: undefined };
}

export const RemoveCustomLabelPolicyIconResponse = {
  encode(message: RemoveCustomLabelPolicyIconResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyIconResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyIconResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveCustomLabelPolicyIconResponse>): RemoveCustomLabelPolicyIconResponse {
    return RemoveCustomLabelPolicyIconResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveCustomLabelPolicyIconResponse>): RemoveCustomLabelPolicyIconResponse {
    const message = createBaseRemoveCustomLabelPolicyIconResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyIconDarkRequest(): RemoveCustomLabelPolicyIconDarkRequest {
  return {};
}

export const RemoveCustomLabelPolicyIconDarkRequest = {
  encode(_: RemoveCustomLabelPolicyIconDarkRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyIconDarkRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyIconDarkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveCustomLabelPolicyIconDarkRequest>): RemoveCustomLabelPolicyIconDarkRequest {
    return RemoveCustomLabelPolicyIconDarkRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveCustomLabelPolicyIconDarkRequest>): RemoveCustomLabelPolicyIconDarkRequest {
    const message = createBaseRemoveCustomLabelPolicyIconDarkRequest();
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyIconDarkResponse(): RemoveCustomLabelPolicyIconDarkResponse {
  return { details: undefined };
}

export const RemoveCustomLabelPolicyIconDarkResponse = {
  encode(message: RemoveCustomLabelPolicyIconDarkResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyIconDarkResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyIconDarkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveCustomLabelPolicyIconDarkResponse>): RemoveCustomLabelPolicyIconDarkResponse {
    return RemoveCustomLabelPolicyIconDarkResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveCustomLabelPolicyIconDarkResponse>): RemoveCustomLabelPolicyIconDarkResponse {
    const message = createBaseRemoveCustomLabelPolicyIconDarkResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyFontRequest(): RemoveCustomLabelPolicyFontRequest {
  return {};
}

export const RemoveCustomLabelPolicyFontRequest = {
  encode(_: RemoveCustomLabelPolicyFontRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyFontRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyFontRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveCustomLabelPolicyFontRequest>): RemoveCustomLabelPolicyFontRequest {
    return RemoveCustomLabelPolicyFontRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveCustomLabelPolicyFontRequest>): RemoveCustomLabelPolicyFontRequest {
    const message = createBaseRemoveCustomLabelPolicyFontRequest();
    return message;
  },
};

function createBaseRemoveCustomLabelPolicyFontResponse(): RemoveCustomLabelPolicyFontResponse {
  return { details: undefined };
}

export const RemoveCustomLabelPolicyFontResponse = {
  encode(message: RemoveCustomLabelPolicyFontResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveCustomLabelPolicyFontResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveCustomLabelPolicyFontResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveCustomLabelPolicyFontResponse>): RemoveCustomLabelPolicyFontResponse {
    return RemoveCustomLabelPolicyFontResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveCustomLabelPolicyFontResponse>): RemoveCustomLabelPolicyFontResponse {
    const message = createBaseRemoveCustomLabelPolicyFontResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetLabelPolicyToDefaultRequest(): ResetLabelPolicyToDefaultRequest {
  return {};
}

export const ResetLabelPolicyToDefaultRequest = {
  encode(_: ResetLabelPolicyToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetLabelPolicyToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetLabelPolicyToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetLabelPolicyToDefaultRequest>): ResetLabelPolicyToDefaultRequest {
    return ResetLabelPolicyToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ResetLabelPolicyToDefaultRequest>): ResetLabelPolicyToDefaultRequest {
    const message = createBaseResetLabelPolicyToDefaultRequest();
    return message;
  },
};

function createBaseResetLabelPolicyToDefaultResponse(): ResetLabelPolicyToDefaultResponse {
  return { details: undefined };
}

export const ResetLabelPolicyToDefaultResponse = {
  encode(message: ResetLabelPolicyToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetLabelPolicyToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetLabelPolicyToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetLabelPolicyToDefaultResponse>): ResetLabelPolicyToDefaultResponse {
    return ResetLabelPolicyToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetLabelPolicyToDefaultResponse>): ResetLabelPolicyToDefaultResponse {
    const message = createBaseResetLabelPolicyToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomInitMessageTextRequest(): GetCustomInitMessageTextRequest {
  return { language: "" };
}

export const GetCustomInitMessageTextRequest = {
  encode(message: GetCustomInitMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomInitMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomInitMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomInitMessageTextRequest>): GetCustomInitMessageTextRequest {
    return GetCustomInitMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomInitMessageTextRequest>): GetCustomInitMessageTextRequest {
    const message = createBaseGetCustomInitMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomInitMessageTextResponse(): GetCustomInitMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomInitMessageTextResponse = {
  encode(message: GetCustomInitMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomInitMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomInitMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomInitMessageTextResponse>): GetCustomInitMessageTextResponse {
    return GetCustomInitMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomInitMessageTextResponse>): GetCustomInitMessageTextResponse {
    const message = createBaseGetCustomInitMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultInitMessageTextRequest(): GetDefaultInitMessageTextRequest {
  return { language: "" };
}

export const GetDefaultInitMessageTextRequest = {
  encode(message: GetDefaultInitMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultInitMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultInitMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultInitMessageTextRequest>): GetDefaultInitMessageTextRequest {
    return GetDefaultInitMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultInitMessageTextRequest>): GetDefaultInitMessageTextRequest {
    const message = createBaseGetDefaultInitMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultInitMessageTextResponse(): GetDefaultInitMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultInitMessageTextResponse = {
  encode(message: GetDefaultInitMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultInitMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultInitMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultInitMessageTextResponse>): GetDefaultInitMessageTextResponse {
    return GetDefaultInitMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultInitMessageTextResponse>): GetDefaultInitMessageTextResponse {
    const message = createBaseGetDefaultInitMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomInitMessageTextRequest(): SetCustomInitMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomInitMessageTextRequest = {
  encode(message: SetCustomInitMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomInitMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomInitMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomInitMessageTextRequest>): SetCustomInitMessageTextRequest {
    return SetCustomInitMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomInitMessageTextRequest>): SetCustomInitMessageTextRequest {
    const message = createBaseSetCustomInitMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomInitMessageTextResponse(): SetCustomInitMessageTextResponse {
  return { details: undefined };
}

export const SetCustomInitMessageTextResponse = {
  encode(message: SetCustomInitMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomInitMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomInitMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomInitMessageTextResponse>): SetCustomInitMessageTextResponse {
    return SetCustomInitMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomInitMessageTextResponse>): SetCustomInitMessageTextResponse {
    const message = createBaseSetCustomInitMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomInitMessageTextToDefaultRequest(): ResetCustomInitMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomInitMessageTextToDefaultRequest = {
  encode(message: ResetCustomInitMessageTextToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomInitMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomInitMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetCustomInitMessageTextToDefaultRequest>): ResetCustomInitMessageTextToDefaultRequest {
    return ResetCustomInitMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomInitMessageTextToDefaultRequest>,
  ): ResetCustomInitMessageTextToDefaultRequest {
    const message = createBaseResetCustomInitMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomInitMessageTextToDefaultResponse(): ResetCustomInitMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomInitMessageTextToDefaultResponse = {
  encode(message: ResetCustomInitMessageTextToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomInitMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomInitMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetCustomInitMessageTextToDefaultResponse>): ResetCustomInitMessageTextToDefaultResponse {
    return ResetCustomInitMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomInitMessageTextToDefaultResponse>,
  ): ResetCustomInitMessageTextToDefaultResponse {
    const message = createBaseResetCustomInitMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultLoginTextsRequest(): GetDefaultLoginTextsRequest {
  return { language: "" };
}

export const GetDefaultLoginTextsRequest = {
  encode(message: GetDefaultLoginTextsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLoginTextsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLoginTextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultLoginTextsRequest>): GetDefaultLoginTextsRequest {
    return GetDefaultLoginTextsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultLoginTextsRequest>): GetDefaultLoginTextsRequest {
    const message = createBaseGetDefaultLoginTextsRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultLoginTextsResponse(): GetDefaultLoginTextsResponse {
  return { customText: undefined };
}

export const GetDefaultLoginTextsResponse = {
  encode(message: GetDefaultLoginTextsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      LoginCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultLoginTextsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultLoginTextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = LoginCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultLoginTextsResponse>): GetDefaultLoginTextsResponse {
    return GetDefaultLoginTextsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultLoginTextsResponse>): GetDefaultLoginTextsResponse {
    const message = createBaseGetDefaultLoginTextsResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? LoginCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetCustomLoginTextsRequest(): GetCustomLoginTextsRequest {
  return { language: "" };
}

export const GetCustomLoginTextsRequest = {
  encode(message: GetCustomLoginTextsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomLoginTextsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomLoginTextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomLoginTextsRequest>): GetCustomLoginTextsRequest {
    return GetCustomLoginTextsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomLoginTextsRequest>): GetCustomLoginTextsRequest {
    const message = createBaseGetCustomLoginTextsRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomLoginTextsResponse(): GetCustomLoginTextsResponse {
  return { customText: undefined };
}

export const GetCustomLoginTextsResponse = {
  encode(message: GetCustomLoginTextsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      LoginCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomLoginTextsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomLoginTextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = LoginCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomLoginTextsResponse>): GetCustomLoginTextsResponse {
    return GetCustomLoginTextsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomLoginTextsResponse>): GetCustomLoginTextsResponse {
    const message = createBaseGetCustomLoginTextsResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? LoginCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomLoginTextsRequest(): SetCustomLoginTextsRequest {
  return {
    language: "",
    selectAccountText: undefined,
    loginText: undefined,
    passwordText: undefined,
    usernameChangeText: undefined,
    usernameChangeDoneText: undefined,
    initPasswordText: undefined,
    initPasswordDoneText: undefined,
    emailVerificationText: undefined,
    emailVerificationDoneText: undefined,
    initializeUserText: undefined,
    initializeDoneText: undefined,
    initMfaPromptText: undefined,
    initMfaOtpText: undefined,
    initMfaU2fText: undefined,
    initMfaDoneText: undefined,
    mfaProvidersText: undefined,
    verifyMfaOtpText: undefined,
    verifyMfaU2fText: undefined,
    passwordlessText: undefined,
    passwordChangeText: undefined,
    passwordChangeDoneText: undefined,
    passwordResetDoneText: undefined,
    registrationOptionText: undefined,
    registrationUserText: undefined,
    registrationOrgText: undefined,
    linkingUserDoneText: undefined,
    externalUserNotFoundText: undefined,
    successLoginText: undefined,
    logoutText: undefined,
    footerText: undefined,
    passwordlessPromptText: undefined,
    passwordlessRegistrationText: undefined,
    passwordlessRegistrationDoneText: undefined,
    externalRegistrationUserOverviewText: undefined,
  };
}

export const SetCustomLoginTextsRequest = {
  encode(message: SetCustomLoginTextsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.selectAccountText !== undefined) {
      SelectAccountScreenText.encode(message.selectAccountText, writer.uint32(18).fork()).ldelim();
    }
    if (message.loginText !== undefined) {
      LoginScreenText.encode(message.loginText, writer.uint32(26).fork()).ldelim();
    }
    if (message.passwordText !== undefined) {
      PasswordScreenText.encode(message.passwordText, writer.uint32(34).fork()).ldelim();
    }
    if (message.usernameChangeText !== undefined) {
      UsernameChangeScreenText.encode(message.usernameChangeText, writer.uint32(42).fork()).ldelim();
    }
    if (message.usernameChangeDoneText !== undefined) {
      UsernameChangeDoneScreenText.encode(message.usernameChangeDoneText, writer.uint32(50).fork()).ldelim();
    }
    if (message.initPasswordText !== undefined) {
      InitPasswordScreenText.encode(message.initPasswordText, writer.uint32(58).fork()).ldelim();
    }
    if (message.initPasswordDoneText !== undefined) {
      InitPasswordDoneScreenText.encode(message.initPasswordDoneText, writer.uint32(66).fork()).ldelim();
    }
    if (message.emailVerificationText !== undefined) {
      EmailVerificationScreenText.encode(message.emailVerificationText, writer.uint32(74).fork()).ldelim();
    }
    if (message.emailVerificationDoneText !== undefined) {
      EmailVerificationDoneScreenText.encode(message.emailVerificationDoneText, writer.uint32(82).fork()).ldelim();
    }
    if (message.initializeUserText !== undefined) {
      InitializeUserScreenText.encode(message.initializeUserText, writer.uint32(90).fork()).ldelim();
    }
    if (message.initializeDoneText !== undefined) {
      InitializeUserDoneScreenText.encode(message.initializeDoneText, writer.uint32(98).fork()).ldelim();
    }
    if (message.initMfaPromptText !== undefined) {
      InitMFAPromptScreenText.encode(message.initMfaPromptText, writer.uint32(106).fork()).ldelim();
    }
    if (message.initMfaOtpText !== undefined) {
      InitMFAOTPScreenText.encode(message.initMfaOtpText, writer.uint32(114).fork()).ldelim();
    }
    if (message.initMfaU2fText !== undefined) {
      InitMFAU2FScreenText.encode(message.initMfaU2fText, writer.uint32(122).fork()).ldelim();
    }
    if (message.initMfaDoneText !== undefined) {
      InitMFADoneScreenText.encode(message.initMfaDoneText, writer.uint32(130).fork()).ldelim();
    }
    if (message.mfaProvidersText !== undefined) {
      MFAProvidersText.encode(message.mfaProvidersText, writer.uint32(138).fork()).ldelim();
    }
    if (message.verifyMfaOtpText !== undefined) {
      VerifyMFAOTPScreenText.encode(message.verifyMfaOtpText, writer.uint32(146).fork()).ldelim();
    }
    if (message.verifyMfaU2fText !== undefined) {
      VerifyMFAU2FScreenText.encode(message.verifyMfaU2fText, writer.uint32(154).fork()).ldelim();
    }
    if (message.passwordlessText !== undefined) {
      PasswordlessScreenText.encode(message.passwordlessText, writer.uint32(162).fork()).ldelim();
    }
    if (message.passwordChangeText !== undefined) {
      PasswordChangeScreenText.encode(message.passwordChangeText, writer.uint32(170).fork()).ldelim();
    }
    if (message.passwordChangeDoneText !== undefined) {
      PasswordChangeDoneScreenText.encode(message.passwordChangeDoneText, writer.uint32(178).fork()).ldelim();
    }
    if (message.passwordResetDoneText !== undefined) {
      PasswordResetDoneScreenText.encode(message.passwordResetDoneText, writer.uint32(186).fork()).ldelim();
    }
    if (message.registrationOptionText !== undefined) {
      RegistrationOptionScreenText.encode(message.registrationOptionText, writer.uint32(194).fork()).ldelim();
    }
    if (message.registrationUserText !== undefined) {
      RegistrationUserScreenText.encode(message.registrationUserText, writer.uint32(202).fork()).ldelim();
    }
    if (message.registrationOrgText !== undefined) {
      RegistrationOrgScreenText.encode(message.registrationOrgText, writer.uint32(210).fork()).ldelim();
    }
    if (message.linkingUserDoneText !== undefined) {
      LinkingUserDoneScreenText.encode(message.linkingUserDoneText, writer.uint32(218).fork()).ldelim();
    }
    if (message.externalUserNotFoundText !== undefined) {
      ExternalUserNotFoundScreenText.encode(message.externalUserNotFoundText, writer.uint32(226).fork()).ldelim();
    }
    if (message.successLoginText !== undefined) {
      SuccessLoginScreenText.encode(message.successLoginText, writer.uint32(234).fork()).ldelim();
    }
    if (message.logoutText !== undefined) {
      LogoutDoneScreenText.encode(message.logoutText, writer.uint32(242).fork()).ldelim();
    }
    if (message.footerText !== undefined) {
      FooterText.encode(message.footerText, writer.uint32(250).fork()).ldelim();
    }
    if (message.passwordlessPromptText !== undefined) {
      PasswordlessPromptScreenText.encode(message.passwordlessPromptText, writer.uint32(258).fork()).ldelim();
    }
    if (message.passwordlessRegistrationText !== undefined) {
      PasswordlessRegistrationScreenText.encode(message.passwordlessRegistrationText, writer.uint32(266).fork())
        .ldelim();
    }
    if (message.passwordlessRegistrationDoneText !== undefined) {
      PasswordlessRegistrationDoneScreenText.encode(message.passwordlessRegistrationDoneText, writer.uint32(274).fork())
        .ldelim();
    }
    if (message.externalRegistrationUserOverviewText !== undefined) {
      ExternalRegistrationUserOverviewScreenText.encode(
        message.externalRegistrationUserOverviewText,
        writer.uint32(282).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomLoginTextsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomLoginTextsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.selectAccountText = SelectAccountScreenText.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.loginText = LoginScreenText.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.passwordText = PasswordScreenText.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.usernameChangeText = UsernameChangeScreenText.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.usernameChangeDoneText = UsernameChangeDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.initPasswordText = InitPasswordScreenText.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.initPasswordDoneText = InitPasswordDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.emailVerificationText = EmailVerificationScreenText.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.emailVerificationDoneText = EmailVerificationDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.initializeUserText = InitializeUserScreenText.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.initializeDoneText = InitializeUserDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.initMfaPromptText = InitMFAPromptScreenText.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.initMfaOtpText = InitMFAOTPScreenText.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.initMfaU2fText = InitMFAU2FScreenText.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.initMfaDoneText = InitMFADoneScreenText.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.mfaProvidersText = MFAProvidersText.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.verifyMfaOtpText = VerifyMFAOTPScreenText.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.verifyMfaU2fText = VerifyMFAU2FScreenText.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.passwordlessText = PasswordlessScreenText.decode(reader, reader.uint32());
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.passwordChangeText = PasswordChangeScreenText.decode(reader, reader.uint32());
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.passwordChangeDoneText = PasswordChangeDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.passwordResetDoneText = PasswordResetDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.registrationOptionText = RegistrationOptionScreenText.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 202) {
            break;
          }

          message.registrationUserText = RegistrationUserScreenText.decode(reader, reader.uint32());
          continue;
        case 26:
          if (tag !== 210) {
            break;
          }

          message.registrationOrgText = RegistrationOrgScreenText.decode(reader, reader.uint32());
          continue;
        case 27:
          if (tag !== 218) {
            break;
          }

          message.linkingUserDoneText = LinkingUserDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 28:
          if (tag !== 226) {
            break;
          }

          message.externalUserNotFoundText = ExternalUserNotFoundScreenText.decode(reader, reader.uint32());
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.successLoginText = SuccessLoginScreenText.decode(reader, reader.uint32());
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.logoutText = LogoutDoneScreenText.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.footerText = FooterText.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.passwordlessPromptText = PasswordlessPromptScreenText.decode(reader, reader.uint32());
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.passwordlessRegistrationText = PasswordlessRegistrationScreenText.decode(reader, reader.uint32());
          continue;
        case 34:
          if (tag !== 274) {
            break;
          }

          message.passwordlessRegistrationDoneText = PasswordlessRegistrationDoneScreenText.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 35:
          if (tag !== 282) {
            break;
          }

          message.externalRegistrationUserOverviewText = ExternalRegistrationUserOverviewScreenText.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomLoginTextsRequest>): SetCustomLoginTextsRequest {
    return SetCustomLoginTextsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomLoginTextsRequest>): SetCustomLoginTextsRequest {
    const message = createBaseSetCustomLoginTextsRequest();
    message.language = object.language ?? "";
    message.selectAccountText = (object.selectAccountText !== undefined && object.selectAccountText !== null)
      ? SelectAccountScreenText.fromPartial(object.selectAccountText)
      : undefined;
    message.loginText = (object.loginText !== undefined && object.loginText !== null)
      ? LoginScreenText.fromPartial(object.loginText)
      : undefined;
    message.passwordText = (object.passwordText !== undefined && object.passwordText !== null)
      ? PasswordScreenText.fromPartial(object.passwordText)
      : undefined;
    message.usernameChangeText = (object.usernameChangeText !== undefined && object.usernameChangeText !== null)
      ? UsernameChangeScreenText.fromPartial(object.usernameChangeText)
      : undefined;
    message.usernameChangeDoneText =
      (object.usernameChangeDoneText !== undefined && object.usernameChangeDoneText !== null)
        ? UsernameChangeDoneScreenText.fromPartial(object.usernameChangeDoneText)
        : undefined;
    message.initPasswordText = (object.initPasswordText !== undefined && object.initPasswordText !== null)
      ? InitPasswordScreenText.fromPartial(object.initPasswordText)
      : undefined;
    message.initPasswordDoneText = (object.initPasswordDoneText !== undefined && object.initPasswordDoneText !== null)
      ? InitPasswordDoneScreenText.fromPartial(object.initPasswordDoneText)
      : undefined;
    message.emailVerificationText =
      (object.emailVerificationText !== undefined && object.emailVerificationText !== null)
        ? EmailVerificationScreenText.fromPartial(object.emailVerificationText)
        : undefined;
    message.emailVerificationDoneText =
      (object.emailVerificationDoneText !== undefined && object.emailVerificationDoneText !== null)
        ? EmailVerificationDoneScreenText.fromPartial(object.emailVerificationDoneText)
        : undefined;
    message.initializeUserText = (object.initializeUserText !== undefined && object.initializeUserText !== null)
      ? InitializeUserScreenText.fromPartial(object.initializeUserText)
      : undefined;
    message.initializeDoneText = (object.initializeDoneText !== undefined && object.initializeDoneText !== null)
      ? InitializeUserDoneScreenText.fromPartial(object.initializeDoneText)
      : undefined;
    message.initMfaPromptText = (object.initMfaPromptText !== undefined && object.initMfaPromptText !== null)
      ? InitMFAPromptScreenText.fromPartial(object.initMfaPromptText)
      : undefined;
    message.initMfaOtpText = (object.initMfaOtpText !== undefined && object.initMfaOtpText !== null)
      ? InitMFAOTPScreenText.fromPartial(object.initMfaOtpText)
      : undefined;
    message.initMfaU2fText = (object.initMfaU2fText !== undefined && object.initMfaU2fText !== null)
      ? InitMFAU2FScreenText.fromPartial(object.initMfaU2fText)
      : undefined;
    message.initMfaDoneText = (object.initMfaDoneText !== undefined && object.initMfaDoneText !== null)
      ? InitMFADoneScreenText.fromPartial(object.initMfaDoneText)
      : undefined;
    message.mfaProvidersText = (object.mfaProvidersText !== undefined && object.mfaProvidersText !== null)
      ? MFAProvidersText.fromPartial(object.mfaProvidersText)
      : undefined;
    message.verifyMfaOtpText = (object.verifyMfaOtpText !== undefined && object.verifyMfaOtpText !== null)
      ? VerifyMFAOTPScreenText.fromPartial(object.verifyMfaOtpText)
      : undefined;
    message.verifyMfaU2fText = (object.verifyMfaU2fText !== undefined && object.verifyMfaU2fText !== null)
      ? VerifyMFAU2FScreenText.fromPartial(object.verifyMfaU2fText)
      : undefined;
    message.passwordlessText = (object.passwordlessText !== undefined && object.passwordlessText !== null)
      ? PasswordlessScreenText.fromPartial(object.passwordlessText)
      : undefined;
    message.passwordChangeText = (object.passwordChangeText !== undefined && object.passwordChangeText !== null)
      ? PasswordChangeScreenText.fromPartial(object.passwordChangeText)
      : undefined;
    message.passwordChangeDoneText =
      (object.passwordChangeDoneText !== undefined && object.passwordChangeDoneText !== null)
        ? PasswordChangeDoneScreenText.fromPartial(object.passwordChangeDoneText)
        : undefined;
    message.passwordResetDoneText =
      (object.passwordResetDoneText !== undefined && object.passwordResetDoneText !== null)
        ? PasswordResetDoneScreenText.fromPartial(object.passwordResetDoneText)
        : undefined;
    message.registrationOptionText =
      (object.registrationOptionText !== undefined && object.registrationOptionText !== null)
        ? RegistrationOptionScreenText.fromPartial(object.registrationOptionText)
        : undefined;
    message.registrationUserText = (object.registrationUserText !== undefined && object.registrationUserText !== null)
      ? RegistrationUserScreenText.fromPartial(object.registrationUserText)
      : undefined;
    message.registrationOrgText = (object.registrationOrgText !== undefined && object.registrationOrgText !== null)
      ? RegistrationOrgScreenText.fromPartial(object.registrationOrgText)
      : undefined;
    message.linkingUserDoneText = (object.linkingUserDoneText !== undefined && object.linkingUserDoneText !== null)
      ? LinkingUserDoneScreenText.fromPartial(object.linkingUserDoneText)
      : undefined;
    message.externalUserNotFoundText =
      (object.externalUserNotFoundText !== undefined && object.externalUserNotFoundText !== null)
        ? ExternalUserNotFoundScreenText.fromPartial(object.externalUserNotFoundText)
        : undefined;
    message.successLoginText = (object.successLoginText !== undefined && object.successLoginText !== null)
      ? SuccessLoginScreenText.fromPartial(object.successLoginText)
      : undefined;
    message.logoutText = (object.logoutText !== undefined && object.logoutText !== null)
      ? LogoutDoneScreenText.fromPartial(object.logoutText)
      : undefined;
    message.footerText = (object.footerText !== undefined && object.footerText !== null)
      ? FooterText.fromPartial(object.footerText)
      : undefined;
    message.passwordlessPromptText =
      (object.passwordlessPromptText !== undefined && object.passwordlessPromptText !== null)
        ? PasswordlessPromptScreenText.fromPartial(object.passwordlessPromptText)
        : undefined;
    message.passwordlessRegistrationText =
      (object.passwordlessRegistrationText !== undefined && object.passwordlessRegistrationText !== null)
        ? PasswordlessRegistrationScreenText.fromPartial(object.passwordlessRegistrationText)
        : undefined;
    message.passwordlessRegistrationDoneText =
      (object.passwordlessRegistrationDoneText !== undefined && object.passwordlessRegistrationDoneText !== null)
        ? PasswordlessRegistrationDoneScreenText.fromPartial(object.passwordlessRegistrationDoneText)
        : undefined;
    message.externalRegistrationUserOverviewText =
      (object.externalRegistrationUserOverviewText !== undefined &&
          object.externalRegistrationUserOverviewText !== null)
        ? ExternalRegistrationUserOverviewScreenText.fromPartial(object.externalRegistrationUserOverviewText)
        : undefined;
    return message;
  },
};

function createBaseSetCustomLoginTextsResponse(): SetCustomLoginTextsResponse {
  return { details: undefined };
}

export const SetCustomLoginTextsResponse = {
  encode(message: SetCustomLoginTextsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomLoginTextsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomLoginTextsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomLoginTextsResponse>): SetCustomLoginTextsResponse {
    return SetCustomLoginTextsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomLoginTextsResponse>): SetCustomLoginTextsResponse {
    const message = createBaseSetCustomLoginTextsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomLoginTextsToDefaultRequest(): ResetCustomLoginTextsToDefaultRequest {
  return { language: "" };
}

export const ResetCustomLoginTextsToDefaultRequest = {
  encode(message: ResetCustomLoginTextsToDefaultRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomLoginTextsToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomLoginTextsToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetCustomLoginTextsToDefaultRequest>): ResetCustomLoginTextsToDefaultRequest {
    return ResetCustomLoginTextsToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetCustomLoginTextsToDefaultRequest>): ResetCustomLoginTextsToDefaultRequest {
    const message = createBaseResetCustomLoginTextsToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomLoginTextsToDefaultResponse(): ResetCustomLoginTextsToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomLoginTextsToDefaultResponse = {
  encode(message: ResetCustomLoginTextsToDefaultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomLoginTextsToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomLoginTextsToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ResetCustomLoginTextsToDefaultResponse>): ResetCustomLoginTextsToDefaultResponse {
    return ResetCustomLoginTextsToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResetCustomLoginTextsToDefaultResponse>): ResetCustomLoginTextsToDefaultResponse {
    const message = createBaseResetCustomLoginTextsToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomPasswordResetMessageTextRequest(): GetCustomPasswordResetMessageTextRequest {
  return { language: "" };
}

export const GetCustomPasswordResetMessageTextRequest = {
  encode(message: GetCustomPasswordResetMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordResetMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordResetMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomPasswordResetMessageTextRequest>): GetCustomPasswordResetMessageTextRequest {
    return GetCustomPasswordResetMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomPasswordResetMessageTextRequest>): GetCustomPasswordResetMessageTextRequest {
    const message = createBaseGetCustomPasswordResetMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomPasswordResetMessageTextResponse(): GetCustomPasswordResetMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomPasswordResetMessageTextResponse = {
  encode(message: GetCustomPasswordResetMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordResetMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordResetMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomPasswordResetMessageTextResponse>): GetCustomPasswordResetMessageTextResponse {
    return GetCustomPasswordResetMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomPasswordResetMessageTextResponse>,
  ): GetCustomPasswordResetMessageTextResponse {
    const message = createBaseGetCustomPasswordResetMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPasswordResetMessageTextRequest(): GetDefaultPasswordResetMessageTextRequest {
  return { language: "" };
}

export const GetDefaultPasswordResetMessageTextRequest = {
  encode(message: GetDefaultPasswordResetMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordResetMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordResetMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultPasswordResetMessageTextRequest>): GetDefaultPasswordResetMessageTextRequest {
    return GetDefaultPasswordResetMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultPasswordResetMessageTextRequest>,
  ): GetDefaultPasswordResetMessageTextRequest {
    const message = createBaseGetDefaultPasswordResetMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultPasswordResetMessageTextResponse(): GetDefaultPasswordResetMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultPasswordResetMessageTextResponse = {
  encode(message: GetDefaultPasswordResetMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordResetMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordResetMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultPasswordResetMessageTextResponse>): GetDefaultPasswordResetMessageTextResponse {
    return GetDefaultPasswordResetMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultPasswordResetMessageTextResponse>,
  ): GetDefaultPasswordResetMessageTextResponse {
    const message = createBaseGetDefaultPasswordResetMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomPasswordResetMessageTextRequest(): SetCustomPasswordResetMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomPasswordResetMessageTextRequest = {
  encode(message: SetCustomPasswordResetMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomPasswordResetMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomPasswordResetMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomPasswordResetMessageTextRequest>): SetCustomPasswordResetMessageTextRequest {
    return SetCustomPasswordResetMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomPasswordResetMessageTextRequest>): SetCustomPasswordResetMessageTextRequest {
    const message = createBaseSetCustomPasswordResetMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomPasswordResetMessageTextResponse(): SetCustomPasswordResetMessageTextResponse {
  return { details: undefined };
}

export const SetCustomPasswordResetMessageTextResponse = {
  encode(message: SetCustomPasswordResetMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomPasswordResetMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomPasswordResetMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomPasswordResetMessageTextResponse>): SetCustomPasswordResetMessageTextResponse {
    return SetCustomPasswordResetMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetCustomPasswordResetMessageTextResponse>,
  ): SetCustomPasswordResetMessageTextResponse {
    const message = createBaseSetCustomPasswordResetMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomPasswordResetMessageTextToDefaultRequest(): ResetCustomPasswordResetMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomPasswordResetMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomPasswordResetMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomPasswordResetMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>,
  ): ResetCustomPasswordResetMessageTextToDefaultRequest {
    return ResetCustomPasswordResetMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>,
  ): ResetCustomPasswordResetMessageTextToDefaultRequest {
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomPasswordResetMessageTextToDefaultResponse(): ResetCustomPasswordResetMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomPasswordResetMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomPasswordResetMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomPasswordResetMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultResponse>,
  ): ResetCustomPasswordResetMessageTextToDefaultResponse {
    return ResetCustomPasswordResetMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultResponse>,
  ): ResetCustomPasswordResetMessageTextToDefaultResponse {
    const message = createBaseResetCustomPasswordResetMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomVerifyEmailMessageTextRequest(): GetCustomVerifyEmailMessageTextRequest {
  return { language: "" };
}

export const GetCustomVerifyEmailMessageTextRequest = {
  encode(message: GetCustomVerifyEmailMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyEmailMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyEmailMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomVerifyEmailMessageTextRequest>): GetCustomVerifyEmailMessageTextRequest {
    return GetCustomVerifyEmailMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomVerifyEmailMessageTextRequest>): GetCustomVerifyEmailMessageTextRequest {
    const message = createBaseGetCustomVerifyEmailMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomVerifyEmailMessageTextResponse(): GetCustomVerifyEmailMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomVerifyEmailMessageTextResponse = {
  encode(message: GetCustomVerifyEmailMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyEmailMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyEmailMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomVerifyEmailMessageTextResponse>): GetCustomVerifyEmailMessageTextResponse {
    return GetCustomVerifyEmailMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomVerifyEmailMessageTextResponse>): GetCustomVerifyEmailMessageTextResponse {
    const message = createBaseGetCustomVerifyEmailMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultVerifyEmailMessageTextRequest(): GetDefaultVerifyEmailMessageTextRequest {
  return { language: "" };
}

export const GetDefaultVerifyEmailMessageTextRequest = {
  encode(message: GetDefaultVerifyEmailMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyEmailMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyEmailMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultVerifyEmailMessageTextRequest>): GetDefaultVerifyEmailMessageTextRequest {
    return GetDefaultVerifyEmailMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultVerifyEmailMessageTextRequest>): GetDefaultVerifyEmailMessageTextRequest {
    const message = createBaseGetDefaultVerifyEmailMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultVerifyEmailMessageTextResponse(): GetDefaultVerifyEmailMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultVerifyEmailMessageTextResponse = {
  encode(message: GetDefaultVerifyEmailMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyEmailMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyEmailMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultVerifyEmailMessageTextResponse>): GetDefaultVerifyEmailMessageTextResponse {
    return GetDefaultVerifyEmailMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultVerifyEmailMessageTextResponse>): GetDefaultVerifyEmailMessageTextResponse {
    const message = createBaseGetDefaultVerifyEmailMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomVerifyEmailMessageTextRequest(): SetCustomVerifyEmailMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomVerifyEmailMessageTextRequest = {
  encode(message: SetCustomVerifyEmailMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomVerifyEmailMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomVerifyEmailMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomVerifyEmailMessageTextRequest>): SetCustomVerifyEmailMessageTextRequest {
    return SetCustomVerifyEmailMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomVerifyEmailMessageTextRequest>): SetCustomVerifyEmailMessageTextRequest {
    const message = createBaseSetCustomVerifyEmailMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomVerifyEmailMessageTextResponse(): SetCustomVerifyEmailMessageTextResponse {
  return { details: undefined };
}

export const SetCustomVerifyEmailMessageTextResponse = {
  encode(message: SetCustomVerifyEmailMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomVerifyEmailMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomVerifyEmailMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomVerifyEmailMessageTextResponse>): SetCustomVerifyEmailMessageTextResponse {
    return SetCustomVerifyEmailMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomVerifyEmailMessageTextResponse>): SetCustomVerifyEmailMessageTextResponse {
    const message = createBaseSetCustomVerifyEmailMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomVerifyEmailMessageTextToDefaultRequest(): ResetCustomVerifyEmailMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomVerifyEmailMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomVerifyEmailMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>,
  ): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    return ResetCustomVerifyEmailMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>,
  ): ResetCustomVerifyEmailMessageTextToDefaultRequest {
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomVerifyEmailMessageTextToDefaultResponse(): ResetCustomVerifyEmailMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomVerifyEmailMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomVerifyEmailMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultResponse>,
  ): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    return ResetCustomVerifyEmailMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultResponse>,
  ): ResetCustomVerifyEmailMessageTextToDefaultResponse {
    const message = createBaseResetCustomVerifyEmailMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomVerifyPhoneMessageTextRequest(): GetCustomVerifyPhoneMessageTextRequest {
  return { language: "" };
}

export const GetCustomVerifyPhoneMessageTextRequest = {
  encode(message: GetCustomVerifyPhoneMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyPhoneMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyPhoneMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomVerifyPhoneMessageTextRequest>): GetCustomVerifyPhoneMessageTextRequest {
    return GetCustomVerifyPhoneMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomVerifyPhoneMessageTextRequest>): GetCustomVerifyPhoneMessageTextRequest {
    const message = createBaseGetCustomVerifyPhoneMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomVerifyPhoneMessageTextResponse(): GetCustomVerifyPhoneMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomVerifyPhoneMessageTextResponse = {
  encode(message: GetCustomVerifyPhoneMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyPhoneMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyPhoneMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomVerifyPhoneMessageTextResponse>): GetCustomVerifyPhoneMessageTextResponse {
    return GetCustomVerifyPhoneMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomVerifyPhoneMessageTextResponse>): GetCustomVerifyPhoneMessageTextResponse {
    const message = createBaseGetCustomVerifyPhoneMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultVerifyPhoneMessageTextRequest(): GetDefaultVerifyPhoneMessageTextRequest {
  return { language: "" };
}

export const GetDefaultVerifyPhoneMessageTextRequest = {
  encode(message: GetDefaultVerifyPhoneMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyPhoneMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyPhoneMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>): GetDefaultVerifyPhoneMessageTextRequest {
    return GetDefaultVerifyPhoneMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>): GetDefaultVerifyPhoneMessageTextRequest {
    const message = createBaseGetDefaultVerifyPhoneMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultVerifyPhoneMessageTextResponse(): GetDefaultVerifyPhoneMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultVerifyPhoneMessageTextResponse = {
  encode(message: GetDefaultVerifyPhoneMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyPhoneMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyPhoneMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultVerifyPhoneMessageTextResponse>): GetDefaultVerifyPhoneMessageTextResponse {
    return GetDefaultVerifyPhoneMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultVerifyPhoneMessageTextResponse>): GetDefaultVerifyPhoneMessageTextResponse {
    const message = createBaseGetDefaultVerifyPhoneMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomVerifyPhoneMessageTextRequest(): SetCustomVerifyPhoneMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomVerifyPhoneMessageTextRequest = {
  encode(message: SetCustomVerifyPhoneMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomVerifyPhoneMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomVerifyPhoneMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomVerifyPhoneMessageTextRequest>): SetCustomVerifyPhoneMessageTextRequest {
    return SetCustomVerifyPhoneMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomVerifyPhoneMessageTextRequest>): SetCustomVerifyPhoneMessageTextRequest {
    const message = createBaseSetCustomVerifyPhoneMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomVerifyPhoneMessageTextResponse(): SetCustomVerifyPhoneMessageTextResponse {
  return { details: undefined };
}

export const SetCustomVerifyPhoneMessageTextResponse = {
  encode(message: SetCustomVerifyPhoneMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomVerifyPhoneMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomVerifyPhoneMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomVerifyPhoneMessageTextResponse>): SetCustomVerifyPhoneMessageTextResponse {
    return SetCustomVerifyPhoneMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomVerifyPhoneMessageTextResponse>): SetCustomVerifyPhoneMessageTextResponse {
    const message = createBaseSetCustomVerifyPhoneMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest(): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomVerifyPhoneMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomVerifyPhoneMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>,
  ): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    return ResetCustomVerifyPhoneMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>,
  ): ResetCustomVerifyPhoneMessageTextToDefaultRequest {
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse(): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomVerifyPhoneMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomVerifyPhoneMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultResponse>,
  ): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    return ResetCustomVerifyPhoneMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultResponse>,
  ): ResetCustomVerifyPhoneMessageTextToDefaultResponse {
    const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomVerifySMSOTPMessageTextRequest(): GetCustomVerifySMSOTPMessageTextRequest {
  return { language: "" };
}

export const GetCustomVerifySMSOTPMessageTextRequest = {
  encode(message: GetCustomVerifySMSOTPMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifySMSOTPMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifySMSOTPMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomVerifySMSOTPMessageTextRequest>): GetCustomVerifySMSOTPMessageTextRequest {
    return GetCustomVerifySMSOTPMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomVerifySMSOTPMessageTextRequest>): GetCustomVerifySMSOTPMessageTextRequest {
    const message = createBaseGetCustomVerifySMSOTPMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomVerifySMSOTPMessageTextResponse(): GetCustomVerifySMSOTPMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomVerifySMSOTPMessageTextResponse = {
  encode(message: GetCustomVerifySMSOTPMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifySMSOTPMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifySMSOTPMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomVerifySMSOTPMessageTextResponse>): GetCustomVerifySMSOTPMessageTextResponse {
    return GetCustomVerifySMSOTPMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomVerifySMSOTPMessageTextResponse>): GetCustomVerifySMSOTPMessageTextResponse {
    const message = createBaseGetCustomVerifySMSOTPMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultVerifySMSOTPMessageTextRequest(): GetDefaultVerifySMSOTPMessageTextRequest {
  return { language: "" };
}

export const GetDefaultVerifySMSOTPMessageTextRequest = {
  encode(message: GetDefaultVerifySMSOTPMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifySMSOTPMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifySMSOTPMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultVerifySMSOTPMessageTextRequest>): GetDefaultVerifySMSOTPMessageTextRequest {
    return GetDefaultVerifySMSOTPMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDefaultVerifySMSOTPMessageTextRequest>): GetDefaultVerifySMSOTPMessageTextRequest {
    const message = createBaseGetDefaultVerifySMSOTPMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultVerifySMSOTPMessageTextResponse(): GetDefaultVerifySMSOTPMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultVerifySMSOTPMessageTextResponse = {
  encode(message: GetDefaultVerifySMSOTPMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifySMSOTPMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifySMSOTPMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultVerifySMSOTPMessageTextResponse>): GetDefaultVerifySMSOTPMessageTextResponse {
    return GetDefaultVerifySMSOTPMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultVerifySMSOTPMessageTextResponse>,
  ): GetDefaultVerifySMSOTPMessageTextResponse {
    const message = createBaseGetDefaultVerifySMSOTPMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomVerifySMSOTPMessageTextRequest(): SetCustomVerifySMSOTPMessageTextRequest {
  return { language: "", text: "" };
}

export const SetCustomVerifySMSOTPMessageTextRequest = {
  encode(message: SetCustomVerifySMSOTPMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomVerifySMSOTPMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomVerifySMSOTPMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomVerifySMSOTPMessageTextRequest>): SetCustomVerifySMSOTPMessageTextRequest {
    return SetCustomVerifySMSOTPMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomVerifySMSOTPMessageTextRequest>): SetCustomVerifySMSOTPMessageTextRequest {
    const message = createBaseSetCustomVerifySMSOTPMessageTextRequest();
    message.language = object.language ?? "";
    message.text = object.text ?? "";
    return message;
  },
};

function createBaseSetCustomVerifySMSOTPMessageTextResponse(): SetCustomVerifySMSOTPMessageTextResponse {
  return { details: undefined };
}

export const SetCustomVerifySMSOTPMessageTextResponse = {
  encode(message: SetCustomVerifySMSOTPMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomVerifySMSOTPMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomVerifySMSOTPMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomVerifySMSOTPMessageTextResponse>): SetCustomVerifySMSOTPMessageTextResponse {
    return SetCustomVerifySMSOTPMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomVerifySMSOTPMessageTextResponse>): SetCustomVerifySMSOTPMessageTextResponse {
    const message = createBaseSetCustomVerifySMSOTPMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomVerifySMSOTPMessageTextToDefaultRequest(): ResetCustomVerifySMSOTPMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomVerifySMSOTPMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomVerifySMSOTPMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifySMSOTPMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomVerifySMSOTPMessageTextToDefaultRequest>,
  ): ResetCustomVerifySMSOTPMessageTextToDefaultRequest {
    return ResetCustomVerifySMSOTPMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifySMSOTPMessageTextToDefaultRequest>,
  ): ResetCustomVerifySMSOTPMessageTextToDefaultRequest {
    const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomVerifySMSOTPMessageTextToDefaultResponse(): ResetCustomVerifySMSOTPMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomVerifySMSOTPMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomVerifySMSOTPMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifySMSOTPMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomVerifySMSOTPMessageTextToDefaultResponse>,
  ): ResetCustomVerifySMSOTPMessageTextToDefaultResponse {
    return ResetCustomVerifySMSOTPMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifySMSOTPMessageTextToDefaultResponse>,
  ): ResetCustomVerifySMSOTPMessageTextToDefaultResponse {
    const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomVerifyEmailOTPMessageTextRequest(): GetCustomVerifyEmailOTPMessageTextRequest {
  return { language: "" };
}

export const GetCustomVerifyEmailOTPMessageTextRequest = {
  encode(message: GetCustomVerifyEmailOTPMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyEmailOTPMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyEmailOTPMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomVerifyEmailOTPMessageTextRequest>): GetCustomVerifyEmailOTPMessageTextRequest {
    return GetCustomVerifyEmailOTPMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomVerifyEmailOTPMessageTextRequest>,
  ): GetCustomVerifyEmailOTPMessageTextRequest {
    const message = createBaseGetCustomVerifyEmailOTPMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomVerifyEmailOTPMessageTextResponse(): GetCustomVerifyEmailOTPMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomVerifyEmailOTPMessageTextResponse = {
  encode(message: GetCustomVerifyEmailOTPMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomVerifyEmailOTPMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomVerifyEmailOTPMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomVerifyEmailOTPMessageTextResponse>): GetCustomVerifyEmailOTPMessageTextResponse {
    return GetCustomVerifyEmailOTPMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomVerifyEmailOTPMessageTextResponse>,
  ): GetCustomVerifyEmailOTPMessageTextResponse {
    const message = createBaseGetCustomVerifyEmailOTPMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultVerifyEmailOTPMessageTextRequest(): GetDefaultVerifyEmailOTPMessageTextRequest {
  return { language: "" };
}

export const GetDefaultVerifyEmailOTPMessageTextRequest = {
  encode(message: GetDefaultVerifyEmailOTPMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyEmailOTPMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyEmailOTPMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultVerifyEmailOTPMessageTextRequest>): GetDefaultVerifyEmailOTPMessageTextRequest {
    return GetDefaultVerifyEmailOTPMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultVerifyEmailOTPMessageTextRequest>,
  ): GetDefaultVerifyEmailOTPMessageTextRequest {
    const message = createBaseGetDefaultVerifyEmailOTPMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultVerifyEmailOTPMessageTextResponse(): GetDefaultVerifyEmailOTPMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultVerifyEmailOTPMessageTextResponse = {
  encode(message: GetDefaultVerifyEmailOTPMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultVerifyEmailOTPMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultVerifyEmailOTPMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultVerifyEmailOTPMessageTextResponse>): GetDefaultVerifyEmailOTPMessageTextResponse {
    return GetDefaultVerifyEmailOTPMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultVerifyEmailOTPMessageTextResponse>,
  ): GetDefaultVerifyEmailOTPMessageTextResponse {
    const message = createBaseGetDefaultVerifyEmailOTPMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomVerifyEmailOTPMessageTextRequest(): SetCustomVerifyEmailOTPMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomVerifyEmailOTPMessageTextRequest = {
  encode(message: SetCustomVerifyEmailOTPMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomVerifyEmailOTPMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomVerifyEmailOTPMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomVerifyEmailOTPMessageTextRequest>): SetCustomVerifyEmailOTPMessageTextRequest {
    return SetCustomVerifyEmailOTPMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetCustomVerifyEmailOTPMessageTextRequest>,
  ): SetCustomVerifyEmailOTPMessageTextRequest {
    const message = createBaseSetCustomVerifyEmailOTPMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomVerifyEmailOTPMessageTextResponse(): SetCustomVerifyEmailOTPMessageTextResponse {
  return { details: undefined };
}

export const SetCustomVerifyEmailOTPMessageTextResponse = {
  encode(message: SetCustomVerifyEmailOTPMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomVerifyEmailOTPMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomVerifyEmailOTPMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomVerifyEmailOTPMessageTextResponse>): SetCustomVerifyEmailOTPMessageTextResponse {
    return SetCustomVerifyEmailOTPMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetCustomVerifyEmailOTPMessageTextResponse>,
  ): SetCustomVerifyEmailOTPMessageTextResponse {
    const message = createBaseSetCustomVerifyEmailOTPMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomVerifyEmailOTPMessageTextToDefaultRequest(): ResetCustomVerifyEmailOTPMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomVerifyEmailOTPMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomVerifyEmailOTPMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyEmailOTPMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomVerifyEmailOTPMessageTextToDefaultRequest>,
  ): ResetCustomVerifyEmailOTPMessageTextToDefaultRequest {
    return ResetCustomVerifyEmailOTPMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifyEmailOTPMessageTextToDefaultRequest>,
  ): ResetCustomVerifyEmailOTPMessageTextToDefaultRequest {
    const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomVerifyEmailOTPMessageTextToDefaultResponse(): ResetCustomVerifyEmailOTPMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomVerifyEmailOTPMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomVerifyEmailOTPMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomVerifyEmailOTPMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomVerifyEmailOTPMessageTextToDefaultResponse>,
  ): ResetCustomVerifyEmailOTPMessageTextToDefaultResponse {
    return ResetCustomVerifyEmailOTPMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomVerifyEmailOTPMessageTextToDefaultResponse>,
  ): ResetCustomVerifyEmailOTPMessageTextToDefaultResponse {
    const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomDomainClaimedMessageTextRequest(): GetCustomDomainClaimedMessageTextRequest {
  return { language: "" };
}

export const GetCustomDomainClaimedMessageTextRequest = {
  encode(message: GetCustomDomainClaimedMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomDomainClaimedMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDomainClaimedMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomDomainClaimedMessageTextRequest>): GetCustomDomainClaimedMessageTextRequest {
    return GetCustomDomainClaimedMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomDomainClaimedMessageTextRequest>): GetCustomDomainClaimedMessageTextRequest {
    const message = createBaseGetCustomDomainClaimedMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomDomainClaimedMessageTextResponse(): GetCustomDomainClaimedMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomDomainClaimedMessageTextResponse = {
  encode(message: GetCustomDomainClaimedMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomDomainClaimedMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomDomainClaimedMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomDomainClaimedMessageTextResponse>): GetCustomDomainClaimedMessageTextResponse {
    return GetCustomDomainClaimedMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomDomainClaimedMessageTextResponse>,
  ): GetCustomDomainClaimedMessageTextResponse {
    const message = createBaseGetCustomDomainClaimedMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultDomainClaimedMessageTextRequest(): GetDefaultDomainClaimedMessageTextRequest {
  return { language: "" };
}

export const GetDefaultDomainClaimedMessageTextRequest = {
  encode(message: GetDefaultDomainClaimedMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultDomainClaimedMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultDomainClaimedMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultDomainClaimedMessageTextRequest>): GetDefaultDomainClaimedMessageTextRequest {
    return GetDefaultDomainClaimedMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultDomainClaimedMessageTextRequest>,
  ): GetDefaultDomainClaimedMessageTextRequest {
    const message = createBaseGetDefaultDomainClaimedMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultDomainClaimedMessageTextResponse(): GetDefaultDomainClaimedMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultDomainClaimedMessageTextResponse = {
  encode(message: GetDefaultDomainClaimedMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultDomainClaimedMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultDomainClaimedMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultDomainClaimedMessageTextResponse>): GetDefaultDomainClaimedMessageTextResponse {
    return GetDefaultDomainClaimedMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultDomainClaimedMessageTextResponse>,
  ): GetDefaultDomainClaimedMessageTextResponse {
    const message = createBaseGetDefaultDomainClaimedMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomDomainClaimedMessageTextRequest(): SetCustomDomainClaimedMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomDomainClaimedMessageTextRequest = {
  encode(message: SetCustomDomainClaimedMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomDomainClaimedMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomDomainClaimedMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomDomainClaimedMessageTextRequest>): SetCustomDomainClaimedMessageTextRequest {
    return SetCustomDomainClaimedMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetCustomDomainClaimedMessageTextRequest>): SetCustomDomainClaimedMessageTextRequest {
    const message = createBaseSetCustomDomainClaimedMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomDomainClaimedMessageTextResponse(): SetCustomDomainClaimedMessageTextResponse {
  return { details: undefined };
}

export const SetCustomDomainClaimedMessageTextResponse = {
  encode(message: SetCustomDomainClaimedMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomDomainClaimedMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomDomainClaimedMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomDomainClaimedMessageTextResponse>): SetCustomDomainClaimedMessageTextResponse {
    return SetCustomDomainClaimedMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetCustomDomainClaimedMessageTextResponse>,
  ): SetCustomDomainClaimedMessageTextResponse {
    const message = createBaseSetCustomDomainClaimedMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomDomainClaimedMessageTextToDefaultRequest(): ResetCustomDomainClaimedMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomDomainClaimedMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomDomainClaimedMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>,
  ): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    return ResetCustomDomainClaimedMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>,
  ): ResetCustomDomainClaimedMessageTextToDefaultRequest {
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomDomainClaimedMessageTextToDefaultResponse(): ResetCustomDomainClaimedMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomDomainClaimedMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomDomainClaimedMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultResponse>,
  ): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    return ResetCustomDomainClaimedMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultResponse>,
  ): ResetCustomDomainClaimedMessageTextToDefaultResponse {
    const message = createBaseResetCustomDomainClaimedMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomPasswordlessRegistrationMessageTextRequest(): GetCustomPasswordlessRegistrationMessageTextRequest {
  return { language: "" };
}

export const GetCustomPasswordlessRegistrationMessageTextRequest = {
  encode(
    message: GetCustomPasswordlessRegistrationMessageTextRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordlessRegistrationMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>,
  ): GetCustomPasswordlessRegistrationMessageTextRequest {
    return GetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>,
  ): GetCustomPasswordlessRegistrationMessageTextRequest {
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomPasswordlessRegistrationMessageTextResponse(): GetCustomPasswordlessRegistrationMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomPasswordlessRegistrationMessageTextResponse = {
  encode(
    message: GetCustomPasswordlessRegistrationMessageTextResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordlessRegistrationMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<GetCustomPasswordlessRegistrationMessageTextResponse>,
  ): GetCustomPasswordlessRegistrationMessageTextResponse {
    return GetCustomPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomPasswordlessRegistrationMessageTextResponse>,
  ): GetCustomPasswordlessRegistrationMessageTextResponse {
    const message = createBaseGetCustomPasswordlessRegistrationMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPasswordlessRegistrationMessageTextRequest(): GetDefaultPasswordlessRegistrationMessageTextRequest {
  return { language: "" };
}

export const GetDefaultPasswordlessRegistrationMessageTextRequest = {
  encode(
    message: GetDefaultPasswordlessRegistrationMessageTextRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordlessRegistrationMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>,
  ): GetDefaultPasswordlessRegistrationMessageTextRequest {
    return GetDefaultPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>,
  ): GetDefaultPasswordlessRegistrationMessageTextRequest {
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultPasswordlessRegistrationMessageTextResponse(): GetDefaultPasswordlessRegistrationMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultPasswordlessRegistrationMessageTextResponse = {
  encode(
    message: GetDefaultPasswordlessRegistrationMessageTextResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordlessRegistrationMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextResponse>,
  ): GetDefaultPasswordlessRegistrationMessageTextResponse {
    return GetDefaultPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextResponse>,
  ): GetDefaultPasswordlessRegistrationMessageTextResponse {
    const message = createBaseGetDefaultPasswordlessRegistrationMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomPasswordlessRegistrationMessageTextRequest(): SetCustomPasswordlessRegistrationMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomPasswordlessRegistrationMessageTextRequest = {
  encode(
    message: SetCustomPasswordlessRegistrationMessageTextRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomPasswordlessRegistrationMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomPasswordlessRegistrationMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<SetCustomPasswordlessRegistrationMessageTextRequest>,
  ): SetCustomPasswordlessRegistrationMessageTextRequest {
    return SetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetCustomPasswordlessRegistrationMessageTextRequest>,
  ): SetCustomPasswordlessRegistrationMessageTextRequest {
    const message = createBaseSetCustomPasswordlessRegistrationMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomPasswordlessRegistrationMessageTextResponse(): SetCustomPasswordlessRegistrationMessageTextResponse {
  return { details: undefined };
}

export const SetCustomPasswordlessRegistrationMessageTextResponse = {
  encode(
    message: SetCustomPasswordlessRegistrationMessageTextResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomPasswordlessRegistrationMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomPasswordlessRegistrationMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<SetCustomPasswordlessRegistrationMessageTextResponse>,
  ): SetCustomPasswordlessRegistrationMessageTextResponse {
    return SetCustomPasswordlessRegistrationMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetCustomPasswordlessRegistrationMessageTextResponse>,
  ): SetCustomPasswordlessRegistrationMessageTextResponse {
    const message = createBaseSetCustomPasswordlessRegistrationMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest(): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    return ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest {
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse(): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    return ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>,
  ): ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse {
    const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetCustomPasswordChangeMessageTextRequest(): GetCustomPasswordChangeMessageTextRequest {
  return { language: "" };
}

export const GetCustomPasswordChangeMessageTextRequest = {
  encode(message: GetCustomPasswordChangeMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordChangeMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordChangeMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomPasswordChangeMessageTextRequest>): GetCustomPasswordChangeMessageTextRequest {
    return GetCustomPasswordChangeMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomPasswordChangeMessageTextRequest>,
  ): GetCustomPasswordChangeMessageTextRequest {
    const message = createBaseGetCustomPasswordChangeMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetCustomPasswordChangeMessageTextResponse(): GetCustomPasswordChangeMessageTextResponse {
  return { customText: undefined };
}

export const GetCustomPasswordChangeMessageTextResponse = {
  encode(message: GetCustomPasswordChangeMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetCustomPasswordChangeMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomPasswordChangeMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetCustomPasswordChangeMessageTextResponse>): GetCustomPasswordChangeMessageTextResponse {
    return GetCustomPasswordChangeMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetCustomPasswordChangeMessageTextResponse>,
  ): GetCustomPasswordChangeMessageTextResponse {
    const message = createBaseGetCustomPasswordChangeMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseGetDefaultPasswordChangeMessageTextRequest(): GetDefaultPasswordChangeMessageTextRequest {
  return { language: "" };
}

export const GetDefaultPasswordChangeMessageTextRequest = {
  encode(message: GetDefaultPasswordChangeMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordChangeMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordChangeMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultPasswordChangeMessageTextRequest>): GetDefaultPasswordChangeMessageTextRequest {
    return GetDefaultPasswordChangeMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultPasswordChangeMessageTextRequest>,
  ): GetDefaultPasswordChangeMessageTextRequest {
    const message = createBaseGetDefaultPasswordChangeMessageTextRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseGetDefaultPasswordChangeMessageTextResponse(): GetDefaultPasswordChangeMessageTextResponse {
  return { customText: undefined };
}

export const GetDefaultPasswordChangeMessageTextResponse = {
  encode(message: GetDefaultPasswordChangeMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.customText !== undefined) {
      MessageCustomText.encode(message.customText, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDefaultPasswordChangeMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDefaultPasswordChangeMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.customText = MessageCustomText.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetDefaultPasswordChangeMessageTextResponse>): GetDefaultPasswordChangeMessageTextResponse {
    return GetDefaultPasswordChangeMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetDefaultPasswordChangeMessageTextResponse>,
  ): GetDefaultPasswordChangeMessageTextResponse {
    const message = createBaseGetDefaultPasswordChangeMessageTextResponse();
    message.customText = (object.customText !== undefined && object.customText !== null)
      ? MessageCustomText.fromPartial(object.customText)
      : undefined;
    return message;
  },
};

function createBaseSetCustomPasswordChangeMessageTextRequest(): SetCustomPasswordChangeMessageTextRequest {
  return {
    language: "",
    title: "",
    preHeader: "",
    subject: "",
    greeting: "",
    text: "",
    buttonText: "",
    footerText: "",
  };
}

export const SetCustomPasswordChangeMessageTextRequest = {
  encode(message: SetCustomPasswordChangeMessageTextRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.preHeader !== "") {
      writer.uint32(26).string(message.preHeader);
    }
    if (message.subject !== "") {
      writer.uint32(34).string(message.subject);
    }
    if (message.greeting !== "") {
      writer.uint32(42).string(message.greeting);
    }
    if (message.text !== "") {
      writer.uint32(50).string(message.text);
    }
    if (message.buttonText !== "") {
      writer.uint32(58).string(message.buttonText);
    }
    if (message.footerText !== "") {
      writer.uint32(66).string(message.footerText);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomPasswordChangeMessageTextRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomPasswordChangeMessageTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.preHeader = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.subject = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.greeting = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.text = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.buttonText = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.footerText = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomPasswordChangeMessageTextRequest>): SetCustomPasswordChangeMessageTextRequest {
    return SetCustomPasswordChangeMessageTextRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetCustomPasswordChangeMessageTextRequest>,
  ): SetCustomPasswordChangeMessageTextRequest {
    const message = createBaseSetCustomPasswordChangeMessageTextRequest();
    message.language = object.language ?? "";
    message.title = object.title ?? "";
    message.preHeader = object.preHeader ?? "";
    message.subject = object.subject ?? "";
    message.greeting = object.greeting ?? "";
    message.text = object.text ?? "";
    message.buttonText = object.buttonText ?? "";
    message.footerText = object.footerText ?? "";
    return message;
  },
};

function createBaseSetCustomPasswordChangeMessageTextResponse(): SetCustomPasswordChangeMessageTextResponse {
  return { details: undefined };
}

export const SetCustomPasswordChangeMessageTextResponse = {
  encode(message: SetCustomPasswordChangeMessageTextResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetCustomPasswordChangeMessageTextResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetCustomPasswordChangeMessageTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetCustomPasswordChangeMessageTextResponse>): SetCustomPasswordChangeMessageTextResponse {
    return SetCustomPasswordChangeMessageTextResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<SetCustomPasswordChangeMessageTextResponse>,
  ): SetCustomPasswordChangeMessageTextResponse {
    const message = createBaseSetCustomPasswordChangeMessageTextResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseResetCustomPasswordChangeMessageTextToDefaultRequest(): ResetCustomPasswordChangeMessageTextToDefaultRequest {
  return { language: "" };
}

export const ResetCustomPasswordChangeMessageTextToDefaultRequest = {
  encode(
    message: ResetCustomPasswordChangeMessageTextToDefaultRequest,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>,
  ): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    return ResetCustomPasswordChangeMessageTextToDefaultRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>,
  ): ResetCustomPasswordChangeMessageTextToDefaultRequest {
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultRequest();
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseResetCustomPasswordChangeMessageTextToDefaultResponse(): ResetCustomPasswordChangeMessageTextToDefaultResponse {
  return { details: undefined };
}

export const ResetCustomPasswordChangeMessageTextToDefaultResponse = {
  encode(
    message: ResetCustomPasswordChangeMessageTextToDefaultResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultResponse>,
  ): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    return ResetCustomPasswordChangeMessageTextToDefaultResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultResponse>,
  ): ResetCustomPasswordChangeMessageTextToDefaultResponse {
    const message = createBaseResetCustomPasswordChangeMessageTextToDefaultResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetOrgIDPByIDRequest(): GetOrgIDPByIDRequest {
  return { id: "" };
}

export const GetOrgIDPByIDRequest = {
  encode(message: GetOrgIDPByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgIDPByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgIDPByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetOrgIDPByIDRequest>): GetOrgIDPByIDRequest {
    return GetOrgIDPByIDRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOrgIDPByIDRequest>): GetOrgIDPByIDRequest {
    const message = createBaseGetOrgIDPByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetOrgIDPByIDResponse(): GetOrgIDPByIDResponse {
  return { idp: undefined };
}

export const GetOrgIDPByIDResponse = {
  encode(message: GetOrgIDPByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idp !== undefined) {
      IDP.encode(message.idp, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrgIDPByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrgIDPByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idp = IDP.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetOrgIDPByIDResponse>): GetOrgIDPByIDResponse {
    return GetOrgIDPByIDResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetOrgIDPByIDResponse>): GetOrgIDPByIDResponse {
    const message = createBaseGetOrgIDPByIDResponse();
    message.idp = (object.idp !== undefined && object.idp !== null) ? IDP.fromPartial(object.idp) : undefined;
    return message;
  },
};

function createBaseListOrgIDPsRequest(): ListOrgIDPsRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListOrgIDPsRequest = {
  encode(message: ListOrgIDPsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      IDPQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgIDPsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgIDPsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(IDPQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListOrgIDPsRequest>): ListOrgIDPsRequest {
    return ListOrgIDPsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgIDPsRequest>): ListOrgIDPsRequest {
    const message = createBaseListOrgIDPsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => IDPQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseIDPQuery(): IDPQuery {
  return { idpIdQuery: undefined, idpNameQuery: undefined, ownerTypeQuery: undefined };
}

export const IDPQuery = {
  encode(message: IDPQuery, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpIdQuery !== undefined) {
      IDPIDQuery.encode(message.idpIdQuery, writer.uint32(10).fork()).ldelim();
    }
    if (message.idpNameQuery !== undefined) {
      IDPNameQuery.encode(message.idpNameQuery, writer.uint32(18).fork()).ldelim();
    }
    if (message.ownerTypeQuery !== undefined) {
      IDPOwnerTypeQuery.encode(message.ownerTypeQuery, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IDPQuery {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIDPQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpIdQuery = IDPIDQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpNameQuery = IDPNameQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ownerTypeQuery = IDPOwnerTypeQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<IDPQuery>): IDPQuery {
    return IDPQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IDPQuery>): IDPQuery {
    const message = createBaseIDPQuery();
    message.idpIdQuery = (object.idpIdQuery !== undefined && object.idpIdQuery !== null)
      ? IDPIDQuery.fromPartial(object.idpIdQuery)
      : undefined;
    message.idpNameQuery = (object.idpNameQuery !== undefined && object.idpNameQuery !== null)
      ? IDPNameQuery.fromPartial(object.idpNameQuery)
      : undefined;
    message.ownerTypeQuery = (object.ownerTypeQuery !== undefined && object.ownerTypeQuery !== null)
      ? IDPOwnerTypeQuery.fromPartial(object.ownerTypeQuery)
      : undefined;
    return message;
  },
};

function createBaseListOrgIDPsResponse(): ListOrgIDPsResponse {
  return { details: undefined, sortingColumn: 0, result: [] };
}

export const ListOrgIDPsResponse = {
  encode(message: ListOrgIDPsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.result) {
      IDP.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrgIDPsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrgIDPsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(IDP.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListOrgIDPsResponse>): ListOrgIDPsResponse {
    return ListOrgIDPsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListOrgIDPsResponse>): ListOrgIDPsResponse {
    const message = createBaseListOrgIDPsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.result = object.result?.map((e) => IDP.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAddOrgOIDCIDPRequest(): AddOrgOIDCIDPRequest {
  return {
    name: "",
    stylingType: 0,
    clientId: "",
    clientSecret: "",
    issuer: "",
    scopes: [],
    displayNameMapping: 0,
    usernameMapping: 0,
    autoRegister: false,
  };
}

export const AddOrgOIDCIDPRequest = {
  encode(message: AddOrgOIDCIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.stylingType !== 0) {
      writer.uint32(16).int32(message.stylingType);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.issuer !== "") {
      writer.uint32(42).string(message.issuer);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.displayNameMapping !== 0) {
      writer.uint32(56).int32(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      writer.uint32(64).int32(message.usernameMapping);
    }
    if (message.autoRegister === true) {
      writer.uint32(72).bool(message.autoRegister);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgOIDCIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgOIDCIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.stylingType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.displayNameMapping = reader.int32() as any;
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.usernameMapping = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.autoRegister = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddOrgOIDCIDPRequest>): AddOrgOIDCIDPRequest {
    return AddOrgOIDCIDPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOrgOIDCIDPRequest>): AddOrgOIDCIDPRequest {
    const message = createBaseAddOrgOIDCIDPRequest();
    message.name = object.name ?? "";
    message.stylingType = object.stylingType ?? 0;
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.issuer = object.issuer ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.displayNameMapping = object.displayNameMapping ?? 0;
    message.usernameMapping = object.usernameMapping ?? 0;
    message.autoRegister = object.autoRegister ?? false;
    return message;
  },
};

function createBaseAddOrgOIDCIDPResponse(): AddOrgOIDCIDPResponse {
  return { details: undefined, idpId: "" };
}

export const AddOrgOIDCIDPResponse = {
  encode(message: AddOrgOIDCIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.idpId !== "") {
      writer.uint32(18).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgOIDCIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgOIDCIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddOrgOIDCIDPResponse>): AddOrgOIDCIDPResponse {
    return AddOrgOIDCIDPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOrgOIDCIDPResponse>): AddOrgOIDCIDPResponse {
    const message = createBaseAddOrgOIDCIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseAddOrgJWTIDPRequest(): AddOrgJWTIDPRequest {
  return {
    name: "",
    stylingType: 0,
    jwtEndpoint: "",
    issuer: "",
    keysEndpoint: "",
    headerName: "",
    autoRegister: false,
  };
}

export const AddOrgJWTIDPRequest = {
  encode(message: AddOrgJWTIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.stylingType !== 0) {
      writer.uint32(16).int32(message.stylingType);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(26).string(message.jwtEndpoint);
    }
    if (message.issuer !== "") {
      writer.uint32(34).string(message.issuer);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(42).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(50).string(message.headerName);
    }
    if (message.autoRegister === true) {
      writer.uint32(56).bool(message.autoRegister);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgJWTIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgJWTIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.stylingType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.headerName = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.autoRegister = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddOrgJWTIDPRequest>): AddOrgJWTIDPRequest {
    return AddOrgJWTIDPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOrgJWTIDPRequest>): AddOrgJWTIDPRequest {
    const message = createBaseAddOrgJWTIDPRequest();
    message.name = object.name ?? "";
    message.stylingType = object.stylingType ?? 0;
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.issuer = object.issuer ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    message.autoRegister = object.autoRegister ?? false;
    return message;
  },
};

function createBaseAddOrgJWTIDPResponse(): AddOrgJWTIDPResponse {
  return { details: undefined, idpId: "" };
}

export const AddOrgJWTIDPResponse = {
  encode(message: AddOrgJWTIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.idpId !== "") {
      writer.uint32(18).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddOrgJWTIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddOrgJWTIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddOrgJWTIDPResponse>): AddOrgJWTIDPResponse {
    return AddOrgJWTIDPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddOrgJWTIDPResponse>): AddOrgJWTIDPResponse {
    const message = createBaseAddOrgJWTIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseDeactivateOrgIDPRequest(): DeactivateOrgIDPRequest {
  return { idpId: "" };
}

export const DeactivateOrgIDPRequest = {
  encode(message: DeactivateOrgIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateOrgIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateOrgIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateOrgIDPRequest>): DeactivateOrgIDPRequest {
    return DeactivateOrgIDPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateOrgIDPRequest>): DeactivateOrgIDPRequest {
    const message = createBaseDeactivateOrgIDPRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseDeactivateOrgIDPResponse(): DeactivateOrgIDPResponse {
  return { details: undefined };
}

export const DeactivateOrgIDPResponse = {
  encode(message: DeactivateOrgIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateOrgIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateOrgIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateOrgIDPResponse>): DeactivateOrgIDPResponse {
    return DeactivateOrgIDPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateOrgIDPResponse>): DeactivateOrgIDPResponse {
    const message = createBaseDeactivateOrgIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateOrgIDPRequest(): ReactivateOrgIDPRequest {
  return { idpId: "" };
}

export const ReactivateOrgIDPRequest = {
  encode(message: ReactivateOrgIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateOrgIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateOrgIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateOrgIDPRequest>): ReactivateOrgIDPRequest {
    return ReactivateOrgIDPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateOrgIDPRequest>): ReactivateOrgIDPRequest {
    const message = createBaseReactivateOrgIDPRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseReactivateOrgIDPResponse(): ReactivateOrgIDPResponse {
  return { details: undefined };
}

export const ReactivateOrgIDPResponse = {
  encode(message: ReactivateOrgIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateOrgIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateOrgIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateOrgIDPResponse>): ReactivateOrgIDPResponse {
    return ReactivateOrgIDPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateOrgIDPResponse>): ReactivateOrgIDPResponse {
    const message = createBaseReactivateOrgIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRemoveOrgIDPRequest(): RemoveOrgIDPRequest {
  return { idpId: "" };
}

export const RemoveOrgIDPRequest = {
  encode(message: RemoveOrgIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveOrgIDPRequest>): RemoveOrgIDPRequest {
    return RemoveOrgIDPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveOrgIDPRequest>): RemoveOrgIDPRequest {
    const message = createBaseRemoveOrgIDPRequest();
    message.idpId = object.idpId ?? "";
    return message;
  },
};

function createBaseRemoveOrgIDPResponse(): RemoveOrgIDPResponse {
  return {};
}

export const RemoveOrgIDPResponse = {
  encode(_: RemoveOrgIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrgIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveOrgIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RemoveOrgIDPResponse>): RemoveOrgIDPResponse {
    return RemoveOrgIDPResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveOrgIDPResponse>): RemoveOrgIDPResponse {
    const message = createBaseRemoveOrgIDPResponse();
    return message;
  },
};

function createBaseUpdateOrgIDPRequest(): UpdateOrgIDPRequest {
  return { idpId: "", name: "", stylingType: 0, autoRegister: false };
}

export const UpdateOrgIDPRequest = {
  encode(message: UpdateOrgIDPRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.stylingType !== 0) {
      writer.uint32(24).int32(message.stylingType);
    }
    if (message.autoRegister === true) {
      writer.uint32(32).bool(message.autoRegister);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIDPRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIDPRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.stylingType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.autoRegister = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateOrgIDPRequest>): UpdateOrgIDPRequest {
    return UpdateOrgIDPRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOrgIDPRequest>): UpdateOrgIDPRequest {
    const message = createBaseUpdateOrgIDPRequest();
    message.idpId = object.idpId ?? "";
    message.name = object.name ?? "";
    message.stylingType = object.stylingType ?? 0;
    message.autoRegister = object.autoRegister ?? false;
    return message;
  },
};

function createBaseUpdateOrgIDPResponse(): UpdateOrgIDPResponse {
  return { details: undefined };
}

export const UpdateOrgIDPResponse = {
  encode(message: UpdateOrgIDPResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIDPResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIDPResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateOrgIDPResponse>): UpdateOrgIDPResponse {
    return UpdateOrgIDPResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOrgIDPResponse>): UpdateOrgIDPResponse {
    const message = createBaseUpdateOrgIDPResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateOrgIDPOIDCConfigRequest(): UpdateOrgIDPOIDCConfigRequest {
  return {
    idpId: "",
    clientId: "",
    clientSecret: "",
    issuer: "",
    scopes: [],
    displayNameMapping: 0,
    usernameMapping: 0,
  };
}

export const UpdateOrgIDPOIDCConfigRequest = {
  encode(message: UpdateOrgIDPOIDCConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.issuer !== "") {
      writer.uint32(34).string(message.issuer);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.displayNameMapping !== 0) {
      writer.uint32(48).int32(message.displayNameMapping);
    }
    if (message.usernameMapping !== 0) {
      writer.uint32(56).int32(message.usernameMapping);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIDPOIDCConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIDPOIDCConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.displayNameMapping = reader.int32() as any;
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.usernameMapping = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateOrgIDPOIDCConfigRequest>): UpdateOrgIDPOIDCConfigRequest {
    return UpdateOrgIDPOIDCConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOrgIDPOIDCConfigRequest>): UpdateOrgIDPOIDCConfigRequest {
    const message = createBaseUpdateOrgIDPOIDCConfigRequest();
    message.idpId = object.idpId ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.issuer = object.issuer ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.displayNameMapping = object.displayNameMapping ?? 0;
    message.usernameMapping = object.usernameMapping ?? 0;
    return message;
  },
};

function createBaseUpdateOrgIDPOIDCConfigResponse(): UpdateOrgIDPOIDCConfigResponse {
  return { details: undefined };
}

export const UpdateOrgIDPOIDCConfigResponse = {
  encode(message: UpdateOrgIDPOIDCConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIDPOIDCConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIDPOIDCConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateOrgIDPOIDCConfigResponse>): UpdateOrgIDPOIDCConfigResponse {
    return UpdateOrgIDPOIDCConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOrgIDPOIDCConfigResponse>): UpdateOrgIDPOIDCConfigResponse {
    const message = createBaseUpdateOrgIDPOIDCConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseUpdateOrgIDPJWTConfigRequest(): UpdateOrgIDPJWTConfigRequest {
  return { idpId: "", jwtEndpoint: "", issuer: "", keysEndpoint: "", headerName: "" };
}

export const UpdateOrgIDPJWTConfigRequest = {
  encode(message: UpdateOrgIDPJWTConfigRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpId !== "") {
      writer.uint32(10).string(message.idpId);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(18).string(message.jwtEndpoint);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(34).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(42).string(message.headerName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIDPJWTConfigRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIDPJWTConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.headerName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateOrgIDPJWTConfigRequest>): UpdateOrgIDPJWTConfigRequest {
    return UpdateOrgIDPJWTConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOrgIDPJWTConfigRequest>): UpdateOrgIDPJWTConfigRequest {
    const message = createBaseUpdateOrgIDPJWTConfigRequest();
    message.idpId = object.idpId ?? "";
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.issuer = object.issuer ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    return message;
  },
};

function createBaseUpdateOrgIDPJWTConfigResponse(): UpdateOrgIDPJWTConfigResponse {
  return { details: undefined };
}

export const UpdateOrgIDPJWTConfigResponse = {
  encode(message: UpdateOrgIDPJWTConfigResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrgIDPJWTConfigResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateOrgIDPJWTConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateOrgIDPJWTConfigResponse>): UpdateOrgIDPJWTConfigResponse {
    return UpdateOrgIDPJWTConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateOrgIDPJWTConfigResponse>): UpdateOrgIDPJWTConfigResponse {
    const message = createBaseUpdateOrgIDPJWTConfigResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListProvidersRequest(): ListProvidersRequest {
  return { query: undefined, queries: [] };
}

export const ListProvidersRequest = {
  encode(message: ListProvidersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.queries) {
      ProviderQuery.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProvidersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.queries.push(ProviderQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProvidersRequest>): ListProvidersRequest {
    return ListProvidersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProvidersRequest>): ListProvidersRequest {
    const message = createBaseListProvidersRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.queries = object.queries?.map((e) => ProviderQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProviderQuery(): ProviderQuery {
  return { idpIdQuery: undefined, idpNameQuery: undefined, ownerTypeQuery: undefined };
}

export const ProviderQuery = {
  encode(message: ProviderQuery, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idpIdQuery !== undefined) {
      IDPIDQuery.encode(message.idpIdQuery, writer.uint32(10).fork()).ldelim();
    }
    if (message.idpNameQuery !== undefined) {
      IDPNameQuery.encode(message.idpNameQuery, writer.uint32(18).fork()).ldelim();
    }
    if (message.ownerTypeQuery !== undefined) {
      IDPOwnerTypeQuery.encode(message.ownerTypeQuery, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ProviderQuery {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProviderQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idpIdQuery = IDPIDQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.idpNameQuery = IDPNameQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ownerTypeQuery = IDPOwnerTypeQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ProviderQuery>): ProviderQuery {
    return ProviderQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProviderQuery>): ProviderQuery {
    const message = createBaseProviderQuery();
    message.idpIdQuery = (object.idpIdQuery !== undefined && object.idpIdQuery !== null)
      ? IDPIDQuery.fromPartial(object.idpIdQuery)
      : undefined;
    message.idpNameQuery = (object.idpNameQuery !== undefined && object.idpNameQuery !== null)
      ? IDPNameQuery.fromPartial(object.idpNameQuery)
      : undefined;
    message.ownerTypeQuery = (object.ownerTypeQuery !== undefined && object.ownerTypeQuery !== null)
      ? IDPOwnerTypeQuery.fromPartial(object.ownerTypeQuery)
      : undefined;
    return message;
  },
};

function createBaseListProvidersResponse(): ListProvidersResponse {
  return { details: undefined, result: [] };
}

export const ListProvidersResponse = {
  encode(message: ListProvidersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.result) {
      Provider.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListProvidersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.result.push(Provider.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListProvidersResponse>): ListProvidersResponse {
    return ListProvidersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProvidersResponse>): ListProvidersResponse {
    const message = createBaseListProvidersResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.result = object.result?.map((e) => Provider.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetProviderByIDRequest(): GetProviderByIDRequest {
  return { id: "" };
}

export const GetProviderByIDRequest = {
  encode(message: GetProviderByIDRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProviderByIDRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProviderByIDRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetProviderByIDRequest>): GetProviderByIDRequest {
    return GetProviderByIDRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProviderByIDRequest>): GetProviderByIDRequest {
    const message = createBaseGetProviderByIDRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetProviderByIDResponse(): GetProviderByIDResponse {
  return { idp: undefined };
}

export const GetProviderByIDResponse = {
  encode(message: GetProviderByIDResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.idp !== undefined) {
      Provider.encode(message.idp, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetProviderByIDResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProviderByIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idp = Provider.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetProviderByIDResponse>): GetProviderByIDResponse {
    return GetProviderByIDResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProviderByIDResponse>): GetProviderByIDResponse {
    const message = createBaseGetProviderByIDResponse();
    message.idp = (object.idp !== undefined && object.idp !== null) ? Provider.fromPartial(object.idp) : undefined;
    return message;
  },
};

function createBaseAddGenericOAuthProviderRequest(): AddGenericOAuthProviderRequest {
  return {
    name: "",
    clientId: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    idAttribute: "",
    providerOptions: undefined,
  };
}

export const AddGenericOAuthProviderRequest = {
  encode(message: AddGenericOAuthProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(34).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(42).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(50).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.idAttribute !== "") {
      writer.uint32(66).string(message.idAttribute);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGenericOAuthProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOAuthProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.idAttribute = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGenericOAuthProviderRequest>): AddGenericOAuthProviderRequest {
    return AddGenericOAuthProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGenericOAuthProviderRequest>): AddGenericOAuthProviderRequest {
    const message = createBaseAddGenericOAuthProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.idAttribute = object.idAttribute ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGenericOAuthProviderResponse(): AddGenericOAuthProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGenericOAuthProviderResponse = {
  encode(message: AddGenericOAuthProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGenericOAuthProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOAuthProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGenericOAuthProviderResponse>): AddGenericOAuthProviderResponse {
    return AddGenericOAuthProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGenericOAuthProviderResponse>): AddGenericOAuthProviderResponse {
    const message = createBaseAddGenericOAuthProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGenericOAuthProviderRequest(): UpdateGenericOAuthProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    idAttribute: "",
    providerOptions: undefined,
  };
}

export const UpdateGenericOAuthProviderRequest = {
  encode(message: UpdateGenericOAuthProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(42).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(50).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(58).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(66).string(v!);
    }
    if (message.idAttribute !== "") {
      writer.uint32(74).string(message.idAttribute);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(82).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGenericOAuthProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOAuthProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.idAttribute = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGenericOAuthProviderRequest>): UpdateGenericOAuthProviderRequest {
    return UpdateGenericOAuthProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGenericOAuthProviderRequest>): UpdateGenericOAuthProviderRequest {
    const message = createBaseUpdateGenericOAuthProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.idAttribute = object.idAttribute ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGenericOAuthProviderResponse(): UpdateGenericOAuthProviderResponse {
  return { details: undefined };
}

export const UpdateGenericOAuthProviderResponse = {
  encode(message: UpdateGenericOAuthProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGenericOAuthProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOAuthProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGenericOAuthProviderResponse>): UpdateGenericOAuthProviderResponse {
    return UpdateGenericOAuthProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGenericOAuthProviderResponse>): UpdateGenericOAuthProviderResponse {
    const message = createBaseUpdateGenericOAuthProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGenericOIDCProviderRequest(): AddGenericOIDCProviderRequest {
  return {
    name: "",
    issuer: "",
    clientId: "",
    clientSecret: "",
    scopes: [],
    providerOptions: undefined,
    isIdTokenMapping: false,
  };
}

export const AddGenericOIDCProviderRequest = {
  encode(message: AddGenericOIDCProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    if (message.isIdTokenMapping === true) {
      writer.uint32(56).bool(message.isIdTokenMapping);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGenericOIDCProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOIDCProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.isIdTokenMapping = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGenericOIDCProviderRequest>): AddGenericOIDCProviderRequest {
    return AddGenericOIDCProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGenericOIDCProviderRequest>): AddGenericOIDCProviderRequest {
    const message = createBaseAddGenericOIDCProviderRequest();
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    message.isIdTokenMapping = object.isIdTokenMapping ?? false;
    return message;
  },
};

function createBaseAddGenericOIDCProviderResponse(): AddGenericOIDCProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGenericOIDCProviderResponse = {
  encode(message: AddGenericOIDCProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGenericOIDCProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGenericOIDCProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGenericOIDCProviderResponse>): AddGenericOIDCProviderResponse {
    return AddGenericOIDCProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGenericOIDCProviderResponse>): AddGenericOIDCProviderResponse {
    const message = createBaseAddGenericOIDCProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGenericOIDCProviderRequest(): UpdateGenericOIDCProviderRequest {
  return {
    id: "",
    name: "",
    issuer: "",
    clientId: "",
    clientSecret: "",
    scopes: [],
    providerOptions: undefined,
    isIdTokenMapping: false,
  };
}

export const UpdateGenericOIDCProviderRequest = {
  encode(message: UpdateGenericOIDCProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.clientId !== "") {
      writer.uint32(34).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(42).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    if (message.isIdTokenMapping === true) {
      writer.uint32(64).bool(message.isIdTokenMapping);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGenericOIDCProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOIDCProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.isIdTokenMapping = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGenericOIDCProviderRequest>): UpdateGenericOIDCProviderRequest {
    return UpdateGenericOIDCProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGenericOIDCProviderRequest>): UpdateGenericOIDCProviderRequest {
    const message = createBaseUpdateGenericOIDCProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    message.isIdTokenMapping = object.isIdTokenMapping ?? false;
    return message;
  },
};

function createBaseUpdateGenericOIDCProviderResponse(): UpdateGenericOIDCProviderResponse {
  return { details: undefined };
}

export const UpdateGenericOIDCProviderResponse = {
  encode(message: UpdateGenericOIDCProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGenericOIDCProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGenericOIDCProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGenericOIDCProviderResponse>): UpdateGenericOIDCProviderResponse {
    return UpdateGenericOIDCProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGenericOIDCProviderResponse>): UpdateGenericOIDCProviderResponse {
    const message = createBaseUpdateGenericOIDCProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseMigrateGenericOIDCProviderRequest(): MigrateGenericOIDCProviderRequest {
  return { id: "", azure: undefined, google: undefined };
}

export const MigrateGenericOIDCProviderRequest = {
  encode(message: MigrateGenericOIDCProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.azure !== undefined) {
      AddAzureADProviderRequest.encode(message.azure, writer.uint32(18).fork()).ldelim();
    }
    if (message.google !== undefined) {
      AddGoogleProviderRequest.encode(message.google, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MigrateGenericOIDCProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateGenericOIDCProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.azure = AddAzureADProviderRequest.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.google = AddGoogleProviderRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MigrateGenericOIDCProviderRequest>): MigrateGenericOIDCProviderRequest {
    return MigrateGenericOIDCProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MigrateGenericOIDCProviderRequest>): MigrateGenericOIDCProviderRequest {
    const message = createBaseMigrateGenericOIDCProviderRequest();
    message.id = object.id ?? "";
    message.azure = (object.azure !== undefined && object.azure !== null)
      ? AddAzureADProviderRequest.fromPartial(object.azure)
      : undefined;
    message.google = (object.google !== undefined && object.google !== null)
      ? AddGoogleProviderRequest.fromPartial(object.google)
      : undefined;
    return message;
  },
};

function createBaseMigrateGenericOIDCProviderResponse(): MigrateGenericOIDCProviderResponse {
  return { details: undefined };
}

export const MigrateGenericOIDCProviderResponse = {
  encode(message: MigrateGenericOIDCProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MigrateGenericOIDCProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateGenericOIDCProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MigrateGenericOIDCProviderResponse>): MigrateGenericOIDCProviderResponse {
    return MigrateGenericOIDCProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MigrateGenericOIDCProviderResponse>): MigrateGenericOIDCProviderResponse {
    const message = createBaseMigrateGenericOIDCProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddJWTProviderRequest(): AddJWTProviderRequest {
  return { name: "", issuer: "", jwtEndpoint: "", keysEndpoint: "", headerName: "", providerOptions: undefined };
}

export const AddJWTProviderRequest = {
  encode(message: AddJWTProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(26).string(message.jwtEndpoint);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(34).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(42).string(message.headerName);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddJWTProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddJWTProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.headerName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddJWTProviderRequest>): AddJWTProviderRequest {
    return AddJWTProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddJWTProviderRequest>): AddJWTProviderRequest {
    const message = createBaseAddJWTProviderRequest();
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddJWTProviderResponse(): AddJWTProviderResponse {
  return { details: undefined, id: "" };
}

export const AddJWTProviderResponse = {
  encode(message: AddJWTProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddJWTProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddJWTProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddJWTProviderResponse>): AddJWTProviderResponse {
    return AddJWTProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddJWTProviderResponse>): AddJWTProviderResponse {
    const message = createBaseAddJWTProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateJWTProviderRequest(): UpdateJWTProviderRequest {
  return {
    id: "",
    name: "",
    issuer: "",
    jwtEndpoint: "",
    keysEndpoint: "",
    headerName: "",
    providerOptions: undefined,
  };
}

export const UpdateJWTProviderRequest = {
  encode(message: UpdateJWTProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.jwtEndpoint !== "") {
      writer.uint32(34).string(message.jwtEndpoint);
    }
    if (message.keysEndpoint !== "") {
      writer.uint32(42).string(message.keysEndpoint);
    }
    if (message.headerName !== "") {
      writer.uint32(50).string(message.headerName);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateJWTProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJWTProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jwtEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.keysEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.headerName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateJWTProviderRequest>): UpdateJWTProviderRequest {
    return UpdateJWTProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateJWTProviderRequest>): UpdateJWTProviderRequest {
    const message = createBaseUpdateJWTProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.issuer = object.issuer ?? "";
    message.jwtEndpoint = object.jwtEndpoint ?? "";
    message.keysEndpoint = object.keysEndpoint ?? "";
    message.headerName = object.headerName ?? "";
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateJWTProviderResponse(): UpdateJWTProviderResponse {
  return { details: undefined };
}

export const UpdateJWTProviderResponse = {
  encode(message: UpdateJWTProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateJWTProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJWTProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateJWTProviderResponse>): UpdateJWTProviderResponse {
    return UpdateJWTProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateJWTProviderResponse>): UpdateJWTProviderResponse {
    const message = createBaseUpdateJWTProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddAzureADProviderRequest(): AddAzureADProviderRequest {
  return {
    name: "",
    clientId: "",
    clientSecret: "",
    tenant: undefined,
    emailVerified: false,
    scopes: [],
    providerOptions: undefined,
  };
}

export const AddAzureADProviderRequest = {
  encode(message: AddAzureADProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.tenant !== undefined) {
      AzureADTenant.encode(message.tenant, writer.uint32(34).fork()).ldelim();
    }
    if (message.emailVerified === true) {
      writer.uint32(40).bool(message.emailVerified);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAzureADProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAzureADProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tenant = AzureADTenant.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.emailVerified = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddAzureADProviderRequest>): AddAzureADProviderRequest {
    return AddAzureADProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAzureADProviderRequest>): AddAzureADProviderRequest {
    const message = createBaseAddAzureADProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.tenant = (object.tenant !== undefined && object.tenant !== null)
      ? AzureADTenant.fromPartial(object.tenant)
      : undefined;
    message.emailVerified = object.emailVerified ?? false;
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddAzureADProviderResponse(): AddAzureADProviderResponse {
  return { details: undefined, id: "" };
}

export const AddAzureADProviderResponse = {
  encode(message: AddAzureADProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAzureADProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAzureADProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddAzureADProviderResponse>): AddAzureADProviderResponse {
    return AddAzureADProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAzureADProviderResponse>): AddAzureADProviderResponse {
    const message = createBaseAddAzureADProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateAzureADProviderRequest(): UpdateAzureADProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    clientSecret: "",
    tenant: undefined,
    emailVerified: false,
    scopes: [],
    providerOptions: undefined,
  };
}

export const UpdateAzureADProviderRequest = {
  encode(message: UpdateAzureADProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.tenant !== undefined) {
      AzureADTenant.encode(message.tenant, writer.uint32(42).fork()).ldelim();
    }
    if (message.emailVerified === true) {
      writer.uint32(48).bool(message.emailVerified);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAzureADProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAzureADProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tenant = AzureADTenant.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.emailVerified = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateAzureADProviderRequest>): UpdateAzureADProviderRequest {
    return UpdateAzureADProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAzureADProviderRequest>): UpdateAzureADProviderRequest {
    const message = createBaseUpdateAzureADProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.tenant = (object.tenant !== undefined && object.tenant !== null)
      ? AzureADTenant.fromPartial(object.tenant)
      : undefined;
    message.emailVerified = object.emailVerified ?? false;
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateAzureADProviderResponse(): UpdateAzureADProviderResponse {
  return { details: undefined };
}

export const UpdateAzureADProviderResponse = {
  encode(message: UpdateAzureADProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAzureADProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAzureADProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateAzureADProviderResponse>): UpdateAzureADProviderResponse {
    return UpdateAzureADProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAzureADProviderResponse>): UpdateAzureADProviderResponse {
    const message = createBaseUpdateAzureADProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubProviderRequest(): AddGitHubProviderRequest {
  return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGitHubProviderRequest = {
  encode(message: AddGitHubProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitHubProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGitHubProviderRequest>): AddGitHubProviderRequest {
    return AddGitHubProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitHubProviderRequest>): AddGitHubProviderRequest {
    const message = createBaseAddGitHubProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubProviderResponse(): AddGitHubProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitHubProviderResponse = {
  encode(message: AddGitHubProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitHubProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGitHubProviderResponse>): AddGitHubProviderResponse {
    return AddGitHubProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitHubProviderResponse>): AddGitHubProviderResponse {
    const message = createBaseAddGitHubProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitHubProviderRequest(): UpdateGitHubProviderRequest {
  return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGitHubProviderRequest = {
  encode(message: UpdateGitHubProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitHubProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGitHubProviderRequest>): UpdateGitHubProviderRequest {
    return UpdateGitHubProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGitHubProviderRequest>): UpdateGitHubProviderRequest {
    const message = createBaseUpdateGitHubProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitHubProviderResponse(): UpdateGitHubProviderResponse {
  return { details: undefined };
}

export const UpdateGitHubProviderResponse = {
  encode(message: UpdateGitHubProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitHubProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGitHubProviderResponse>): UpdateGitHubProviderResponse {
    return UpdateGitHubProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGitHubProviderResponse>): UpdateGitHubProviderResponse {
    const message = createBaseUpdateGitHubProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubEnterpriseServerProviderRequest(): AddGitHubEnterpriseServerProviderRequest {
  return {
    clientId: "",
    name: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    providerOptions: undefined,
  };
}

export const AddGitHubEnterpriseServerProviderRequest = {
  encode(message: AddGitHubEnterpriseServerProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(34).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(42).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(50).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitHubEnterpriseServerProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubEnterpriseServerProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGitHubEnterpriseServerProviderRequest>): AddGitHubEnterpriseServerProviderRequest {
    return AddGitHubEnterpriseServerProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitHubEnterpriseServerProviderRequest>): AddGitHubEnterpriseServerProviderRequest {
    const message = createBaseAddGitHubEnterpriseServerProviderRequest();
    message.clientId = object.clientId ?? "";
    message.name = object.name ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitHubEnterpriseServerProviderResponse(): AddGitHubEnterpriseServerProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitHubEnterpriseServerProviderResponse = {
  encode(message: AddGitHubEnterpriseServerProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitHubEnterpriseServerProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitHubEnterpriseServerProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGitHubEnterpriseServerProviderResponse>): AddGitHubEnterpriseServerProviderResponse {
    return AddGitHubEnterpriseServerProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AddGitHubEnterpriseServerProviderResponse>,
  ): AddGitHubEnterpriseServerProviderResponse {
    const message = createBaseAddGitHubEnterpriseServerProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitHubEnterpriseServerProviderRequest(): UpdateGitHubEnterpriseServerProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    clientSecret: "",
    authorizationEndpoint: "",
    tokenEndpoint: "",
    userEndpoint: "",
    scopes: [],
    providerOptions: undefined,
  };
}

export const UpdateGitHubEnterpriseServerProviderRequest = {
  encode(message: UpdateGitHubEnterpriseServerProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    if (message.authorizationEndpoint !== "") {
      writer.uint32(42).string(message.authorizationEndpoint);
    }
    if (message.tokenEndpoint !== "") {
      writer.uint32(50).string(message.tokenEndpoint);
    }
    if (message.userEndpoint !== "") {
      writer.uint32(58).string(message.userEndpoint);
    }
    for (const v of message.scopes) {
      writer.uint32(66).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(74).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitHubEnterpriseServerProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubEnterpriseServerProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.authorizationEndpoint = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tokenEndpoint = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userEndpoint = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>): UpdateGitHubEnterpriseServerProviderRequest {
    return UpdateGitHubEnterpriseServerProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>,
  ): UpdateGitHubEnterpriseServerProviderRequest {
    const message = createBaseUpdateGitHubEnterpriseServerProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.authorizationEndpoint = object.authorizationEndpoint ?? "";
    message.tokenEndpoint = object.tokenEndpoint ?? "";
    message.userEndpoint = object.userEndpoint ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitHubEnterpriseServerProviderResponse(): UpdateGitHubEnterpriseServerProviderResponse {
  return { details: undefined };
}

export const UpdateGitHubEnterpriseServerProviderResponse = {
  encode(message: UpdateGitHubEnterpriseServerProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitHubEnterpriseServerProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitHubEnterpriseServerProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<UpdateGitHubEnterpriseServerProviderResponse>,
  ): UpdateGitHubEnterpriseServerProviderResponse {
    return UpdateGitHubEnterpriseServerProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateGitHubEnterpriseServerProviderResponse>,
  ): UpdateGitHubEnterpriseServerProviderResponse {
    const message = createBaseUpdateGitHubEnterpriseServerProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabProviderRequest(): AddGitLabProviderRequest {
  return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGitLabProviderRequest = {
  encode(message: AddGitLabProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitLabProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGitLabProviderRequest>): AddGitLabProviderRequest {
    return AddGitLabProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitLabProviderRequest>): AddGitLabProviderRequest {
    const message = createBaseAddGitLabProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabProviderResponse(): AddGitLabProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitLabProviderResponse = {
  encode(message: AddGitLabProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitLabProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGitLabProviderResponse>): AddGitLabProviderResponse {
    return AddGitLabProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitLabProviderResponse>): AddGitLabProviderResponse {
    const message = createBaseAddGitLabProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitLabProviderRequest(): UpdateGitLabProviderRequest {
  return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGitLabProviderRequest = {
  encode(message: UpdateGitLabProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitLabProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGitLabProviderRequest>): UpdateGitLabProviderRequest {
    return UpdateGitLabProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGitLabProviderRequest>): UpdateGitLabProviderRequest {
    const message = createBaseUpdateGitLabProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitLabProviderResponse(): UpdateGitLabProviderResponse {
  return { details: undefined };
}

export const UpdateGitLabProviderResponse = {
  encode(message: UpdateGitLabProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitLabProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGitLabProviderResponse>): UpdateGitLabProviderResponse {
    return UpdateGitLabProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGitLabProviderResponse>): UpdateGitLabProviderResponse {
    const message = createBaseUpdateGitLabProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabSelfHostedProviderRequest(): AddGitLabSelfHostedProviderRequest {
  return { issuer: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGitLabSelfHostedProviderRequest = {
  encode(message: AddGitLabSelfHostedProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.issuer !== "") {
      writer.uint32(10).string(message.issuer);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitLabSelfHostedProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabSelfHostedProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGitLabSelfHostedProviderRequest>): AddGitLabSelfHostedProviderRequest {
    return AddGitLabSelfHostedProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitLabSelfHostedProviderRequest>): AddGitLabSelfHostedProviderRequest {
    const message = createBaseAddGitLabSelfHostedProviderRequest();
    message.issuer = object.issuer ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGitLabSelfHostedProviderResponse(): AddGitLabSelfHostedProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGitLabSelfHostedProviderResponse = {
  encode(message: AddGitLabSelfHostedProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGitLabSelfHostedProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGitLabSelfHostedProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGitLabSelfHostedProviderResponse>): AddGitLabSelfHostedProviderResponse {
    return AddGitLabSelfHostedProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGitLabSelfHostedProviderResponse>): AddGitLabSelfHostedProviderResponse {
    const message = createBaseAddGitLabSelfHostedProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGitLabSelfHostedProviderRequest(): UpdateGitLabSelfHostedProviderRequest {
  return { id: "", issuer: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGitLabSelfHostedProviderRequest = {
  encode(message: UpdateGitLabSelfHostedProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(34).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(42).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitLabSelfHostedProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabSelfHostedProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGitLabSelfHostedProviderRequest>): UpdateGitLabSelfHostedProviderRequest {
    return UpdateGitLabSelfHostedProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGitLabSelfHostedProviderRequest>): UpdateGitLabSelfHostedProviderRequest {
    const message = createBaseUpdateGitLabSelfHostedProviderRequest();
    message.id = object.id ?? "";
    message.issuer = object.issuer ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGitLabSelfHostedProviderResponse(): UpdateGitLabSelfHostedProviderResponse {
  return { details: undefined };
}

export const UpdateGitLabSelfHostedProviderResponse = {
  encode(message: UpdateGitLabSelfHostedProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGitLabSelfHostedProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGitLabSelfHostedProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGitLabSelfHostedProviderResponse>): UpdateGitLabSelfHostedProviderResponse {
    return UpdateGitLabSelfHostedProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGitLabSelfHostedProviderResponse>): UpdateGitLabSelfHostedProviderResponse {
    const message = createBaseUpdateGitLabSelfHostedProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddGoogleProviderRequest(): AddGoogleProviderRequest {
  return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const AddGoogleProviderRequest = {
  encode(message: AddGoogleProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(26).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(34).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGoogleProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGoogleProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGoogleProviderRequest>): AddGoogleProviderRequest {
    return AddGoogleProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGoogleProviderRequest>): AddGoogleProviderRequest {
    const message = createBaseAddGoogleProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddGoogleProviderResponse(): AddGoogleProviderResponse {
  return { details: undefined, id: "" };
}

export const AddGoogleProviderResponse = {
  encode(message: AddGoogleProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddGoogleProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddGoogleProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddGoogleProviderResponse>): AddGoogleProviderResponse {
    return AddGoogleProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddGoogleProviderResponse>): AddGoogleProviderResponse {
    const message = createBaseAddGoogleProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateGoogleProviderRequest(): UpdateGoogleProviderRequest {
  return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}

export const UpdateGoogleProviderRequest = {
  encode(message: UpdateGoogleProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.clientSecret !== "") {
      writer.uint32(34).string(message.clientSecret);
    }
    for (const v of message.scopes) {
      writer.uint32(42).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGoogleProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGoogleProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.clientSecret = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGoogleProviderRequest>): UpdateGoogleProviderRequest {
    return UpdateGoogleProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGoogleProviderRequest>): UpdateGoogleProviderRequest {
    const message = createBaseUpdateGoogleProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.clientSecret = object.clientSecret ?? "";
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateGoogleProviderResponse(): UpdateGoogleProviderResponse {
  return { details: undefined };
}

export const UpdateGoogleProviderResponse = {
  encode(message: UpdateGoogleProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateGoogleProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateGoogleProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateGoogleProviderResponse>): UpdateGoogleProviderResponse {
    return UpdateGoogleProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateGoogleProviderResponse>): UpdateGoogleProviderResponse {
    const message = createBaseUpdateGoogleProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddLDAPProviderRequest(): AddLDAPProviderRequest {
  return {
    name: "",
    servers: [],
    startTls: false,
    baseDn: "",
    bindDn: "",
    bindPassword: "",
    userBase: "",
    userObjectClasses: [],
    userFilters: [],
    timeout: undefined,
    attributes: undefined,
    providerOptions: undefined,
  };
}

export const AddLDAPProviderRequest = {
  encode(message: AddLDAPProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.servers) {
      writer.uint32(18).string(v!);
    }
    if (message.startTls === true) {
      writer.uint32(24).bool(message.startTls);
    }
    if (message.baseDn !== "") {
      writer.uint32(34).string(message.baseDn);
    }
    if (message.bindDn !== "") {
      writer.uint32(42).string(message.bindDn);
    }
    if (message.bindPassword !== "") {
      writer.uint32(50).string(message.bindPassword);
    }
    if (message.userBase !== "") {
      writer.uint32(58).string(message.userBase);
    }
    for (const v of message.userObjectClasses) {
      writer.uint32(66).string(v!);
    }
    for (const v of message.userFilters) {
      writer.uint32(74).string(v!);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(82).fork()).ldelim();
    }
    if (message.attributes !== undefined) {
      LDAPAttributes.encode(message.attributes, writer.uint32(90).fork()).ldelim();
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(98).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddLDAPProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddLDAPProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.servers.push(reader.string());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.startTls = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.baseDn = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.bindDn = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bindPassword = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.userBase = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.userObjectClasses.push(reader.string());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.userFilters.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.attributes = LDAPAttributes.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddLDAPProviderRequest>): AddLDAPProviderRequest {
    return AddLDAPProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddLDAPProviderRequest>): AddLDAPProviderRequest {
    const message = createBaseAddLDAPProviderRequest();
    message.name = object.name ?? "";
    message.servers = object.servers?.map((e) => e) || [];
    message.startTls = object.startTls ?? false;
    message.baseDn = object.baseDn ?? "";
    message.bindDn = object.bindDn ?? "";
    message.bindPassword = object.bindPassword ?? "";
    message.userBase = object.userBase ?? "";
    message.userObjectClasses = object.userObjectClasses?.map((e) => e) || [];
    message.userFilters = object.userFilters?.map((e) => e) || [];
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? LDAPAttributes.fromPartial(object.attributes)
      : undefined;
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddLDAPProviderResponse(): AddLDAPProviderResponse {
  return { details: undefined, id: "" };
}

export const AddLDAPProviderResponse = {
  encode(message: AddLDAPProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddLDAPProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddLDAPProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddLDAPProviderResponse>): AddLDAPProviderResponse {
    return AddLDAPProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddLDAPProviderResponse>): AddLDAPProviderResponse {
    const message = createBaseAddLDAPProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateLDAPProviderRequest(): UpdateLDAPProviderRequest {
  return {
    id: "",
    name: "",
    servers: [],
    startTls: false,
    baseDn: "",
    bindDn: "",
    bindPassword: "",
    userBase: "",
    userObjectClasses: [],
    userFilters: [],
    timeout: undefined,
    attributes: undefined,
    providerOptions: undefined,
  };
}

export const UpdateLDAPProviderRequest = {
  encode(message: UpdateLDAPProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.servers) {
      writer.uint32(26).string(v!);
    }
    if (message.startTls === true) {
      writer.uint32(32).bool(message.startTls);
    }
    if (message.baseDn !== "") {
      writer.uint32(42).string(message.baseDn);
    }
    if (message.bindDn !== "") {
      writer.uint32(50).string(message.bindDn);
    }
    if (message.bindPassword !== "") {
      writer.uint32(58).string(message.bindPassword);
    }
    if (message.userBase !== "") {
      writer.uint32(66).string(message.userBase);
    }
    for (const v of message.userObjectClasses) {
      writer.uint32(74).string(v!);
    }
    for (const v of message.userFilters) {
      writer.uint32(82).string(v!);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(90).fork()).ldelim();
    }
    if (message.attributes !== undefined) {
      LDAPAttributes.encode(message.attributes, writer.uint32(98).fork()).ldelim();
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(106).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLDAPProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLDAPProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.servers.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.startTls = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.baseDn = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.bindDn = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.bindPassword = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.userBase = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.userObjectClasses.push(reader.string());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.userFilters.push(reader.string());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.attributes = LDAPAttributes.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateLDAPProviderRequest>): UpdateLDAPProviderRequest {
    return UpdateLDAPProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLDAPProviderRequest>): UpdateLDAPProviderRequest {
    const message = createBaseUpdateLDAPProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.servers = object.servers?.map((e) => e) || [];
    message.startTls = object.startTls ?? false;
    message.baseDn = object.baseDn ?? "";
    message.bindDn = object.bindDn ?? "";
    message.bindPassword = object.bindPassword ?? "";
    message.userBase = object.userBase ?? "";
    message.userObjectClasses = object.userObjectClasses?.map((e) => e) || [];
    message.userFilters = object.userFilters?.map((e) => e) || [];
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.attributes = (object.attributes !== undefined && object.attributes !== null)
      ? LDAPAttributes.fromPartial(object.attributes)
      : undefined;
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateLDAPProviderResponse(): UpdateLDAPProviderResponse {
  return { details: undefined };
}

export const UpdateLDAPProviderResponse = {
  encode(message: UpdateLDAPProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateLDAPProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLDAPProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateLDAPProviderResponse>): UpdateLDAPProviderResponse {
    return UpdateLDAPProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLDAPProviderResponse>): UpdateLDAPProviderResponse {
    const message = createBaseUpdateLDAPProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddSAMLProviderRequest(): AddSAMLProviderRequest {
  return {
    name: "",
    metadataXml: undefined,
    metadataUrl: undefined,
    binding: 0,
    withSignedRequest: false,
    providerOptions: undefined,
  };
}

export const AddSAMLProviderRequest = {
  encode(message: AddSAMLProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.metadataXml !== undefined) {
      writer.uint32(18).bytes(message.metadataXml);
    }
    if (message.metadataUrl !== undefined) {
      writer.uint32(26).string(message.metadataUrl);
    }
    if (message.binding !== 0) {
      writer.uint32(32).int32(message.binding);
    }
    if (message.withSignedRequest === true) {
      writer.uint32(40).bool(message.withSignedRequest);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSAMLProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSAMLProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.metadataXml = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadataUrl = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.binding = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.withSignedRequest = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddSAMLProviderRequest>): AddSAMLProviderRequest {
    return AddSAMLProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSAMLProviderRequest>): AddSAMLProviderRequest {
    const message = createBaseAddSAMLProviderRequest();
    message.name = object.name ?? "";
    message.metadataXml = object.metadataXml ?? undefined;
    message.metadataUrl = object.metadataUrl ?? undefined;
    message.binding = object.binding ?? 0;
    message.withSignedRequest = object.withSignedRequest ?? false;
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddSAMLProviderResponse(): AddSAMLProviderResponse {
  return { details: undefined, id: "" };
}

export const AddSAMLProviderResponse = {
  encode(message: AddSAMLProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddSAMLProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddSAMLProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddSAMLProviderResponse>): AddSAMLProviderResponse {
    return AddSAMLProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddSAMLProviderResponse>): AddSAMLProviderResponse {
    const message = createBaseAddSAMLProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateSAMLProviderRequest(): UpdateSAMLProviderRequest {
  return {
    id: "",
    name: "",
    metadataXml: undefined,
    metadataUrl: undefined,
    binding: 0,
    withSignedRequest: false,
    providerOptions: undefined,
  };
}

export const UpdateSAMLProviderRequest = {
  encode(message: UpdateSAMLProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.metadataXml !== undefined) {
      writer.uint32(26).bytes(message.metadataXml);
    }
    if (message.metadataUrl !== undefined) {
      writer.uint32(34).string(message.metadataUrl);
    }
    if (message.binding !== 0) {
      writer.uint32(40).int32(message.binding);
    }
    if (message.withSignedRequest === true) {
      writer.uint32(48).bool(message.withSignedRequest);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSAMLProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSAMLProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.metadataXml = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.metadataUrl = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.binding = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.withSignedRequest = reader.bool();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateSAMLProviderRequest>): UpdateSAMLProviderRequest {
    return UpdateSAMLProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSAMLProviderRequest>): UpdateSAMLProviderRequest {
    const message = createBaseUpdateSAMLProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.metadataXml = object.metadataXml ?? undefined;
    message.metadataUrl = object.metadataUrl ?? undefined;
    message.binding = object.binding ?? 0;
    message.withSignedRequest = object.withSignedRequest ?? false;
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateSAMLProviderResponse(): UpdateSAMLProviderResponse {
  return { details: undefined };
}

export const UpdateSAMLProviderResponse = {
  encode(message: UpdateSAMLProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSAMLProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSAMLProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateSAMLProviderResponse>): UpdateSAMLProviderResponse {
    return UpdateSAMLProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSAMLProviderResponse>): UpdateSAMLProviderResponse {
    const message = createBaseUpdateSAMLProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseRegenerateSAMLProviderCertificateRequest(): RegenerateSAMLProviderCertificateRequest {
  return { id: "" };
}

export const RegenerateSAMLProviderCertificateRequest = {
  encode(message: RegenerateSAMLProviderCertificateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegenerateSAMLProviderCertificateRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegenerateSAMLProviderCertificateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RegenerateSAMLProviderCertificateRequest>): RegenerateSAMLProviderCertificateRequest {
    return RegenerateSAMLProviderCertificateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegenerateSAMLProviderCertificateRequest>): RegenerateSAMLProviderCertificateRequest {
    const message = createBaseRegenerateSAMLProviderCertificateRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRegenerateSAMLProviderCertificateResponse(): RegenerateSAMLProviderCertificateResponse {
  return { details: undefined };
}

export const RegenerateSAMLProviderCertificateResponse = {
  encode(message: RegenerateSAMLProviderCertificateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegenerateSAMLProviderCertificateResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegenerateSAMLProviderCertificateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RegenerateSAMLProviderCertificateResponse>): RegenerateSAMLProviderCertificateResponse {
    return RegenerateSAMLProviderCertificateResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RegenerateSAMLProviderCertificateResponse>,
  ): RegenerateSAMLProviderCertificateResponse {
    const message = createBaseRegenerateSAMLProviderCertificateResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseAddAppleProviderRequest(): AddAppleProviderRequest {
  return {
    name: "",
    clientId: "",
    teamId: "",
    keyId: "",
    privateKey: new Uint8Array(0),
    scopes: [],
    providerOptions: undefined,
  };
}

export const AddAppleProviderRequest = {
  encode(message: AddAppleProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.teamId !== "") {
      writer.uint32(26).string(message.teamId);
    }
    if (message.keyId !== "") {
      writer.uint32(34).string(message.keyId);
    }
    if (message.privateKey.length !== 0) {
      writer.uint32(42).bytes(message.privateKey);
    }
    for (const v of message.scopes) {
      writer.uint32(50).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(58).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAppleProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAppleProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.teamId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.privateKey = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddAppleProviderRequest>): AddAppleProviderRequest {
    return AddAppleProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAppleProviderRequest>): AddAppleProviderRequest {
    const message = createBaseAddAppleProviderRequest();
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.teamId = object.teamId ?? "";
    message.keyId = object.keyId ?? "";
    message.privateKey = object.privateKey ?? new Uint8Array(0);
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseAddAppleProviderResponse(): AddAppleProviderResponse {
  return { details: undefined, id: "" };
}

export const AddAppleProviderResponse = {
  encode(message: AddAppleProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AddAppleProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAppleProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AddAppleProviderResponse>): AddAppleProviderResponse {
    return AddAppleProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAppleProviderResponse>): AddAppleProviderResponse {
    const message = createBaseAddAppleProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateAppleProviderRequest(): UpdateAppleProviderRequest {
  return {
    id: "",
    name: "",
    clientId: "",
    teamId: "",
    keyId: "",
    privateKey: new Uint8Array(0),
    scopes: [],
    providerOptions: undefined,
  };
}

export const UpdateAppleProviderRequest = {
  encode(message: UpdateAppleProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.clientId !== "") {
      writer.uint32(26).string(message.clientId);
    }
    if (message.teamId !== "") {
      writer.uint32(34).string(message.teamId);
    }
    if (message.keyId !== "") {
      writer.uint32(42).string(message.keyId);
    }
    if (message.privateKey.length !== 0) {
      writer.uint32(50).bytes(message.privateKey);
    }
    for (const v of message.scopes) {
      writer.uint32(58).string(v!);
    }
    if (message.providerOptions !== undefined) {
      Options.encode(message.providerOptions, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAppleProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAppleProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.clientId = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.teamId = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.keyId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.privateKey = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.scopes.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.providerOptions = Options.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateAppleProviderRequest>): UpdateAppleProviderRequest {
    return UpdateAppleProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAppleProviderRequest>): UpdateAppleProviderRequest {
    const message = createBaseUpdateAppleProviderRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.clientId = object.clientId ?? "";
    message.teamId = object.teamId ?? "";
    message.keyId = object.keyId ?? "";
    message.privateKey = object.privateKey ?? new Uint8Array(0);
    message.scopes = object.scopes?.map((e) => e) || [];
    message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
      ? Options.fromPartial(object.providerOptions)
      : undefined;
    return message;
  },
};

function createBaseUpdateAppleProviderResponse(): UpdateAppleProviderResponse {
  return { details: undefined };
}

export const UpdateAppleProviderResponse = {
  encode(message: UpdateAppleProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateAppleProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAppleProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateAppleProviderResponse>): UpdateAppleProviderResponse {
    return UpdateAppleProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAppleProviderResponse>): UpdateAppleProviderResponse {
    const message = createBaseUpdateAppleProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeleteProviderRequest(): DeleteProviderRequest {
  return { id: "" };
}

export const DeleteProviderRequest = {
  encode(message: DeleteProviderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteProviderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteProviderRequest>): DeleteProviderRequest {
    return DeleteProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteProviderRequest>): DeleteProviderRequest {
    const message = createBaseDeleteProviderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteProviderResponse(): DeleteProviderResponse {
  return { details: undefined };
}

export const DeleteProviderResponse = {
  encode(message: DeleteProviderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteProviderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteProviderResponse>): DeleteProviderResponse {
    return DeleteProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteProviderResponse>): DeleteProviderResponse {
    const message = createBaseDeleteProviderResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseListActionsRequest(): ListActionsRequest {
  return { query: undefined, sortingColumn: 0, queries: [] };
}

export const ListActionsRequest = {
  encode(message: ListActionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== undefined) {
      ListQuery.encode(message.query, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.queries) {
      ActionQuery.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListActionsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = ListQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.queries.push(ActionQuery.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListActionsRequest>): ListActionsRequest {
    return ListActionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListActionsRequest>): ListActionsRequest {
    const message = createBaseListActionsRequest();
    message.query = (object.query !== undefined && object.query !== null)
      ? ListQuery.fromPartial(object.query)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.queries = object.queries?.map((e) => ActionQuery.fromPartial(e)) || [];
    return message;
  },
};

function createBaseActionQuery(): ActionQuery {
  return { actionIdQuery: undefined, actionNameQuery: undefined, actionStateQuery: undefined };
}

export const ActionQuery = {
  encode(message: ActionQuery, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.actionIdQuery !== undefined) {
      ActionIDQuery.encode(message.actionIdQuery, writer.uint32(10).fork()).ldelim();
    }
    if (message.actionNameQuery !== undefined) {
      ActionNameQuery.encode(message.actionNameQuery, writer.uint32(18).fork()).ldelim();
    }
    if (message.actionStateQuery !== undefined) {
      ActionStateQuery.encode(message.actionStateQuery, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ActionQuery {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActionQuery();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.actionIdQuery = ActionIDQuery.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.actionNameQuery = ActionNameQuery.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.actionStateQuery = ActionStateQuery.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ActionQuery>): ActionQuery {
    return ActionQuery.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActionQuery>): ActionQuery {
    const message = createBaseActionQuery();
    message.actionIdQuery = (object.actionIdQuery !== undefined && object.actionIdQuery !== null)
      ? ActionIDQuery.fromPartial(object.actionIdQuery)
      : undefined;
    message.actionNameQuery = (object.actionNameQuery !== undefined && object.actionNameQuery !== null)
      ? ActionNameQuery.fromPartial(object.actionNameQuery)
      : undefined;
    message.actionStateQuery = (object.actionStateQuery !== undefined && object.actionStateQuery !== null)
      ? ActionStateQuery.fromPartial(object.actionStateQuery)
      : undefined;
    return message;
  },
};

function createBaseListActionsResponse(): ListActionsResponse {
  return { details: undefined, sortingColumn: 0, result: [] };
}

export const ListActionsResponse = {
  encode(message: ListActionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ListDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.sortingColumn !== 0) {
      writer.uint32(16).int32(message.sortingColumn);
    }
    for (const v of message.result) {
      Action.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListActionsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListActionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ListDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortingColumn = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.result.push(Action.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListActionsResponse>): ListActionsResponse {
    return ListActionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListActionsResponse>): ListActionsResponse {
    const message = createBaseListActionsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ListDetails.fromPartial(object.details)
      : undefined;
    message.sortingColumn = object.sortingColumn ?? 0;
    message.result = object.result?.map((e) => Action.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateActionRequest(): CreateActionRequest {
  return { name: "", script: "", timeout: undefined, allowedToFail: false };
}

export const CreateActionRequest = {
  encode(message: CreateActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.script !== "") {
      writer.uint32(18).string(message.script);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(26).fork()).ldelim();
    }
    if (message.allowedToFail === true) {
      writer.uint32(32).bool(message.allowedToFail);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.script = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.allowedToFail = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateActionRequest>): CreateActionRequest {
    return CreateActionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateActionRequest>): CreateActionRequest {
    const message = createBaseCreateActionRequest();
    message.name = object.name ?? "";
    message.script = object.script ?? "";
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.allowedToFail = object.allowedToFail ?? false;
    return message;
  },
};

function createBaseCreateActionResponse(): CreateActionResponse {
  return { details: undefined, id: "" };
}

export const CreateActionResponse = {
  encode(message: CreateActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateActionResponse>): CreateActionResponse {
    return CreateActionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateActionResponse>): CreateActionResponse {
    const message = createBaseCreateActionResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetActionRequest(): GetActionRequest {
  return { id: "" };
}

export const GetActionRequest = {
  encode(message: GetActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetActionRequest>): GetActionRequest {
    return GetActionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetActionRequest>): GetActionRequest {
    const message = createBaseGetActionRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetActionResponse(): GetActionResponse {
  return { action: undefined };
}

export const GetActionResponse = {
  encode(message: GetActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.action !== undefined) {
      Action.encode(message.action, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.action = Action.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetActionResponse>): GetActionResponse {
    return GetActionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetActionResponse>): GetActionResponse {
    const message = createBaseGetActionResponse();
    message.action = (object.action !== undefined && object.action !== null)
      ? Action.fromPartial(object.action)
      : undefined;
    return message;
  },
};

function createBaseUpdateActionRequest(): UpdateActionRequest {
  return { id: "", name: "", script: "", timeout: undefined, allowedToFail: false };
}

export const UpdateActionRequest = {
  encode(message: UpdateActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.script !== "") {
      writer.uint32(26).string(message.script);
    }
    if (message.timeout !== undefined) {
      Duration.encode(message.timeout, writer.uint32(34).fork()).ldelim();
    }
    if (message.allowedToFail === true) {
      writer.uint32(40).bool(message.allowedToFail);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.script = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.timeout = Duration.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.allowedToFail = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateActionRequest>): UpdateActionRequest {
    return UpdateActionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateActionRequest>): UpdateActionRequest {
    const message = createBaseUpdateActionRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.script = object.script ?? "";
    message.timeout = (object.timeout !== undefined && object.timeout !== null)
      ? Duration.fromPartial(object.timeout)
      : undefined;
    message.allowedToFail = object.allowedToFail ?? false;
    return message;
  },
};

function createBaseUpdateActionResponse(): UpdateActionResponse {
  return { details: undefined };
}

export const UpdateActionResponse = {
  encode(message: UpdateActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateActionResponse>): UpdateActionResponse {
    return UpdateActionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateActionResponse>): UpdateActionResponse {
    const message = createBaseUpdateActionResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseDeleteActionRequest(): DeleteActionRequest {
  return { id: "" };
}

export const DeleteActionRequest = {
  encode(message: DeleteActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteActionRequest>): DeleteActionRequest {
    return DeleteActionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteActionRequest>): DeleteActionRequest {
    const message = createBaseDeleteActionRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteActionResponse(): DeleteActionResponse {
  return {};
}

export const DeleteActionResponse = {
  encode(_: DeleteActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteActionResponse>): DeleteActionResponse {
    return DeleteActionResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteActionResponse>): DeleteActionResponse {
    const message = createBaseDeleteActionResponse();
    return message;
  },
};

function createBaseListFlowTypesRequest(): ListFlowTypesRequest {
  return {};
}

export const ListFlowTypesRequest = {
  encode(_: ListFlowTypesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFlowTypesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFlowTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListFlowTypesRequest>): ListFlowTypesRequest {
    return ListFlowTypesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListFlowTypesRequest>): ListFlowTypesRequest {
    const message = createBaseListFlowTypesRequest();
    return message;
  },
};

function createBaseListFlowTypesResponse(): ListFlowTypesResponse {
  return { result: [] };
}

export const ListFlowTypesResponse = {
  encode(message: ListFlowTypesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      FlowType.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFlowTypesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFlowTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(FlowType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListFlowTypesResponse>): ListFlowTypesResponse {
    return ListFlowTypesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFlowTypesResponse>): ListFlowTypesResponse {
    const message = createBaseListFlowTypesResponse();
    message.result = object.result?.map((e) => FlowType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListFlowTriggerTypesRequest(): ListFlowTriggerTypesRequest {
  return { type: "" };
}

export const ListFlowTriggerTypesRequest = {
  encode(message: ListFlowTriggerTypesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFlowTriggerTypesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFlowTriggerTypesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListFlowTriggerTypesRequest>): ListFlowTriggerTypesRequest {
    return ListFlowTriggerTypesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFlowTriggerTypesRequest>): ListFlowTriggerTypesRequest {
    const message = createBaseListFlowTriggerTypesRequest();
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseListFlowTriggerTypesResponse(): ListFlowTriggerTypesResponse {
  return { result: [] };
}

export const ListFlowTriggerTypesResponse = {
  encode(message: ListFlowTriggerTypesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.result) {
      TriggerType.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListFlowTriggerTypesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFlowTriggerTypesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.result.push(TriggerType.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListFlowTriggerTypesResponse>): ListFlowTriggerTypesResponse {
    return ListFlowTriggerTypesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListFlowTriggerTypesResponse>): ListFlowTriggerTypesResponse {
    const message = createBaseListFlowTriggerTypesResponse();
    message.result = object.result?.map((e) => TriggerType.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeactivateActionRequest(): DeactivateActionRequest {
  return { id: "" };
}

export const DeactivateActionRequest = {
  encode(message: DeactivateActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateActionRequest>): DeactivateActionRequest {
    return DeactivateActionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateActionRequest>): DeactivateActionRequest {
    const message = createBaseDeactivateActionRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeactivateActionResponse(): DeactivateActionResponse {
  return { details: undefined };
}

export const DeactivateActionResponse = {
  encode(message: DeactivateActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeactivateActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeactivateActionResponse>): DeactivateActionResponse {
    return DeactivateActionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeactivateActionResponse>): DeactivateActionResponse {
    const message = createBaseDeactivateActionResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseReactivateActionRequest(): ReactivateActionRequest {
  return { id: "" };
}

export const ReactivateActionRequest = {
  encode(message: ReactivateActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateActionRequest>): ReactivateActionRequest {
    return ReactivateActionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateActionRequest>): ReactivateActionRequest {
    const message = createBaseReactivateActionRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseReactivateActionResponse(): ReactivateActionResponse {
  return { details: undefined };
}

export const ReactivateActionResponse = {
  encode(message: ReactivateActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ReactivateActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactivateActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ReactivateActionResponse>): ReactivateActionResponse {
    return ReactivateActionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReactivateActionResponse>): ReactivateActionResponse {
    const message = createBaseReactivateActionResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseGetFlowRequest(): GetFlowRequest {
  return { type: "" };
}

export const GetFlowRequest = {
  encode(message: GetFlowRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetFlowRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetFlowRequest>): GetFlowRequest {
    return GetFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFlowRequest>): GetFlowRequest {
    const message = createBaseGetFlowRequest();
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseGetFlowResponse(): GetFlowResponse {
  return { flow: undefined };
}

export const GetFlowResponse = {
  encode(message: GetFlowResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.flow !== undefined) {
      Flow.encode(message.flow, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetFlowResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFlowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.flow = Flow.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetFlowResponse>): GetFlowResponse {
    return GetFlowResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFlowResponse>): GetFlowResponse {
    const message = createBaseGetFlowResponse();
    message.flow = (object.flow !== undefined && object.flow !== null) ? Flow.fromPartial(object.flow) : undefined;
    return message;
  },
};

function createBaseClearFlowRequest(): ClearFlowRequest {
  return { type: "" };
}

export const ClearFlowRequest = {
  encode(message: ClearFlowRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClearFlowRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearFlowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ClearFlowRequest>): ClearFlowRequest {
    return ClearFlowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClearFlowRequest>): ClearFlowRequest {
    const message = createBaseClearFlowRequest();
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseClearFlowResponse(): ClearFlowResponse {
  return { details: undefined };
}

export const ClearFlowResponse = {
  encode(message: ClearFlowResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ClearFlowResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearFlowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ClearFlowResponse>): ClearFlowResponse {
    return ClearFlowResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClearFlowResponse>): ClearFlowResponse {
    const message = createBaseClearFlowResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseSetTriggerActionsRequest(): SetTriggerActionsRequest {
  return { flowType: "", triggerType: "", actionIds: [] };
}

export const SetTriggerActionsRequest = {
  encode(message: SetTriggerActionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.flowType !== "") {
      writer.uint32(10).string(message.flowType);
    }
    if (message.triggerType !== "") {
      writer.uint32(18).string(message.triggerType);
    }
    for (const v of message.actionIds) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetTriggerActionsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTriggerActionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.flowType = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.triggerType = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.actionIds.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetTriggerActionsRequest>): SetTriggerActionsRequest {
    return SetTriggerActionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetTriggerActionsRequest>): SetTriggerActionsRequest {
    const message = createBaseSetTriggerActionsRequest();
    message.flowType = object.flowType ?? "";
    message.triggerType = object.triggerType ?? "";
    message.actionIds = object.actionIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseSetTriggerActionsResponse(): SetTriggerActionsResponse {
  return { details: undefined };
}

export const SetTriggerActionsResponse = {
  encode(message: SetTriggerActionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.details !== undefined) {
      ObjectDetails.encode(message.details, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SetTriggerActionsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTriggerActionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.details = ObjectDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SetTriggerActionsResponse>): SetTriggerActionsResponse {
    return SetTriggerActionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetTriggerActionsResponse>): SetTriggerActionsResponse {
    const message = createBaseSetTriggerActionsResponse();
    message.details = (object.details !== undefined && object.details !== null)
      ? ObjectDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

export type ManagementServiceDefinition = typeof ManagementServiceDefinition;
export const ManagementServiceDefinition = {
  name: "ManagementService",
  fullName: "zitadel.management.v1.ManagementService",
  methods: {
    healthz: {
      name: "Healthz",
      requestType: HealthzRequest,
      requestStream: false,
      responseType: HealthzResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              122,
              10,
              7,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              18,
              7,
              72,
              101,
              97,
              108,
              116,
              104,
              122,
              26,
              89,
              84,
              104,
              101,
              32,
              104,
              101,
              97,
              108,
              116,
              104,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              97,
              108,
              108,
              111,
              119,
              115,
              32,
              97,
              110,
              32,
              101,
              120,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              115,
              121,
              115,
              116,
              101,
              109,
              32,
              116,
              111,
              32,
              112,
              114,
              111,
              98,
              101,
              32,
              105,
              102,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              109,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              32,
              65,
              80,
              73,
              32,
              105,
              115,
              32,
              97,
              108,
              105,
              118,
              101,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
            ]),
          ],
          578365826: [new Uint8Array([10, 18, 8, 47, 104, 101, 97, 108, 116, 104, 122])],
        },
      },
    },
    getOIDCInformation: {
      name: "GetOIDCInformation",
      requestType: GetOIDCInformationRequest,
      requestStream: false,
      responseType: GetOIDCInformationResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              160,
              1,
              10,
              7,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              18,
              21,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              97,
              116,
              105,
              111,
              110,
              26,
              113,
              84,
              104,
              105,
              115,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              115,
              111,
              109,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              32,
              110,
              101,
              101,
              100,
              101,
              100,
              32,
              40,
              79,
              73,
              68,
              67,
              41,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              98,
              111,
              117,
              116,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              104,
              101,
              32,
              105,
              115,
              115,
              117,
              101,
              114,
              32,
              111,
              114,
              32,
              100,
              105,
              115,
              99,
              111,
              118,
              101,
              114,
              121,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
            ]),
          ],
          578365826: [new Uint8Array([15, 18, 13, 47, 122, 105, 116, 97, 100, 101, 108, 47, 100, 111, 99, 115])],
        },
      },
    },
    getIAM: {
      name: "GetIAM",
      requestType: GetIAMRequest,
      requestStream: false,
      responseType: GetIAMResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              137,
              1,
              10,
              7,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              18,
              20,
              73,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              26,
              91,
              83,
              111,
              109,
              101,
              32,
              110,
              101,
              101,
              100,
              101,
              100,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              109,
              97,
              100,
              101,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              104,
              101,
              32,
              103,
              108,
              111,
              98,
              97,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              100,
              32,
              111,
              114,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              73,
              68,
              32,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
          578365826: [new Uint8Array([6, 18, 4, 47, 105, 97, 109])],
        },
      },
    },
    getSupportedLanguages: {
      name: "GetSupportedLanguages",
      requestType: GetSupportedLanguagesRequest,
      requestStream: false,
      responseType: GetSupportedLanguagesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              102,
              10,
              7,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              18,
              19,
              83,
              117,
              112,
              112,
              111,
              114,
              116,
              101,
              100,
              32,
              76,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              26,
              55,
              85,
              115,
              101,
              32,
              71,
              101,
              116,
              83,
              117,
              112,
              112,
              111,
              114,
              116,
              101,
              100,
              76,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              97,
              100,
              109,
              105,
              110,
              32,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              32,
              105,
              110,
              115,
              116,
              101,
              97,
              100,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              88,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
          578365826: [new Uint8Array([12, 18, 10, 47, 108, 97, 110, 103, 117, 97, 103, 101, 115])],
        },
      },
    },
    getUserByID: {
      name: "GetUserByID",
      requestType: GetUserByIDRequest,
      requestStream: false,
      responseType: GetUserByIDResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              211,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              10,
              85,
              115,
              101,
              114,
              32,
              98,
              121,
              32,
              73,
              68,
              26,
              82,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              102,
              117,
              108,
              108,
              32,
              117,
              115,
              101,
              114,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              32,
              40,
              104,
              117,
              109,
              97,
              110,
              32,
              111,
              114,
              32,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              41,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              44,
              32,
              101,
              109,
              97,
              105,
              108,
              44,
              32,
              101,
              116,
              99,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [new Uint8Array([13, 18, 11, 47, 117, 115, 101, 114, 115, 47, 123, 105, 100, 125])],
        },
      },
    },
    getUserByLoginNameGlobal: {
      name: "GetUserByLoginNameGlobal",
      requestType: GetUserByLoginNameGlobalRequest,
      requestStream: false,
      responseType: GetUserByLoginNameGlobalResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              187,
              1,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              6,
              71,
              108,
              111,
              98,
              97,
              108,
              18,
              33,
              71,
              101,
              116,
              32,
              85,
              115,
              101,
              114,
              32,
              98,
              121,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              110,
              97,
              109,
              101,
              32,
              40,
              103,
              108,
              111,
              98,
              97,
              108,
              108,
              121,
              41,
              26,
              122,
              71,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              98,
              121,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              110,
              97,
              109,
              101,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              101,
              100,
              32,
              111,
              118,
              101,
              114,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              111,
              110,
              108,
              121,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              100,
              97,
              116,
              97,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              110,
              97,
              109,
              101,
              32,
              109,
              97,
              116,
              99,
              104,
              101,
              115,
              32,
              101,
              120,
              97,
              99,
              116,
              108,
              121,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
            ]),
          ],
          400002: [
            new Uint8Array([18, 10, 16, 117, 115, 101, 114, 46, 103, 108, 111, 98, 97, 108, 46, 114, 101, 97, 100]),
          ],
          578365826: [
            new Uint8Array([
              30,
              18,
              28,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              95,
              98,
              121,
              95,
              108,
              111,
              103,
              105,
              110,
              95,
              110,
              97,
              109,
              101,
            ]),
          ],
        },
      },
    },
    listUsers: {
      name: "ListUsers",
      requestType: ListUsersRequest,
      requestStream: false,
      responseType: ListUsersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              250,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              12,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              85,
              115,
              101,
              114,
              115,
              26,
              152,
              1,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              102,
              111,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              105,
              110,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              66,
              121,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              44,
              32,
              119,
              101,
              32,
              119,
              105,
              108,
              108,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              121,
              111,
              117,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              97,
              32,
              108,
              105,
              109,
              105,
              116,
              32,
              97,
              110,
              100,
              32,
              115,
              111,
              114,
              116,
              105,
              110,
              103,
              32,
              102,
              111,
              114,
              32,
              112,
              97,
              103,
              105,
              110,
              97,
              116,
              105,
              111,
              110,
              46,
              74,
              47,
              10,
              3,
              50,
              48,
              48,
              18,
              40,
              10,
              38,
              65,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              109,
              97,
              116,
              99,
              104,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              113,
              117,
              101,
              114,
              121,
              74,
              56,
              10,
              3,
              52,
              48,
              48,
              18,
              49,
              10,
              18,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              108,
              105,
              115,
              116,
              32,
              113,
              117,
              101,
              114,
              121,
              18,
              27,
              10,
              25,
              26,
              23,
              35,
              47,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              115,
              47,
              114,
              112,
              99,
              83,
              116,
              97,
              116,
              117,
              115,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([19, 58, 1, 42, 34, 14, 47, 117, 115, 101, 114, 115, 47, 95, 115, 101, 97, 114, 99, 104]),
          ],
        },
      },
    },
    listUserChanges: {
      name: "ListUserChanges",
      requestType: ListUserChangesRequest,
      requestStream: false,
      responseType: ListUserChangesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              243,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              16,
              71,
              101,
              116,
              32,
              85,
              115,
              101,
              114,
              32,
              72,
              105,
              115,
              116,
              111,
              114,
              121,
              26,
              121,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              101,
              118,
              101,
              110,
              116,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              104,
              97,
              112,
              112,
              101,
              110,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              116,
              39,
              115,
              32,
              116,
              104,
              101,
              32,
              104,
              105,
              115,
              116,
              111,
              114,
              121,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              97,
              32,
              108,
              105,
              109,
              105,
              116,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              37,
              58,
              1,
              42,
              34,
              32,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    isUserUnique: {
      name: "IsUserUnique",
      requestType: IsUserUniqueRequest,
      requestStream: false,
      responseType: IsUserUniqueResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              222,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              23,
              67,
              104,
              101,
              99,
              107,
              32,
              102,
              111,
              114,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              26,
              93,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              105,
              102,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              111,
              114,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              32,
              105,
              115,
              32,
              117,
              110,
              105,
              113,
              117,
              101,
              46,
              32,
              83,
              111,
              32,
              121,
              111,
              117,
              32,
              99,
              97,
              110,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              19,
              18,
              17,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              95,
              105,
              115,
              95,
              117,
              110,
              105,
              113,
              117,
              101,
            ]),
          ],
        },
      },
    },
    /** deprecated: use ImportHumanUser */
    addHumanUser: {
      name: "AddHumanUser",
      requestType: AddHumanUserRequest,
      requestStream: false,
      responseType: AddHumanUserResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              177,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              31,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              40,
              72,
              117,
              109,
              97,
              110,
              41,
              26,
              132,
              2,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              116,
              121,
              112,
              101,
              32,
              104,
              117,
              109,
              97,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              110,
              101,
              119,
              108,
              121,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              103,
              101,
              116,
              32,
              97,
              110,
              32,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              102,
              32,
              101,
              105,
              116,
              104,
              101,
              114,
              32,
              116,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              109,
              97,
              114,
              107,
              101,
              100,
              32,
              97,
              115,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              111,
              114,
              32,
              110,
              111,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              46,
              32,
              73,
              102,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              115,
              101,
              116,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              111,
              110,
              101,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              102,
              105,
              114,
              115,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              46,
              88,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [new Uint8Array([17, 58, 1, 42, 34, 12, 47, 117, 115, 101, 114, 115, 47, 104, 117, 109, 97, 110])],
        },
      },
    },
    importHumanUser: {
      name: "ImportHumanUser",
      requestType: ImportHumanUserRequest,
      requestStream: false,
      responseType: ImportHumanUserResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              157,
              4,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              26,
              67,
              114,
              101,
              97,
              116,
              101,
              47,
              73,
              109,
              112,
              111,
              114,
              116,
              32,
              85,
              115,
              101,
              114,
              32,
              40,
              72,
              117,
              109,
              97,
              110,
              41,
              26,
              139,
              2,
              67,
              114,
              101,
              97,
              116,
              101,
              47,
              105,
              109,
              112,
              111,
              114,
              116,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              116,
              121,
              112,
              101,
              32,
              104,
              117,
              109,
              97,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              110,
              101,
              119,
              108,
              121,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              103,
              101,
              116,
              32,
              97,
              110,
              32,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              102,
              32,
              101,
              105,
              116,
              104,
              101,
              114,
              32,
              116,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              109,
              97,
              114,
              107,
              101,
              100,
              32,
              97,
              115,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              111,
              114,
              32,
              110,
              111,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              46,
              32,
              73,
              102,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              115,
              101,
              116,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              111,
              110,
              101,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              102,
              105,
              114,
              115,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              46,
              114,
              221,
              1,
              10,
              218,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              196,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              97,
              100,
              100,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              116,
              111,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              25,
              58,
              1,
              42,
              34,
              20,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              104,
              117,
              109,
              97,
              110,
              47,
              95,
              105,
              109,
              112,
              111,
              114,
              116,
            ]),
          ],
        },
      },
    },
    addMachineUser: {
      name: "AddMachineUser",
      requestType: AddMachineUserRequest,
      requestStream: false,
      responseType: AddMachineUserResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              195,
              1,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              12,
              85,
              115,
              101,
              114,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              18,
              21,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              40,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              41,
              26,
              135,
              1,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              116,
              121,
              112,
              101,
              32,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              114,
              32,
              65,
              80,
              73,
              44,
              32,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              32,
              111,
              114,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              46,
              32,
              84,
              104,
              101,
              115,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              110,
              111,
              110,
              45,
              105,
              110,
              116,
              101,
              114,
              97,
              99,
              116,
              105,
              118,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              108,
              111,
              119,
              115,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([19, 58, 1, 42, 34, 14, 47, 117, 115, 101, 114, 115, 47, 109, 97, 99, 104, 105, 110, 101]),
          ],
        },
      },
    },
    deactivateUser: {
      name: "DeactivateUser",
      requestType: DeactivateUserRequest,
      requestStream: false,
      responseType: DeactivateUserResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              218,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              15,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              117,
              115,
              101,
              114,
              26,
              178,
              2,
              84,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              116,
              111,
              32,
              39,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              39,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              97,
              110,
              121,
              109,
              111,
              114,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              39,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              39,
              46,
              32,
              85,
              115,
              101,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              32,
              116,
              104,
              101,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              97,
              110,
              121,
              109,
              111,
              114,
              101,
              44,
              32,
              98,
              117,
              116,
              32,
              121,
              111,
              117,
              32,
              115,
              116,
              105,
              108,
              108,
              32,
              110,
              101,
              101,
              100,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              100,
              97,
              116,
              97,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              28,
              58,
              1,
              42,
              34,
              23,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    reactivateUser: {
      name: "ReactivateUser",
      requestType: ReactivateUserRequest,
      requestStream: false,
      responseType: ReactivateUserResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              213,
              1,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              15,
              82,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              117,
              115,
              101,
              114,
              26,
              173,
              1,
              82,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              39,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              39,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              97,
              103,
              97,
              105,
              110,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              39,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              39,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              28,
              58,
              1,
              42,
              34,
              23,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              114,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    lockUser: {
      name: "LockUser",
      requestType: LockUserRequest,
      requestStream: false,
      responseType: LockUserResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              205,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              9,
              76,
              111,
              99,
              107,
              32,
              117,
              115,
              101,
              114,
              26,
              171,
              2,
              84,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              116,
              111,
              32,
              39,
              108,
              111,
              99,
              107,
              101,
              100,
              39,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              97,
              110,
              121,
              109,
              111,
              114,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              39,
              108,
              111,
              99,
              107,
              101,
              100,
              39,
              46,
              32,
              85,
              115,
              101,
              32,
              116,
              104,
              105,
              115,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              116,
              101,
              109,
              112,
              111,
              114,
              97,
              114,
              105,
              108,
              121,
              32,
              98,
              101,
              99,
              97,
              117,
              115,
              101,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              101,
              118,
              101,
              110,
              116,
              32,
              116,
              104,
              97,
              116,
              32,
              104,
              97,
              112,
              112,
              101,
              110,
              101,
              100,
              32,
              40,
              119,
              114,
              111,
              110,
              103,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              44,
              32,
              101,
              116,
              99,
              46,
              41,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              22,
              58,
              1,
              42,
              34,
              17,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              108,
              111,
              99,
              107,
            ]),
          ],
        },
      },
    },
    unlockUser: {
      name: "UnlockUser",
      requestType: UnlockUserRequest,
      requestStream: false,
      responseType: UnlockUserResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              195,
              1,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              11,
              85,
              110,
              108,
              111,
              99,
              107,
              32,
              117,
              115,
              101,
              114,
              26,
              159,
              1,
              85,
              110,
              108,
              111,
              99,
              107,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              39,
              108,
              111,
              99,
              107,
              101,
              100,
              39,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              97,
              103,
              97,
              105,
              110,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              39,
              108,
              111,
              99,
              107,
              101,
              100,
              39,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              24,
              58,
              1,
              42,
              34,
              19,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              117,
              110,
              108,
              111,
              99,
              107,
            ]),
          ],
        },
      },
    },
    removeUser: {
      name: "RemoveUser",
      requestType: RemoveUserRequest,
      requestStream: false,
      responseType: RemoveUserResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              200,
              1,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              11,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              117,
              115,
              101,
              114,
              26,
              164,
              1,
              84,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              116,
              111,
              32,
              39,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              39,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              97,
              110,
              121,
              109,
              111,
              114,
              101,
              46,
              32,
              69,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              116,
              104,
              105,
              115,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              32,
              97,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              39,
              85,
              115,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 117, 115, 101, 114, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [new Uint8Array([13, 42, 11, 47, 117, 115, 101, 114, 115, 47, 123, 105, 100, 125])],
        },
      },
    },
    updateUserName: {
      name: "UpdateUserName",
      requestType: UpdateUserNameRequest,
      requestStream: false,
      responseType: UpdateUserNameResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              150,
              1,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              16,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              110,
              97,
              109,
              101,
              26,
              110,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              66,
              101,
              32,
              97,
              119,
              97,
              114,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              110,
              101,
              119,
              108,
              121,
              32,
              97,
              100,
              100,
              101,
              100,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              30,
              58,
              1,
              42,
              26,
              25,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
            ]),
          ],
        },
      },
    },
    setUserMetadata: {
      name: "SetUserMetadata",
      requestType: SetUserMetadataRequest,
      requestStream: false,
      responseType: SetUserMetadataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              253,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              13,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              18,
              17,
              83,
              101,
              116,
              32,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              26,
              115,
              84,
              104,
              105,
              115,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              101,
              105,
              116,
              104,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              111,
              114,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              115,
              32,
              97,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              107,
              101,
              121,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              105,
              115,
              32,
              98,
              97,
              115,
              101,
              54,
              52,
              32,
              101,
              110,
              99,
              111,
              100,
              101,
              100,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              31,
              58,
              1,
              42,
              34,
              26,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              47,
              123,
              107,
              101,
              121,
              125,
            ]),
          ],
        },
      },
    },
    bulkSetUserMetadata: {
      name: "BulkSetUserMetadata",
      requestType: BulkSetUserMetadataRequest,
      requestStream: false,
      responseType: BulkSetUserMetadataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              234,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              13,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              18,
              22,
              66,
              117,
              108,
              107,
              32,
              83,
              101,
              116,
              32,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              26,
              91,
              65,
              100,
              100,
              32,
              111,
              114,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              118,
              97,
              108,
              117,
              101,
              115,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              118,
              97,
              108,
              117,
              101,
              115,
              32,
              97,
              114,
              101,
              32,
              98,
              97,
              115,
              101,
              54,
              52,
              32,
              101,
              110,
              99,
              111,
              100,
              101,
              100,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              31,
              58,
              1,
              42,
              34,
              26,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              47,
              95,
              98,
              117,
              108,
              107,
            ]),
          ],
        },
      },
    },
    listUserMetadata: {
      name: "ListUserMetadata",
      requestType: ListUserMetadataRequest,
      requestStream: false,
      responseType: ListUserMetadataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              191,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              13,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              18,
              20,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              26,
              50,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              111,
              102,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              105,
              108,
              116,
              101,
              114,
              101,
              100,
              32,
              98,
              121,
              32,
              121,
              111,
              117,
              114,
              32,
              113,
              117,
              101,
              114,
              121,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              33,
              58,
              1,
              42,
              34,
              28,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    getUserMetadata: {
      name: "GetUserMetadata",
      requestType: GetUserMetadataRequest,
      requestStream: false,
      responseType: GetUserMetadataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              197,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              13,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              18,
              24,
              71,
              101,
              116,
              32,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              66,
              121,
              32,
              75,
              101,
              121,
              26,
              52,
              71,
              101,
              116,
              32,
              97,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              98,
              121,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              107,
              101,
              121,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              28,
              18,
              26,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              47,
              123,
              107,
              101,
              121,
              125,
            ]),
          ],
        },
      },
    },
    removeUserMetadata: {
      name: "RemoveUserMetadata",
      requestType: RemoveUserMetadataRequest,
      requestStream: false,
      responseType: RemoveUserMetadataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              205,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              13,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              18,
              27,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              66,
              121,
              32,
              75,
              101,
              121,
              26,
              57,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              107,
              101,
              121,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              28,
              42,
              26,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              47,
              123,
              107,
              101,
              121,
              125,
            ]),
          ],
        },
      },
    },
    bulkRemoveUserMetadata: {
      name: "BulkRemoveUserMetadata",
      requestType: BulkRemoveUserMetadataRequest,
      requestStream: false,
      responseType: BulkRemoveUserMetadataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              207,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              13,
              85,
              115,
              101,
              114,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              18,
              20,
              66,
              117,
              108,
              107,
              32,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              26,
              66,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              107,
              101,
              121,
              115,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              31,
              58,
              1,
              42,
              42,
              26,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              47,
              95,
              98,
              117,
              108,
              107,
            ]),
          ],
        },
      },
    },
    getHumanProfile: {
      name: "GetHumanProfile",
      requestType: GetHumanProfileRequest,
      requestStream: false,
      responseType: GetHumanProfileResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              235,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              24,
              71,
              101,
              116,
              32,
              85,
              115,
              101,
              114,
              32,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              40,
              72,
              117,
              109,
              97,
              110,
              41,
              26,
              62,
              71,
              101,
              116,
              32,
              98,
              97,
              115,
              105,
              99,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              108,
              105,
              107,
              101,
              32,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              32,
              97,
              110,
              100,
              32,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              32,
              111,
              102,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              26,
              18,
              24,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
            ]),
          ],
        },
      },
    },
    updateHumanProfile: {
      name: "UpdateHumanProfile",
      requestType: UpdateHumanProfileRequest,
      requestStream: false,
      responseType: UpdateHumanProfileResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              161,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              27,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              80,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              40,
              72,
              117,
              109,
              97,
              110,
              41,
              26,
              113,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              84,
              104,
              101,
              32,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              115,
              32,
              98,
              97,
              115,
              105,
              99,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              108,
              105,
              107,
              101,
              32,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              32,
              97,
              110,
              100,
              32,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              29,
              58,
              1,
              42,
              26,
              24,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
            ]),
          ],
        },
      },
    },
    getHumanEmail: {
      name: "GetHumanEmail",
      requestType: GetHumanEmailRequest,
      requestStream: false,
      responseType: GetHumanEmailResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              232,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              22,
              71,
              101,
              116,
              32,
              85,
              115,
              101,
              114,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              40,
              72,
              117,
              109,
              97,
              110,
              41,
              26,
              64,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              24,
              18,
              22,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              101,
              109,
              97,
              105,
              108,
            ]),
          ],
        },
      },
    },
    updateHumanEmail: {
      name: "UpdateHumanEmail",
      requestType: UpdateHumanEmailRequest,
      requestStream: false,
      responseType: UpdateHumanEmailResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              158,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              25,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              40,
              72,
              117,
              109,
              97,
              110,
              41,
              26,
              112,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              32,
              111,
              102,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              116,
              111,
              32,
              110,
              111,
              116,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              44,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              101,
              109,
              97,
              105,
              108,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              27,
              58,
              1,
              42,
              26,
              22,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              101,
              109,
              97,
              105,
              108,
            ]),
          ],
        },
      },
    },
    resendHumanInitialization: {
      name: "ResendHumanInitialization",
      requestType: ResendHumanInitializationRequest,
      requestStream: false,
      responseType: ResendHumanInitializationResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              245,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              32,
              82,
              101,
              115,
              101,
              110,
              100,
              32,
              85,
              115,
              101,
              114,
              32,
              73,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              69,
              109,
              97,
              105,
              108,
              26,
              191,
              1,
              65,
              32,
              110,
              101,
              119,
              108,
              121,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              103,
              101,
              116,
              32,
              97,
              110,
              32,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              111,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              116,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              116,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              46,
              32,
              82,
              101,
              115,
              101,
              110,
              100,
              32,
              116,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              39,
              115,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              44,
              32,
              111,
              114,
              32,
              97,
              32,
              110,
              101,
              119,
              108,
              121,
              32,
              97,
              100,
              100,
              101,
              100,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              44,
              58,
              1,
              42,
              34,
              39,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              95,
              114,
              101,
              115,
              101,
              110,
              100,
              95,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    resendHumanEmailVerification: {
      name: "ResendHumanEmailVerification",
      requestType: ResendHumanEmailVerificationRequest,
      requestStream: false,
      responseType: ResendHumanEmailVerificationResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              133,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              30,
              82,
              101,
              115,
              101,
              110,
              100,
              32,
              85,
              115,
              101,
              114,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              86,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              26,
              82,
              82,
              101,
              115,
              101,
              110,
              100,
              32,
              116,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              48,
              58,
              1,
              42,
              34,
              43,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              101,
              109,
              97,
              105,
              108,
              47,
              95,
              114,
              101,
              115,
              101,
              110,
              100,
              95,
              118,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    getHumanPhone: {
      name: "GetHumanPhone",
      requestType: GetHumanPhoneRequest,
      requestStream: false,
      responseType: GetHumanPhoneResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              207,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              22,
              71,
              101,
              116,
              32,
              85,
              115,
              101,
              114,
              32,
              80,
              104,
              111,
              110,
              101,
              32,
              40,
              72,
              117,
              109,
              97,
              110,
              41,
              26,
              166,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              112,
              104,
              111,
              110,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              46,
              32,
              84,
              104,
              101,
              32,
              112,
              104,
              111,
              110,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              32,
              105,
              115,
              32,
              111,
              110,
              108,
              121,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              112,
              117,
              114,
              112,
              111,
              115,
              101,
              115,
              32,
              97,
              110,
              100,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
              44,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              50,
              70,
              65,
              41,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              24,
              18,
              22,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              104,
              111,
              110,
              101,
            ]),
          ],
        },
      },
    },
    updateHumanPhone: {
      name: "UpdateHumanPhone",
      requestType: UpdateHumanPhoneRequest,
      requestStream: false,
      responseType: UpdateHumanPhoneResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              173,
              4,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              25,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              80,
              104,
              111,
              110,
              101,
              32,
              40,
              72,
              117,
              109,
              97,
              110,
              41,
              26,
              254,
              1,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              104,
              111,
              110,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              32,
              111,
              102,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              116,
              111,
              32,
              110,
              111,
              116,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              44,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              103,
              101,
              116,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              116,
              111,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              40,
              105,
              102,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              41,
              46,
              32,
              84,
              104,
              101,
              32,
              112,
              104,
              111,
              110,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              32,
              105,
              115,
              32,
              111,
              110,
              108,
              121,
              32,
              102,
              111,
              114,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              112,
              117,
              114,
              112,
              111,
              115,
              101,
              115,
              32,
              97,
              110,
              100,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
              44,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              114,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              50,
              70,
              65,
              41,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              27,
              58,
              1,
              42,
              26,
              22,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              104,
              111,
              110,
              101,
            ]),
          ],
        },
      },
    },
    removeHumanPhone: {
      name: "RemoveHumanPhone",
      requestType: RemoveHumanPhoneRequest,
      requestStream: false,
      responseType: RemoveHumanPhoneResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              219,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              25,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              80,
              104,
              111,
              110,
              101,
              32,
              40,
              72,
              117,
              109,
              97,
              110,
              41,
              26,
              45,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              112,
              104,
              111,
              110,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              32,
              111,
              102,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              24,
              42,
              22,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              104,
              111,
              110,
              101,
            ]),
          ],
        },
      },
    },
    resendHumanPhoneVerification: {
      name: "ResendHumanPhoneVerification",
      requestType: ResendHumanPhoneVerificationRequest,
      requestStream: false,
      responseType: ResendHumanPhoneVerificationResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              150,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              30,
              82,
              101,
              115,
              101,
              110,
              100,
              32,
              85,
              115,
              101,
              114,
              32,
              80,
              104,
              111,
              110,
              101,
              32,
              86,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              26,
              99,
              82,
              101,
              115,
              101,
              110,
              100,
              32,
              116,
              104,
              101,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              104,
              111,
              110,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              44,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              32,
              115,
              116,
              111,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              48,
              58,
              1,
              42,
              34,
              43,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              104,
              111,
              110,
              101,
              47,
              95,
              114,
              101,
              115,
              101,
              110,
              100,
              95,
              118,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    removeHumanAvatar: {
      name: "RemoveHumanAvatar",
      requestType: RemoveHumanAvatarRequest,
      requestStream: false,
      responseType: RemoveHumanAvatarResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              228,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              26,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              65,
              118,
              97,
              116,
              97,
              114,
              32,
              40,
              72,
              117,
              109,
              97,
              110,
              41,
              26,
              53,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              97,
              118,
              97,
              116,
              97,
              114,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              108,
              121,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              25,
              42,
              23,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              97,
              118,
              97,
              116,
              97,
              114,
            ]),
          ],
        },
      },
    },
    /** deprecated: use SetHumanPassword */
    setHumanInitialPassword: {
      name: "SetHumanInitialPassword",
      requestType: SetHumanInitialPasswordRequest,
      requestStream: false,
      responseType: SetHumanInitialPasswordResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              49,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              26,
              83,
              101,
              116,
              32,
              72,
              117,
              109,
              97,
              110,
              32,
              73,
              110,
              105,
              116,
              105,
              97,
              108,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              88,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              42,
              58,
              1,
              42,
              34,
              37,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              95,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
            ]),
          ],
        },
      },
    },
    setHumanPassword: {
      name: "SetHumanPassword",
      requestType: SetHumanPasswordRequest,
      requestStream: false,
      responseType: SetHumanPasswordResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              216,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              17,
              83,
              101,
              116,
              32,
              85,
              115,
              101,
              114,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              26,
              177,
              1,
              83,
              101,
              116,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              80,
              101,
              114,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              44,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              110,
              101,
              120,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              46,
              32,
              89,
              111,
              117,
              32,
              99,
              97,
              110,
              32,
              115,
              101,
              116,
              32,
              110,
              111,
              95,
              99,
              104,
              97,
              110,
              103,
              101,
              95,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              32,
              116,
              111,
              32,
              116,
              114,
              117,
              101,
              44,
              32,
              116,
              111,
              32,
              97,
              118,
              111,
              105,
              100,
              32,
              116,
              104,
              101,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              110,
              101,
              120,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              30,
              58,
              1,
              42,
              34,
              25,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
            ]),
          ],
        },
      },
    },
    sendHumanResetPasswordNotification: {
      name: "SendHumanResetPasswordNotification",
      requestType: SendHumanResetPasswordNotificationRequest,
      requestStream: false,
      responseType: SendHumanResetPasswordNotificationResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              247,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              32,
              83,
              101,
              110,
              100,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              26,
              66,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              114,
              101,
              99,
              101,
              105,
              118,
              101,
              32,
              97,
              110,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              32,
              108,
              105,
              110,
              107,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              37,
              58,
              1,
              42,
              34,
              32,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              95,
              114,
              101,
              115,
              101,
              116,
            ]),
          ],
        },
      },
    },
    listHumanAuthFactors: {
      name: "ListHumanAuthFactors",
      requestType: ListHumanAuthFactorsRequest,
      requestStream: false,
      responseType: ListHumanAuthFactorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              169,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              41,
              71,
              101,
              116,
              32,
              85,
              115,
              101,
              114,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              70,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              40,
              50,
              70,
              65,
              47,
              77,
              70,
              65,
              41,
              26,
              110,
              71,
              101,
              116,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              115,
              101,
              116,
              46,
              32,
              73,
              110,
              99,
              108,
              117,
              100,
              105,
              110,
              103,
              32,
              83,
              101,
              99,
              111,
              110,
              100,
              45,
              70,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              40,
              50,
              70,
              65,
              41,
              32,
              97,
              110,
              100,
              32,
              77,
              117,
              108,
              116,
              105,
              45,
              70,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              40,
              77,
              70,
              65,
              41,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              39,
              34,
              37,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              97,
              117,
              116,
              104,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    removeHumanAuthFactorOTP: {
      name: "RemoveHumanAuthFactorOTP",
      requestType: RemoveHumanAuthFactorOTPRequest,
      requestStream: false,
      responseType: RemoveHumanAuthFactorOTPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              190,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              23,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              77,
              117,
              108,
              116,
              105,
              45,
              70,
              97,
              99,
              116,
              111,
              114,
              32,
              79,
              84,
              80,
              26,
              148,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              79,
              110,
              101,
              45,
              84,
              105,
              109,
              101,
              45,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              40,
              79,
              84,
              80,
              41,
              32,
              97,
              115,
              32,
              97,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              79,
              84,
              80,
              32,
              105,
              115,
              32,
              97,
              110,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              112,
              112,
              44,
              32,
              108,
              105,
              107,
              101,
              32,
              65,
              117,
              116,
              104,
              121,
              32,
              111,
              114,
              32,
              71,
              111,
              111,
              103,
              108,
              101,
              47,
              77,
              105,
              99,
              114,
              111,
              115,
              111,
              102,
              116,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              111,
              114,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              35,
              42,
              33,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              97,
              117,
              116,
              104,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              47,
              111,
              116,
              112,
            ]),
          ],
        },
      },
    },
    removeHumanAuthFactorU2F: {
      name: "RemoveHumanAuthFactorU2F",
      requestType: RemoveHumanAuthFactorU2FRequest,
      requestStream: false,
      responseType: RemoveHumanAuthFactorU2FResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              191,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              23,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              77,
              117,
              108,
              116,
              105,
              45,
              70,
              97,
              99,
              116,
              111,
              114,
              32,
              85,
              50,
              70,
              26,
              149,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              85,
              110,
              105,
              118,
              101,
              114,
              115,
              97,
              108,
              45,
              83,
              101,
              99,
              111,
              110,
              100,
              45,
              70,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              85,
              50,
              70,
              41,
              32,
              97,
              115,
              32,
              97,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              85,
              50,
              70,
              32,
              105,
              115,
              32,
              97,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              45,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              116,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              108,
              105,
              107,
              101,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              80,
              114,
              105,
              110,
              116,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              45,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              46,
              42,
              44,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              97,
              117,
              116,
              104,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              47,
              117,
              50,
              102,
              47,
              123,
              116,
              111,
              107,
              101,
              110,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    removeHumanAuthFactorOTPSMS: {
      name: "RemoveHumanAuthFactorOTPSMS",
      requestType: RemoveHumanAuthFactorOTPSMSRequest,
      requestStream: false,
      responseType: RemoveHumanAuthFactorOTPSMSResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              224,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              27,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              77,
              117,
              108,
              116,
              105,
              45,
              70,
              97,
              99,
              116,
              111,
              114,
              32,
              79,
              84,
              80,
              32,
              83,
              77,
              83,
              26,
              178,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              79,
              110,
              101,
              45,
              84,
              105,
              109,
              101,
              45,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              40,
              79,
              84,
              80,
              41,
              32,
              83,
              77,
              83,
              32,
              97,
              115,
              32,
              97,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              65,
              115,
              32,
              111,
              110,
              108,
              121,
              32,
              111,
              110,
              101,
              32,
              79,
              84,
              80,
              32,
              83,
              77,
              83,
              32,
              112,
              101,
              114,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              97,
              108,
              108,
              111,
              119,
              101,
              100,
              44,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              79,
              84,
              80,
              32,
              83,
              77,
              83,
              32,
              97,
              115,
              32,
              97,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              39,
              42,
              37,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              97,
              117,
              116,
              104,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              47,
              111,
              116,
              112,
              95,
              115,
              109,
              115,
            ]),
          ],
        },
      },
    },
    removeHumanAuthFactorOTPEmail: {
      name: "RemoveHumanAuthFactorOTPEmail",
      requestType: RemoveHumanAuthFactorOTPEmailRequest,
      requestStream: false,
      responseType: RemoveHumanAuthFactorOTPEmailResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              230,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              27,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              77,
              117,
              108,
              116,
              105,
              45,
              70,
              97,
              99,
              116,
              111,
              114,
              32,
              79,
              84,
              80,
              32,
              83,
              77,
              83,
              26,
              184,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              79,
              110,
              101,
              45,
              84,
              105,
              109,
              101,
              45,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              40,
              79,
              84,
              80,
              41,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              97,
              115,
              32,
              97,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              65,
              115,
              32,
              111,
              110,
              108,
              121,
              32,
              111,
              110,
              101,
              32,
              79,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              112,
              101,
              114,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              97,
              108,
              108,
              111,
              119,
              101,
              100,
              44,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              79,
              84,
              80,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              97,
              115,
              32,
              97,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              41,
              42,
              39,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              97,
              117,
              116,
              104,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              47,
              111,
              116,
              112,
              95,
              101,
              109,
              97,
              105,
              108,
            ]),
          ],
        },
      },
    },
    listHumanPasswordless: {
      name: "ListHumanPasswordless",
      requestType: ListHumanPasswordlessRequest,
      requestStream: false,
      responseType: ListHumanPasswordlessResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              253,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              42,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              80,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              26,
              192,
              1,
              71,
              101,
              116,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              109,
              101,
              116,
              104,
              111,
              100,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              105,
              115,
              32,
              97,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              45,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              116,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              108,
              105,
              107,
              101,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              83,
              99,
              97,
              110,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              72,
              101,
              108,
              108,
              111,
              32,
              111,
              114,
              32,
              97,
              32,
              72,
              97,
              114,
              100,
              119,
              97,
              114,
              101,
              32,
              84,
              111,
              107,
              101,
              110,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              39,
              34,
              37,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addPasswordlessRegistration: {
      name: "AddPasswordlessRegistration",
      requestType: AddPasswordlessRegistrationRequest,
      requestStream: false,
      responseType: AddPasswordlessRegistrationResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              241,
              4,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              42,
              65,
              100,
              100,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              80,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              76,
              105,
              110,
              107,
              26,
              180,
              2,
              65,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              111,
              114,
              32,
              108,
              105,
              110,
              107,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              105,
              116,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              108,
              105,
              110,
              107,
              32,
              101,
              110,
              97,
              98,
              108,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              116,
              111,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              32,
              105,
              102,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              32,
              97,
              114,
              101,
              32,
              97,
              108,
              108,
              32,
              112,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              111,
              114,
              115,
              46,
              32,
              101,
              46,
              103,
              46,
              32,
              85,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              32,
              97,
              110,
              100,
              32,
              119,
              97,
              110,
              116,
              115,
              32,
              116,
              111,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              70,
              97,
              99,
              101,
              73,
              68,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              80,
              104,
              111,
              110,
              101,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              23,
              10,
              21,
              117,
              115,
              101,
              114,
              46,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              46,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              37,
              34,
              35,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
        },
      },
    },
    sendPasswordlessRegistration: {
      name: "SendPasswordlessRegistration",
      requestType: SendPasswordlessRegistrationRequest,
      requestStream: false,
      responseType: SendPasswordlessRegistrationResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              246,
              4,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              43,
              83,
              101,
              110,
              100,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              80,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              76,
              105,
              110,
              107,
              26,
              184,
              2,
              65,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              111,
              114,
              32,
              108,
              105,
              110,
              107,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              110,
              100,
              115,
              32,
              105,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              112,
              101,
              114,
              32,
              101,
              109,
              97,
              105,
              108,
              46,
              32,
              84,
              104,
              101,
              32,
              108,
              105,
              110,
              107,
              32,
              101,
              110,
              97,
              98,
              108,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              116,
              111,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              32,
              105,
              102,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              115,
              32,
              97,
              114,
              101,
              32,
              97,
              108,
              108,
              32,
              112,
              108,
              97,
              116,
              102,
              111,
              114,
              109,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              111,
              114,
              115,
              46,
              32,
              101,
              46,
              103,
              46,
              32,
              85,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              32,
              97,
              110,
              100,
              32,
              119,
              97,
              110,
              116,
              115,
              32,
              116,
              111,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              70,
              97,
              99,
              101,
              73,
              68,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              80,
              104,
              111,
              110,
              101,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              45,
              58,
              1,
              42,
              34,
              40,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              95,
              115,
              101,
              110,
              100,
              95,
              108,
              105,
              110,
              107,
            ]),
          ],
        },
      },
    },
    removeHumanPasswordless: {
      name: "RemoveHumanPasswordless",
      requestType: RemoveHumanPasswordlessRequest,
      requestStream: false,
      responseType: RemoveHumanPasswordlessResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              168,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              10,
              85,
              115,
              101,
              114,
              32,
              72,
              117,
              109,
              97,
              110,
              18,
              27,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              80,
              97,
              115,
              115,
              107,
              101,
              121,
              26,
              123,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              109,
              101,
              116,
              104,
              111,
              100,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              40,
              101,
              46,
              103,
              32,
              70,
              97,
              99,
              101,
              73,
              68,
              44,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              83,
              99,
              97,
              110,
              101,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              46,
              41,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              42,
              42,
              40,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              123,
              116,
              111,
              107,
              101,
              110,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    updateMachine: {
      name: "UpdateMachine",
      requestType: UpdateMachineRequest,
      requestStream: false,
      responseType: UpdateMachineResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              155,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              12,
              85,
              115,
              101,
              114,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              18,
              19,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              85,
              115,
              101,
              114,
              26,
              113,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              97,
              32,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              47,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              110,
              111,
              110,
              45,
              105,
              110,
              116,
              101,
              114,
              97,
              99,
              116,
              105,
              118,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              105,
              101,
              115,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              29,
              58,
              1,
              42,
              26,
              24,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
            ]),
          ],
        },
      },
    },
    generateMachineSecret: {
      name: "GenerateMachineSecret",
      requestType: GenerateMachineSecretRequest,
      requestStream: false,
      responseType: GenerateMachineSecretResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              171,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              12,
              85,
              115,
              101,
              114,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              18,
              30,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              83,
              101,
              99,
              114,
              101,
              116,
              32,
              102,
              111,
              114,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              85,
              115,
              101,
              114,
              26,
              118,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              117,
              115,
              101,
              114,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              46,
              32,
              73,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              40,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              32,
              103,
              114,
              97,
              110,
              116,
              41,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              28,
              58,
              1,
              42,
              26,
              23,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
            ]),
          ],
        },
      },
    },
    removeMachineSecret: {
      name: "RemoveMachineSecret",
      requestType: RemoveMachineSecretRequest,
      requestStream: false,
      responseType: RemoveMachineSecretResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              171,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              12,
              85,
              115,
              101,
              114,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              18,
              29,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              83,
              101,
              99,
              114,
              101,
              116,
              32,
              111,
              102,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              85,
              115,
              101,
              114,
              26,
              119,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              97,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              32,
              111,
              102,
              32,
              97,
              32,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              117,
              115,
              101,
              114,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              25,
              42,
              23,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              115,
              101,
              99,
              114,
              101,
              116,
            ]),
          ],
        },
      },
    },
    getMachineKeyByIDs: {
      name: "GetMachineKeyByIDs",
      requestType: GetMachineKeyByIDsRequest,
      requestStream: false,
      responseType: GetMachineKeyByIDsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              164,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              12,
              85,
              115,
              101,
              114,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              18,
              26,
              71,
              101,
              116,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              75,
              101,
              121,
              32,
              66,
              121,
              32,
              73,
              68,
              26,
              118,
              71,
              101,
              116,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              75,
              101,
              121,
              32,
              111,
              102,
              32,
              97,
              32,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              98,
              121,
              32,
              105,
              116,
              115,
              32,
              105,
              100,
              46,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              107,
              101,
              121,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              106,
              119,
              116,
              32,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              32,
              18,
              30,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              107,
              101,
              121,
              115,
              47,
              123,
              107,
              101,
              121,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listMachineKeys: {
      name: "ListMachineKeys",
      requestType: ListMachineKeysRequest,
      requestStream: false,
      responseType: ListMachineKeysResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              156,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              12,
              85,
              115,
              101,
              114,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              18,
              26,
              71,
              101,
              116,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              75,
              101,
              121,
              32,
              66,
              121,
              32,
              73,
              68,
              26,
              110,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              107,
              101,
              121,
              115,
              32,
              111,
              102,
              32,
              97,
              32,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              107,
              101,
              121,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              106,
              119,
              116,
              32,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              34,
              58,
              1,
              42,
              34,
              29,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              107,
              101,
              121,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addMachineKey: {
      name: "AddMachineKey",
      requestType: AddMachineKeyRequest,
      requestStream: false,
      responseType: AddMachineKeyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              204,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              12,
              85,
              115,
              101,
              114,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              18,
              27,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              75,
              101,
              121,
              32,
              102,
              111,
              114,
              32,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              117,
              115,
              101,
              114,
              26,
              153,
              1,
              65,
              32,
              110,
              101,
              119,
              32,
              107,
              101,
              121,
              32,
              105,
              115,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              115,
              116,
              111,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              32,
              107,
              101,
              121,
              46,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              107,
              101,
              121,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              106,
              119,
              116,
              32,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              26,
              58,
              1,
              42,
              34,
              21,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              107,
              101,
              121,
              115,
            ]),
          ],
        },
      },
    },
    removeMachineKey: {
      name: "RemoveMachineKey",
      requestType: RemoveMachineKeyRequest,
      requestStream: false,
      responseType: RemoveMachineKeyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              151,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              12,
              85,
              115,
              101,
              114,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              18,
              27,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              75,
              101,
              121,
              32,
              102,
              111,
              114,
              32,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              117,
              115,
              101,
              114,
              26,
              101,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              107,
              101,
              121,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              97,
              116,
              32,
              107,
              101,
              121,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              32,
              42,
              30,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              107,
              101,
              121,
              115,
              47,
              123,
              107,
              101,
              121,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    getPersonalAccessTokenByIDs: {
      name: "GetPersonalAccessTokenByIDs",
      requestType: GetPersonalAccessTokenByIDsRequest,
      requestStream: false,
      responseType: GetPersonalAccessTokenByIDsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              232,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              12,
              85,
              115,
              101,
              114,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              18,
              39,
              71,
              101,
              116,
              32,
              97,
              32,
              80,
              101,
              114,
              115,
              111,
              110,
              97,
              108,
              45,
              65,
              99,
              99,
              101,
              115,
              115,
              45,
              84,
              111,
              107,
              101,
              110,
              32,
              40,
              80,
              65,
              84,
              41,
              32,
              98,
              121,
              32,
              73,
              68,
              26,
              172,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              80,
              65,
              84,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              44,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              108,
              121,
              32,
              111,
              110,
              108,
              121,
              32,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              46,
              32,
              80,
              65,
              84,
              115,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              97,
              100,
              121,
              45,
              116,
              111,
              45,
              117,
              115,
              101,
              32,
              116,
              111,
              107,
              101,
              110,
              115,
              32,
              97,
              110,
              100,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              100,
              105,
              114,
              101,
              99,
              116,
              108,
              121,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              34,
              18,
              32,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              97,
              116,
              115,
              47,
              123,
              116,
              111,
              107,
              101,
              110,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listPersonalAccessTokens: {
      name: "ListPersonalAccessTokens",
      requestType: ListPersonalAccessTokensRequest,
      requestStream: false,
      responseType: ListPersonalAccessTokensResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              239,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              12,
              85,
              115,
              101,
              114,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              18,
              39,
              71,
              101,
              116,
              32,
              97,
              32,
              80,
              101,
              114,
              115,
              111,
              110,
              97,
              108,
              45,
              65,
              99,
              99,
              101,
              115,
              115,
              45,
              84,
              111,
              107,
              101,
              110,
              32,
              40,
              80,
              65,
              84,
              41,
              32,
              98,
              121,
              32,
              73,
              68,
              26,
              179,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              80,
              65,
              84,
              115,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              44,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              108,
              121,
              32,
              111,
              110,
              108,
              121,
              32,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              32,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              115,
              46,
              32,
              80,
              65,
              84,
              115,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              97,
              100,
              121,
              45,
              116,
              111,
              45,
              117,
              115,
              101,
              32,
              116,
              111,
              107,
              101,
              110,
              115,
              32,
              97,
              110,
              100,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              100,
              105,
              114,
              101,
              99,
              116,
              108,
              121,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              235,
              1,
              10,
              232,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              210,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              34,
              58,
              1,
              42,
              34,
              29,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              97,
              116,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addPersonalAccessToken: {
      name: "AddPersonalAccessToken",
      requestType: AddPersonalAccessTokenRequest,
      requestStream: false,
      responseType: AddPersonalAccessTokenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              160,
              4,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              12,
              85,
              115,
              101,
              114,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              18,
              36,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              80,
              101,
              114,
              115,
              111,
              110,
              97,
              108,
              45,
              65,
              99,
              99,
              101,
              115,
              115,
              45,
              84,
              111,
              107,
              101,
              110,
              32,
              40,
              80,
              65,
              84,
              41,
              26,
              228,
              1,
              71,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              80,
              65,
              84,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              67,
              117,
              114,
              114,
              101,
              110,
              116,
              108,
              121,
              32,
              111,
              110,
              108,
              121,
              32,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              109,
              97,
              99,
              104,
              105,
              110,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              111,
              107,
              101,
              110,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              44,
              32,
              109,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              115,
              116,
              111,
              114,
              101,
              32,
              105,
              116,
              46,
              32,
              80,
              65,
              84,
              115,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              97,
              100,
              121,
              45,
              116,
              111,
              45,
              117,
              115,
              101,
              32,
              116,
              111,
              107,
              101,
              110,
              115,
              32,
              97,
              110,
              100,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              100,
              105,
              114,
              101,
              99,
              116,
              108,
              121,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              238,
              1,
              10,
              235,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              213,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              26,
              58,
              1,
              42,
              34,
              21,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              97,
              116,
              115,
            ]),
          ],
        },
      },
    },
    removePersonalAccessToken: {
      name: "RemovePersonalAccessToken",
      requestType: RemovePersonalAccessTokenRequest,
      requestStream: false,
      responseType: RemovePersonalAccessTokenResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              164,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              10,
              12,
              85,
              115,
              101,
              114,
              32,
              77,
              97,
              99,
              104,
              105,
              110,
              101,
              18,
              39,
              71,
              101,
              116,
              32,
              97,
              32,
              80,
              101,
              114,
              115,
              111,
              110,
              97,
              108,
              45,
              65,
              99,
              99,
              101,
              115,
              115,
              45,
              84,
              111,
              107,
              101,
              110,
              32,
              40,
              80,
              65,
              84,
              41,
              32,
              98,
              121,
              32,
              73,
              68,
              26,
              103,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              97,
              32,
              80,
              65,
              84,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              65,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              44,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              97,
              116,
              32,
              116,
              111,
              107,
              101,
              110,
              32,
              97,
              110,
              121,
              109,
              111,
              114,
              101,
              46,
              74,
              11,
              10,
              3,
              50,
              48,
              48,
              18,
              4,
              10,
              2,
              79,
              75,
              114,
              237,
              1,
              10,
              234,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              212,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              34,
              42,
              32,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              112,
              97,
              116,
              115,
              47,
              123,
              116,
              111,
              107,
              101,
              110,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listHumanLinkedIDPs: {
      name: "ListHumanLinkedIDPs",
      requestType: ListHumanLinkedIDPsRequest,
      requestStream: false,
      responseType: ListHumanLinkedIDPsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              241,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              18,
              76,
              105,
              115,
              116,
              32,
              83,
              111,
              99,
              105,
              97,
              108,
              32,
              76,
              111,
              103,
              105,
              110,
              115,
              26,
              112,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              108,
              105,
              110,
              107,
              101,
              100,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              47,
              115,
              111,
              99,
              105,
              97,
              108,
              32,
              108,
              111,
              103,
              105,
              110,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              40,
              101,
              46,
              32,
              71,
              111,
              111,
              103,
              108,
              101,
              44,
              32,
              77,
              105,
              99,
              114,
              111,
              115,
              111,
              102,
              116,
              44,
              32,
              65,
              122,
              117,
              114,
              101,
              65,
              68,
              44,
              32,
              101,
              116,
              99,
              46,
              41,
              114,
              225,
              1,
              10,
              222,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              200,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 117, 115, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              34,
              58,
              1,
              42,
              34,
              29,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              105,
              100,
              112,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    removeHumanLinkedIDP: {
      name: "RemoveHumanLinkedIDP",
      requestType: RemoveHumanLinkedIDPRequest,
      requestStream: false,
      responseType: RemoveHumanLinkedIDPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              245,
              3,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              19,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              83,
              111,
              99,
              105,
              97,
              108,
              32,
              76,
              111,
              103,
              105,
              110,
              26,
              242,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              115,
              111,
              99,
              105,
              97,
              108,
              32,
              108,
              111,
              103,
              105,
              110,
              115,
              47,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              40,
              101,
              46,
              103,
              46,
              32,
              71,
              111,
              111,
              103,
              108,
              101,
              44,
              32,
              77,
              105,
              99,
              114,
              111,
              115,
              111,
              102,
              116,
              44,
              32,
              65,
              122,
              117,
              114,
              101,
              65,
              68,
              44,
              32,
              101,
              116,
              99,
              46,
              41,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              100,
              111,
              101,
              115,
              32,
              104,
              97,
              118,
              101,
              32,
              111,
              116,
              104,
              101,
              114,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              105,
              101,
              115,
              32,
              116,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              46,
              114,
              225,
              1,
              10,
              222,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              200,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 117, 115, 101, 114, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              49,
              42,
              47,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              105,
              100,
              112,
              115,
              47,
              123,
              105,
              100,
              112,
              95,
              105,
              100,
              125,
              47,
              123,
              108,
              105,
              110,
              107,
              101,
              100,
              95,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listUserMemberships: {
      name: "ListUserMemberships",
      requestType: ListUserMembershipsRequest,
      requestStream: false,
      responseType: ListUserMembershipsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              202,
              2,
              10,
              5,
              85,
              115,
              101,
              114,
              115,
              18,
              24,
              76,
              105,
              115,
              116,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              80,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              26,
              67,
              83,
              104,
              111,
              119,
              32,
              97,
              108,
              108,
              32,
              116,
              104,
              101,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              40,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              77,
              97,
              110,
              97,
              103,
              101,
              114,
              41,
              46,
              114,
              225,
              1,
              10,
              222,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              200,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              22,
              10,
              20,
              117,
              115,
              101,
              114,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              46,
              114,
              101,
              97,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              41,
              58,
              1,
              42,
              34,
              36,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    getMyOrg: {
      name: "GetMyOrg",
      requestType: GetMyOrgRequest,
      requestStream: false,
      responseType: GetMyOrgResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              148,
              3,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              19,
              71,
              101,
              116,
              32,
              77,
              121,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              142,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              46,
              32,
              73,
              102,
              32,
              110,
              111,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([10, 10, 8, 111, 114, 103, 46, 114, 101, 97, 100])],
          578365826: [new Uint8Array([10, 18, 8, 47, 111, 114, 103, 115, 47, 109, 101])],
        },
      },
    },
    getOrgByDomainGlobal: {
      name: "GetOrgByDomainGlobal",
      requestType: GetOrgByDomainGlobalRequest,
      requestStream: false,
      responseType: GetOrgByDomainGlobalResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              136,
              1,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              26,
              71,
              101,
              116,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              66,
              121,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              26,
              91,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              98,
              121,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              44,
              32,
              111,
              118,
              101,
              114,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              109,
              117,
              115,
              116,
              32,
              109,
              97,
              116,
              99,
              104,
              32,
              101,
              120,
              97,
              99,
              116,
              108,
              121,
              46,
            ]),
          ],
          400002: [new Uint8Array([17, 10, 15, 111, 114, 103, 46, 103, 108, 111, 98, 97, 108, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              25,
              18,
              23,
              47,
              103,
              108,
              111,
              98,
              97,
              108,
              47,
              111,
              114,
              103,
              115,
              47,
              95,
              98,
              121,
              95,
              100,
              111,
              109,
              97,
              105,
              110,
            ]),
          ],
        },
      },
    },
    listOrgChanges: {
      name: "ListOrgChanges",
      requestType: ListOrgChangesRequest,
      requestStream: false,
      responseType: ListOrgChangesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              148,
              3,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              24,
              71,
              101,
              116,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              72,
              105,
              115,
              116,
              111,
              114,
              121,
              26,
              137,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              101,
              118,
              101,
              110,
              116,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              104,
              97,
              112,
              112,
              101,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              39,
              115,
              32,
              116,
              104,
              101,
              32,
              104,
              105,
              115,
              116,
              111,
              114,
              121,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              97,
              32,
              108,
              105,
              109,
              105,
              116,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([10, 10, 8, 111, 114, 103, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              29,
              58,
              1,
              42,
              34,
              24,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              47,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addOrg: {
      name: "AddOrg",
      requestType: AddOrgRequest,
      requestStream: false,
      responseType: AddOrgResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              136,
              3,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              19,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              130,
              1,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              66,
              97,
              115,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              110,
              97,
              109,
              101,
              32,
              97,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              121,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              105,
              110,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 111, 114, 103, 46, 99, 114, 101, 97, 116, 101])],
          578365826: [new Uint8Array([10, 58, 1, 42, 34, 5, 47, 111, 114, 103, 115])],
        },
      },
    },
    updateOrg: {
      name: "UpdateOrg",
      requestType: UpdateOrgRequest,
      requestStream: false,
      responseType: UpdateOrgResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              169,
              2,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              19,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              36,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              110,
              97,
              109,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 111, 114, 103, 46, 119, 114, 105, 116, 101])],
          578365826: [new Uint8Array([13, 58, 1, 42, 26, 8, 47, 111, 114, 103, 115, 47, 109, 101])],
        },
      },
    },
    deactivateOrg: {
      name: "DeactivateOrg",
      requestType: DeactivateOrgRequest,
      requestStream: false,
      responseType: DeactivateOrgResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              241,
              2,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              23,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              104,
              83,
              101,
              116,
              115,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              109,
              121,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              46,
              32,
              85,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              105,
              115,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 111, 114, 103, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              25,
              58,
              1,
              42,
              34,
              20,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              47,
              95,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    reactivateOrg: {
      name: "ReactivateOrg",
      requestType: ReactivateOrgRequest,
      requestStream: false,
      responseType: ReactivateOrgResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              186,
              3,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              23,
              82,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              176,
              1,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              109,
              121,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              32,
              85,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              105,
              115,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              97,
              103,
              97,
              105,
              110,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 111, 114, 103, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              25,
              58,
              1,
              42,
              34,
              20,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              47,
              95,
              114,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    removeOrg: {
      name: "RemoveOrg",
      requestType: RemoveOrgRequest,
      requestStream: false,
      responseType: RemoveOrgResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              153,
              3,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              19,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              26,
              147,
              1,
              68,
              101,
              108,
              101,
              116,
              101,
              115,
              32,
              109,
              121,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              108,
              108,
              32,
              105,
              116,
              115,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              32,
              40,
              85,
              115,
              101,
              114,
              115,
              44,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              44,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              32,
              116,
              111,
              32,
              97,
              110,
              100,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              41,
              46,
              32,
              85,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              105,
              115,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([12, 10, 10, 111, 114, 103, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [new Uint8Array([10, 42, 8, 47, 111, 114, 103, 115, 47, 109, 101])],
        },
      },
    },
    setOrgMetadata: {
      name: "SetOrgMetadata",
      requestType: SetOrgMetadataRequest,
      requestStream: false,
      responseType: SetOrgMetadataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              149,
              3,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              10,
              21,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              18,
              25,
              83,
              101,
              116,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              26,
              115,
              84,
              104,
              105,
              115,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              101,
              105,
              116,
              104,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              111,
              114,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              115,
              32,
              97,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              107,
              101,
              121,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              105,
              115,
              32,
              98,
              97,
              115,
              101,
              54,
              52,
              32,
              101,
              110,
              99,
              111,
              100,
              101,
              100,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 111, 114, 103, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              20,
              58,
              1,
              42,
              34,
              15,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              47,
              123,
              107,
              101,
              121,
              125,
            ]),
          ],
        },
      },
    },
    bulkSetOrgMetadata: {
      name: "BulkSetOrgMetadata",
      requestType: BulkSetOrgMetadataRequest,
      requestStream: false,
      responseType: BulkSetOrgMetadataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              138,
              3,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              10,
              21,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              18,
              30,
              66,
              117,
              108,
              107,
              32,
              83,
              101,
              116,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              26,
              99,
              84,
              104,
              105,
              115,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              115,
              101,
              116,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              118,
              97,
              108,
              117,
              101,
              115,
              32,
              97,
              114,
              101,
              32,
              98,
              97,
              115,
              101,
              54,
              52,
              32,
              101,
              110,
              99,
              111,
              100,
              101,
              100,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 111, 114, 103, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([20, 58, 1, 42, 34, 15, 47, 109, 101, 116, 97, 100, 97, 116, 97, 47, 95, 98, 117, 108, 107]),
          ],
        },
      },
    },
    listOrgMetadata: {
      name: "ListOrgMetadata",
      requestType: ListOrgMetadataRequest,
      requestStream: false,
      responseType: ListOrgMetadataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              224,
              2,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              10,
              21,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              18,
              28,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              26,
              59,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              116,
              101,
              114,
              101,
              100,
              32,
              98,
              121,
              32,
              121,
              111,
              117,
              114,
              32,
              113,
              117,
              101,
              114,
              121,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([10, 10, 8, 111, 114, 103, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              22,
              58,
              1,
              42,
              34,
              17,
              47,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    getOrgMetadata: {
      name: "GetOrgMetadata",
      requestType: GetOrgMetadataRequest,
      requestStream: false,
      responseType: GetOrgMetadataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              230,
              2,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              10,
              21,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              18,
              32,
              71,
              101,
              116,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              66,
              121,
              32,
              75,
              101,
              121,
              26,
              61,
              71,
              101,
              116,
              32,
              97,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              98,
              121,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              107,
              101,
              121,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([10, 10, 8, 111, 114, 103, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([17, 18, 15, 47, 109, 101, 116, 97, 100, 97, 116, 97, 47, 123, 107, 101, 121, 125]),
          ],
        },
      },
    },
    removeOrgMetadata: {
      name: "RemoveOrgMetadata",
      requestType: RemoveOrgMetadataRequest,
      requestStream: false,
      responseType: RemoveOrgMetadataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              238,
              2,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              10,
              21,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              18,
              35,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              66,
              121,
              32,
              75,
              101,
              121,
              26,
              66,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              107,
              101,
              121,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 111, 114, 103, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([17, 42, 15, 47, 109, 101, 116, 97, 100, 97, 116, 97, 47, 123, 107, 101, 121, 125]),
          ],
        },
      },
    },
    bulkRemoveOrgMetadata: {
      name: "BulkRemoveOrgMetadata",
      requestType: BulkRemoveOrgMetadataRequest,
      requestStream: false,
      responseType: BulkRemoveOrgMetadataResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              239,
              2,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              10,
              21,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              18,
              20,
              66,
              117,
              108,
              107,
              32,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              77,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              26,
              75,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              107,
              101,
              121,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 111, 114, 103, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([20, 58, 1, 42, 42, 15, 47, 109, 101, 116, 97, 100, 97, 116, 97, 47, 95, 98, 117, 108, 107]),
          ],
        },
      },
    },
    listOrgDomains: {
      name: "ListOrgDomains",
      requestType: ListOrgDomainsRequest,
      requestStream: false,
      responseType: ListOrgDomainsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              137,
              3,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              14,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              115,
              26,
              129,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              101,
              100,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              121,
              32,
              116,
              111,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              98,
              101,
              108,
              111,
              110,
              103,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([10, 10, 8, 111, 114, 103, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              29,
              58,
              1,
              42,
              34,
              24,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addOrgDomain: {
      name: "AddOrgDomain",
      requestType: AddOrgDomainRequest,
      requestStream: false,
      responseType: AddOrgDomainResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              238,
              2,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              10,
              65,
              100,
              100,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              26,
              107,
              65,
              100,
              100,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              116,
              111,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              121,
              32,
              116,
              111,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              98,
              101,
              108,
              111,
              110,
              103,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 111, 114, 103, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              21,
              58,
              1,
              42,
              34,
              16,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
            ]),
          ],
        },
      },
    },
    removeOrgDomain: {
      name: "RemoveOrgDomain",
      requestType: RemoveOrgDomainRequest,
      requestStream: false,
      responseType: RemoveOrgDomainResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              236,
              3,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              13,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              26,
              229,
              1,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              121,
              32,
              116,
              111,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              98,
              101,
              108,
              111,
              110,
              103,
              115,
              46,
              32,
              73,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              115,
              32,
              117,
              115,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              102,
              111,
              114,
              32,
              108,
              111,
              103,
              105,
              110,
              44,
              32,
              116,
              104,
              105,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              115,
              46,
              32,
              84,
              104,
              101,
              121,
              32,
              104,
              97,
              118,
              101,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              105,
              110,
              115,
              116,
              101,
              97,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 111, 114, 103, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              27,
              42,
              25,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              123,
              100,
              111,
              109,
              97,
              105,
              110,
              125,
            ]),
          ],
        },
      },
    },
    generateOrgDomainValidation: {
      name: "GenerateOrgDomainValidation",
      requestType: GenerateOrgDomainValidationRequest,
      requestStream: false,
      responseType: GenerateOrgDomainValidationResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              229,
              2,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              28,
              71,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              86,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              26,
              80,
              71,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              102,
              105,
              108,
              101,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              121,
              111,
              117,
              114,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              68,
              78,
              83,
              32,
              111,
              114,
              32,
              72,
              84,
              84,
              80,
              32,
              99,
              104,
              97,
              108,
              108,
              101,
              110,
              103,
              101,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 111, 114, 103, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              51,
              58,
              1,
              42,
              34,
              46,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              123,
              100,
              111,
              109,
              97,
              105,
              110,
              125,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              47,
              95,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    validateOrgDomain: {
      name: "ValidateOrgDomain",
      requestType: ValidateOrgDomainRequest,
      requestStream: false,
      responseType: ValidateOrgDomainResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              247,
              3,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              13,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              26,
              240,
              1,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              121,
              111,
              117,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              100,
              100,
              101,
              100,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              121,
              111,
              117,
              114,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              44,
              32,
              100,
              101,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              109,
              101,
              116,
              104,
              111,
              100,
              32,
              121,
              111,
              117,
              32,
              104,
              97,
              118,
              101,
              32,
              99,
              104,
              111,
              115,
              101,
              110,
              32,
              40,
              72,
              84,
              84,
              80,
              32,
              111,
              114,
              32,
              68,
              78,
              83,
              32,
              99,
              104,
              97,
              108,
              108,
              101,
              110,
              103,
              101,
              41,
              46,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              119,
              105,
              108,
              108,
              32,
              99,
              104,
              101,
              99,
              107,
              32,
              105,
              116,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              97,
              115,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              105,
              102,
              32,
              105,
              116,
              32,
              119,
              97,
              115,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              46,
              32,
              65,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              117,
              110,
              105,
              113,
              117,
              101,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 111, 114, 103, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              51,
              58,
              1,
              42,
              34,
              46,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              123,
              100,
              111,
              109,
              97,
              105,
              110,
              125,
              47,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              47,
              95,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    setPrimaryOrgDomain: {
      name: "SetPrimaryOrgDomain",
      requestType: SetPrimaryOrgDomainRequest,
      requestStream: false,
      responseType: SetPrimaryOrgDomainResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              196,
              3,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              18,
              83,
              101,
              116,
              32,
              80,
              114,
              105,
              109,
              97,
              114,
              121,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              26,
              184,
              1,
              83,
              101,
              116,
              32,
              97,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              97,
              115,
              32,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              46,
              32,
              73,
              116,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              115,
              101,
              116,
              32,
              97,
              115,
              32,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              46,
              32,
              84,
              104,
              101,
              32,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              97,
              115,
              32,
              115,
              117,
              102,
              102,
              105,
              120,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              115,
              32,
              97,
              115,
              32,
              112,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              32,
              108,
              111,
              103,
              105,
              110,
              110,
              97,
              109,
              101,
              32,
              111,
              110,
              32,
              116,
              104,
              105,
              115,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([11, 10, 9, 111, 114, 103, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              40,
              34,
              38,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              115,
              47,
              123,
              100,
              111,
              109,
              97,
              105,
              110,
              125,
              47,
              95,
              115,
              101,
              116,
              95,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
            ]),
          ],
        },
      },
    },
    listOrgMemberRoles: {
      name: "ListOrgMemberRoles",
      requestType: ListOrgMemberRolesRequest,
      requestStream: false,
      responseType: ListOrgMemberRolesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              223,
              3,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              30,
              76,
              105,
              115,
              116,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              32,
              82,
              111,
              108,
              101,
              115,
              26,
              166,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              108,
              108,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([17, 10, 15, 111, 114, 103, 46, 109, 101, 109, 98, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              29,
              34,
              27,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              114,
              111,
              108,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    listOrgMembers: {
      name: "ListOrgMembers",
      requestType: ListOrgMembersRequest,
      requestStream: false,
      responseType: ListOrgMembersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              145,
              4,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              25,
              76,
              105,
              115,
              116,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              26,
              221,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              108,
              108,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              115,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              108,
              101,
              118,
              101,
              108,
              44,
              32,
              109,
              97,
              116,
              99,
              104,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              65,
              78,
              68,
              32,
              108,
              105,
              110,
              107,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([17, 10, 15, 111, 114, 103, 46, 109, 101, 109, 98, 101, 114, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              29,
              58,
              1,
              42,
              34,
              24,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addOrgMember: {
      name: "AddOrgMember",
      requestType: AddOrgMemberRequest,
      requestStream: false,
      responseType: AddOrgMemberResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              231,
              3,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              23,
              65,
              100,
              100,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              26,
              181,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              117,
              115,
              101,
              114,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              108,
              101,
              118,
              101,
              108,
              32,
              119,
              105,
              116,
              104,
              32,
              111,
              110,
              101,
              32,
              111,
              114,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([18, 10, 16, 111, 114, 103, 46, 109, 101, 109, 98, 101, 114, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            new Uint8Array([
              21,
              58,
              1,
              42,
              34,
              16,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    updateOrgMember: {
      name: "UpdateOrgMember",
      requestType: UpdateOrgMemberRequest,
      requestStream: false,
      responseType: UpdateOrgMemberResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              162,
              4,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              26,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              26,
              237,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              32,
              84,
              104,
              101,
              32,
              119,
              104,
              111,
              108,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              108,
              105,
              115,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              121,
              111,
              117,
              32,
              100,
              111,
              110,
              39,
              116,
              32,
              119,
              97,
              110,
              116,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              32,
              40,
              114,
              101,
              109,
              111,
              118,
              101,
              41,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([18, 10, 16, 111, 114, 103, 46, 109, 101, 109, 98, 101, 114, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            new Uint8Array([
              31,
              58,
              1,
              42,
              26,
              26,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    removeOrgMember: {
      name: "RemoveOrgMember",
      requestType: RemoveOrgMemberRequest,
      requestStream: false,
      responseType: RemoveOrgMemberResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              137,
              4,
              10,
              13,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              26,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              79,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              26,
              212,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              110,
              32,
              97,
              110,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              99,
              97,
              110,
              32,
              115,
              116,
              105,
              108,
              108,
              32,
              104,
              97,
              118,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              111,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              108,
              101,
              118,
              101,
              108,
              32,
              40,
              105,
              97,
              109,
              44,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              41,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              19,
              10,
              17,
              111,
              114,
              103,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              28,
              42,
              26,
              47,
              111,
              114,
              103,
              115,
              47,
              109,
              101,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    getProjectByID: {
      name: "GetProjectByID",
      requestType: GetProjectByIDRequest,
      requestStream: false,
      responseType: GetProjectByIDResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              152,
              3,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              18,
              17,
              71,
              101,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              66,
              121,
              32,
              73,
              68,
              26,
              146,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              111,
              119,
              110,
              101,
              100,
              32,
              98,
              121,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              110,
              111,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              41,
              46,
              32,
              65,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              105,
              115,
              32,
              97,
              32,
              118,
              101,
              115,
              115,
              101,
              108,
              32,
              102,
              111,
              114,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              97,
              114,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              115,
              97,
              109,
              101,
              32,
              114,
              111,
              108,
              101,
              32,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([18, 10, 12, 112, 114, 111, 106, 101, 99, 116, 46, 114, 101, 97, 100, 18, 2, 73, 100]),
          ],
          578365826: [new Uint8Array([16, 18, 14, 47, 112, 114, 111, 106, 101, 99, 116, 115, 47, 123, 105, 100, 125])],
        },
      },
    },
    getGrantedProjectByID: {
      name: "GetGrantedProjectByID",
      requestType: GetGrantedProjectByIDRequest,
      requestStream: false,
      responseType: GetGrantedProjectByIDResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              173,
              3,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              18,
              25,
              71,
              101,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              66,
              121,
              32,
              73,
              68,
              26,
              159,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              111,
              119,
              110,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              109,
              121,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              65,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              105,
              115,
              32,
              97,
              32,
              118,
              101,
              115,
              115,
              101,
              108,
              32,
              102,
              111,
              114,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              97,
              114,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              115,
              97,
              109,
              101,
              32,
              114,
              111,
              108,
              101,
              32,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              23,
              10,
              12,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              114,
              101,
              97,
              100,
              18,
              7,
              71,
              114,
              97,
              110,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              50,
              18,
              48,
              47,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listProjects: {
      name: "ListProjects",
      requestType: ListProjectsRequest,
      requestStream: false,
      responseType: ListProjectsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              165,
              3,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              18,
              14,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              26,
              149,
              1,
              76,
              105,
              115,
              116,
              115,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              32,
              109,
              121,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              119,
              110,
              101,
              114,
              32,
              111,
              102,
              32,
              40,
              110,
              111,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              41,
              46,
              32,
              65,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              105,
              115,
              32,
              97,
              32,
              118,
              101,
              115,
              115,
              101,
              108,
              32,
              102,
              111,
              114,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              97,
              114,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              115,
              97,
              109,
              101,
              32,
              114,
              111,
              108,
              101,
              32,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 114, 111, 106, 101, 99, 116, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              22,
              58,
              1,
              42,
              34,
              17,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    listGrantedProjects: {
      name: "ListGrantedProjects",
      requestType: ListGrantedProjectsRequest,
      requestStream: false,
      responseType: ListGrantedProjectsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              173,
              3,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              18,
              22,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              71,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              26,
              149,
              1,
              76,
              105,
              115,
              116,
              115,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              32,
              109,
              121,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              103,
              111,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              65,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              105,
              115,
              32,
              97,
              32,
              118,
              101,
              115,
              115,
              101,
              108,
              32,
              102,
              111,
              114,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              97,
              114,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              115,
              97,
              109,
              101,
              32,
              114,
              111,
              108,
              101,
              32,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 114, 111, 106, 101, 99, 116, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              30,
              58,
              1,
              42,
              34,
              25,
              47,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    listGrantedProjectRoles: {
      name: "ListGrantedProjectRoles",
      requestType: ListGrantedProjectRolesRequest,
      requestStream: false,
      responseType: ListGrantedProjectRolesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              159,
              3,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              18,
              28,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              71,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              82,
              111,
              108,
              101,
              115,
              26,
              129,
              1,
              76,
              105,
              115,
              116,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              97,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              32,
              104,
              97,
              115,
              46,
              32,
              84,
              104,
              101,
              115,
              101,
              32,
              97,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              98,
              101,
              101,
              110,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              98,
              121,
              32,
              116,
              104,
              101,
              32,
              111,
              119,
              110,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              109,
              121,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              28,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              114,
              111,
              108,
              101,
              46,
              114,
              101,
              97,
              100,
              18,
              7,
              71,
              114,
              97,
              110,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              64,
              18,
              62,
              47,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              95,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              114,
              111,
              108,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    listProjectChanges: {
      name: "ListProjectChanges",
      requestType: ListProjectChangesRequest,
      requestStream: false,
      responseType: ListProjectChangesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              143,
              3,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              18,
              15,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              72,
              105,
              115,
              116,
              111,
              114,
              121,
              26,
              127,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              101,
              118,
              101,
              110,
              116,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              104,
              97,
              112,
              112,
              101,
              110,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              32,
              73,
              116,
              39,
              115,
              32,
              116,
              104,
              101,
              32,
              104,
              105,
              115,
              116,
              111,
              114,
              121,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              97,
              32,
              108,
              105,
              109,
              105,
              116,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              25,
              10,
              12,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              114,
              101,
              97,
              100,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              40,
              34,
              38,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addProject: {
      name: "AddProject",
      requestType: AddProjectRequest,
      requestStream: false,
      responseType: AddProjectResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              244,
              2,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              18,
              14,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              26,
              101,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              32,
              65,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              105,
              115,
              32,
              97,
              32,
              118,
              101,
              115,
              115,
              101,
              108,
              32,
              102,
              111,
              114,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              97,
              114,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              115,
              97,
              109,
              101,
              32,
              114,
              111,
              108,
              101,
              32,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([16, 10, 14, 112, 114, 111, 106, 101, 99, 116, 46, 99, 114, 101, 97, 116, 101])],
          578365826: [new Uint8Array([14, 58, 1, 42, 34, 9, 47, 112, 114, 111, 106, 101, 99, 116, 115])],
        },
      },
    },
    updateProject: {
      name: "UpdateProject",
      requestType: UpdateProjectRequest,
      requestStream: false,
      responseType: UpdateProjectResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              129,
              3,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              18,
              14,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              26,
              114,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              110,
              100,
              32,
              105,
              116,
              115,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              65,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              105,
              115,
              32,
              97,
              32,
              118,
              101,
              115,
              115,
              101,
              108,
              32,
              102,
              111,
              114,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              97,
              114,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              115,
              97,
              109,
              101,
              32,
              114,
              111,
              108,
              101,
              32,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([19, 10, 13, 112, 114, 111, 106, 101, 99, 116, 46, 119, 114, 105, 116, 101, 18, 2, 73, 100]),
          ],
          578365826: [
            new Uint8Array([19, 58, 1, 42, 26, 14, 47, 112, 114, 111, 106, 101, 99, 116, 115, 47, 123, 105, 100, 125]),
          ],
        },
      },
    },
    deactivateProject: {
      name: "DeactivateProject",
      requestType: DeactivateProjectRequest,
      requestStream: false,
      responseType: DeactivateProjectResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              253,
              2,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              18,
              18,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              26,
              106,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              116,
              111,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              46,
              32,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([19, 10, 13, 112, 114, 111, 106, 101, 99, 116, 46, 119, 114, 105, 116, 101, 18, 2, 73, 100]),
          ],
          578365826: [
            new Uint8Array([
              31,
              58,
              1,
              42,
              34,
              26,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    reactivateProject: {
      name: "ReactivateProject",
      requestType: ReactivateProjectRequest,
      requestStream: false,
      responseType: ReactivateProjectResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              244,
              2,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              18,
              18,
              82,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              26,
              97,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              46,
              32,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([19, 10, 13, 112, 114, 111, 106, 101, 99, 116, 46, 119, 114, 105, 116, 101, 18, 2, 73, 100]),
          ],
          578365826: [
            new Uint8Array([
              31,
              58,
              1,
              42,
              34,
              26,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              114,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    removeProject: {
      name: "RemoveProject",
      requestType: RemoveProjectRequest,
      requestStream: false,
      responseType: RemoveProjectResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              250,
              2,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              18,
              14,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              26,
              107,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              110,
              100,
              32,
              97,
              108,
              108,
              32,
              105,
              116,
              115,
              32,
              115,
              117,
              98,
              45,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              115,
              32,
              108,
              105,
              107,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              44,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              97,
              110,
              100,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              20,
              10,
              14,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              18,
              2,
              73,
              100,
            ]),
          ],
          578365826: [new Uint8Array([16, 42, 14, 47, 112, 114, 111, 106, 101, 99, 116, 115, 47, 123, 105, 100, 125])],
        },
      },
    },
    listProjectRoles: {
      name: "ListProjectRoles",
      requestType: ListProjectRolesRequest,
      requestStream: false,
      responseType: ListProjectRolesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              211,
              2,
              10,
              13,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              82,
              111,
              108,
              101,
              115,
              18,
              20,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              82,
              111,
              108,
              101,
              115,
              26,
              57,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              108,
              108,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              111,
              102,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              109,
              97,
              116,
              99,
              104,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              113,
              117,
              101,
              114,
              121,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              114,
              111,
              108,
              101,
              46,
              114,
              101,
              97,
              100,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              41,
              58,
              1,
              42,
              34,
              36,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              114,
              111,
              108,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addProjectRole: {
      name: "AddProjectRole",
      requestType: AddProjectRoleRequest,
      requestStream: false,
      responseType: AddProjectRoleResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              229,
              2,
              10,
              13,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              82,
              111,
              108,
              101,
              115,
              18,
              16,
              65,
              100,
              100,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              82,
              111,
              108,
              101,
              26,
              79,
              65,
              100,
              100,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              114,
              111,
              108,
              101,
              32,
              116,
              111,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              32,
              84,
              104,
              101,
              32,
              107,
              101,
              121,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              117,
              110,
              105,
              113,
              117,
              101,
              32,
              119,
              105,
              116,
              104,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              31,
              10,
              18,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              114,
              111,
              108,
              101,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              33,
              58,
              1,
              42,
              34,
              28,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              114,
              111,
              108,
              101,
              115,
            ]),
          ],
        },
      },
    },
    bulkAddProjectRoles: {
      name: "BulkAddProjectRoles",
      requestType: BulkAddProjectRolesRequest,
      requestStream: false,
      responseType: BulkAddProjectRolesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              232,
              2,
              10,
              13,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              82,
              111,
              108,
              101,
              115,
              18,
              21,
              66,
              117,
              108,
              107,
              32,
              65,
              100,
              100,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              82,
              111,
              108,
              101,
              26,
              77,
              65,
              100,
              100,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              116,
              111,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              32,
              84,
              104,
              101,
              32,
              107,
              101,
              121,
              115,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              117,
              110,
              105,
              113,
              117,
              101,
              32,
              119,
              105,
              116,
              104,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              31,
              10,
              18,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              114,
              111,
              108,
              101,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              39,
              58,
              1,
              42,
              34,
              34,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              114,
              111,
              108,
              101,
              115,
              47,
              95,
              98,
              117,
              108,
              107,
            ]),
          ],
        },
      },
    },
    updateProjectRole: {
      name: "UpdateProjectRole",
      requestType: UpdateProjectRoleRequest,
      requestStream: false,
      responseType: UpdateProjectRoleResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              134,
              3,
              10,
              13,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              82,
              111,
              108,
              101,
              115,
              18,
              19,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              82,
              111,
              108,
              101,
              26,
              109,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              114,
              111,
              108,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              107,
              101,
              121,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              101,
              100,
              105,
              116,
              97,
              98,
              108,
              101,
              46,
              32,
              73,
              102,
              32,
              97,
              32,
              107,
              101,
              121,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              44,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              32,
              97,
              110,
              100,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              111,
              110,
              101,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              31,
              10,
              18,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              114,
              111,
              108,
              101,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              44,
              58,
              1,
              42,
              26,
              39,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              114,
              111,
              108,
              101,
              115,
              47,
              123,
              114,
              111,
              108,
              101,
              95,
              107,
              101,
              121,
              125,
            ]),
          ],
        },
      },
    },
    removeProjectRole: {
      name: "RemoveProjectRole",
      requestType: RemoveProjectRoleRequest,
      requestStream: false,
      responseType: RemoveProjectRoleResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              147,
              3,
              10,
              13,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              82,
              111,
              108,
              101,
              115,
              18,
              19,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              82,
              111,
              108,
              101,
              26,
              122,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              110,
              100,
              32,
              111,
              110,
              32,
              101,
              118,
              101,
              114,
              121,
              32,
              114,
              101,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              105,
              116,
              32,
              104,
              97,
              115,
              32,
              97,
              32,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              99,
              121,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              115,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              32,
              97,
              110,
              100,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              32,
              10,
              19,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              114,
              111,
              108,
              101,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              41,
              42,
              39,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              114,
              111,
              108,
              101,
              115,
              47,
              123,
              114,
              111,
              108,
              101,
              95,
              107,
              101,
              121,
              125,
            ]),
          ],
        },
      },
    },
    listProjectMemberRoles: {
      name: "ListProjectMemberRoles",
      requestType: ListProjectMemberRolesRequest,
      requestStream: false,
      responseType: ListProjectMemberRolesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              208,
              3,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              25,
              76,
              105,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              32,
              82,
              111,
              108,
              101,
              115,
              26,
              161,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              108,
              108,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              21,
              10,
              19,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              114,
              101,
              97,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              33,
              34,
              31,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              114,
              111,
              108,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    listProjectMembers: {
      name: "ListProjectMembers",
      requestType: ListProjectMembersRequest,
      requestStream: false,
      responseType: ListProjectMembersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              130,
              4,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              20,
              76,
              105,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              26,
              216,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              108,
              108,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              115,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              44,
              32,
              109,
              97,
              116,
              99,
              104,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              65,
              78,
              68,
              32,
              108,
              105,
              110,
              107,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              32,
              10,
              19,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              114,
              101,
              97,
              100,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              43,
              58,
              1,
              42,
              34,
              38,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addProjectMember: {
      name: "AddProjectMember",
      requestType: AddProjectMemberRequest,
      requestStream: false,
      responseType: AddProjectMemberResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              216,
              3,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              18,
              65,
              100,
              100,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              26,
              176,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              117,
              115,
              101,
              114,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              32,
              119,
              105,
              116,
              104,
              32,
              111,
              110,
              101,
              32,
              111,
              114,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              33,
              10,
              20,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              35,
              58,
              1,
              42,
              34,
              30,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    updateProjectMember: {
      name: "UpdateProjectMember",
      requestType: UpdateProjectMemberRequest,
      requestStream: false,
      responseType: UpdateProjectMemberResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              152,
              4,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              21,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              26,
              237,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              32,
              84,
              104,
              101,
              32,
              119,
              104,
              111,
              108,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              108,
              105,
              115,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              121,
              111,
              117,
              32,
              100,
              111,
              110,
              39,
              116,
              32,
              119,
              97,
              110,
              116,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              32,
              40,
              114,
              101,
              109,
              111,
              118,
              101,
              41,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              33,
              10,
              20,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              45,
              58,
              1,
              42,
              26,
              40,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    removeProjectMember: {
      name: "RemoveProjectMember",
      requestType: RemoveProjectMemberRequest,
      requestStream: false,
      responseType: RemoveProjectMemberResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              131,
              4,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              21,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              26,
              216,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              110,
              32,
              97,
              110,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              99,
              97,
              110,
              32,
              115,
              116,
              105,
              108,
              108,
              32,
              104,
              97,
              118,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              111,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              108,
              101,
              118,
              101,
              108,
              32,
              40,
              105,
              97,
              109,
              44,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              41,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              34,
              10,
              21,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              42,
              42,
              40,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    getAppByID: {
      name: "GetAppByID",
      requestType: GetAppByIDRequest,
      requestStream: false,
      responseType: GetAppByIDResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              189,
              2,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              21,
              71,
              101,
              116,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              66,
              121,
              32,
              73,
              68,
              26,
              48,
              71,
              101,
              116,
              32,
              97,
              110,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              97,
              110,
              121,
              32,
              116,
              121,
              112,
              101,
              32,
              40,
              79,
              73,
              68,
              67,
              44,
              32,
              65,
              80,
              73,
              44,
              32,
              83,
              65,
              77,
              76,
              41,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              29,
              10,
              16,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              114,
              101,
              97,
              100,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              38,
              18,
              36,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listApps: {
      name: "ListApps",
      requestType: ListAppsRequest,
      requestStream: false,
      responseType: ListAppsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              216,
              2,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              19,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              26,
              64,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              108,
              108,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              119,
              105,
              116,
              104,
              105,
              110,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              109,
              97,
              116,
              99,
              104,
              32,
              116,
              104,
              101,
              32,
              113,
              117,
              101,
              114,
              121,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              29,
              10,
              16,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              114,
              101,
              97,
              100,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              40,
              58,
              1,
              42,
              34,
              35,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    listAppChanges: {
      name: "ListAppChanges",
      requestType: ListAppChangesRequest,
      requestStream: false,
      responseType: ListAppChangesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              151,
              3,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              19,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              72,
              105,
              115,
              116,
              111,
              114,
              121,
              26,
              127,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              101,
              118,
              101,
              110,
              116,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              104,
              97,
              112,
              112,
              101,
              110,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              39,
              115,
              32,
              116,
              104,
              101,
              32,
              104,
              105,
              115,
              116,
              111,
              114,
              121,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              97,
              112,
              112,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              97,
              32,
              108,
              105,
              109,
              105,
              116,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              29,
              10,
              16,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              114,
              101,
              97,
              100,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              54,
              34,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
              47,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addOIDCApp: {
      name: "AddOIDCApp",
      requestType: AddOIDCAppRequest,
      requestStream: false,
      responseType: AddOIDCAppResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              188,
              3,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              25,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              79,
              73,
              68,
              67,
              41,
              26,
              157,
              1,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              79,
              73,
              68,
              67,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              32,
              84,
              104,
              101,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              105,
              100,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              46,
              32,
              68,
              101,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              99,
              104,
              111,
              115,
              101,
              110,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              108,
              115,
              111,
              32,
              97,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              37,
              58,
              1,
              42,
              34,
              32,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              111,
              105,
              100,
              99,
            ]),
          ],
        },
      },
    },
    addSAMLApp: {
      name: "AddSAMLApp",
      requestType: AddSAMLAppRequest,
      requestStream: false,
      responseType: AddSAMLAppResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              204,
              2,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              25,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              83,
              65,
              77,
              76,
              41,
              26,
              46,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              83,
              65,
              77,
              76,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              32,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              73,
              68,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              37,
              58,
              1,
              42,
              34,
              32,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              115,
              97,
              109,
              108,
            ]),
          ],
        },
      },
    },
    addAPIApp: {
      name: "AddAPIApp",
      requestType: AddAPIAppRequest,
      requestStream: false,
      responseType: AddAPIAppResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              200,
              3,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              24,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              40,
              65,
              80,
              73,
              41,
              26,
              170,
              1,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              65,
              80,
              73,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              46,
              32,
              84,
              104,
              101,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              105,
              100,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              46,
              32,
              68,
              101,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              99,
              104,
              111,
              115,
              101,
              110,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              108,
              115,
              111,
              32,
              97,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              36,
              58,
              1,
              42,
              34,
              31,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              97,
              112,
              105,
            ]),
          ],
        },
      },
    },
    /** Changes application */
    updateApp: {
      name: "UpdateApp",
      requestType: UpdateAppRequest,
      requestStream: false,
      responseType: UpdateAppResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              165,
              3,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              18,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              26,
              141,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              98,
              97,
              115,
              105,
              99,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              100,
              111,
              101,
              115,
              110,
              39,
              116,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              105,
              110,
              102,
              111,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              104,
              97,
              116,
              32,
              97,
              114,
              101,
              32,
              100,
              101,
              112,
              101,
              110,
              100,
              101,
              110,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              121,
              112,
              101,
              32,
              40,
              79,
              73,
              68,
              67,
              44,
              32,
              65,
              80,
              73,
              44,
              32,
              83,
              65,
              77,
              76,
              41,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              41,
              58,
              1,
              42,
              26,
              36,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    updateOIDCAppConfig: {
      name: "UpdateOIDCAppConfig",
      requestType: UpdateOIDCAppConfigRequest,
      requestStream: false,
      responseType: UpdateOIDCAppConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              220,
              2,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              30,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              79,
              73,
              68,
              67,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              67,
              111,
              110,
              102,
              105,
              103,
              26,
              57,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              79,
              73,
              68,
              67,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              53,
              58,
              1,
              42,
              26,
              48,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
              47,
              111,
              105,
              100,
              99,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
    updateSAMLAppConfig: {
      name: "UpdateSAMLAppConfig",
      requestType: UpdateSAMLAppConfigRequest,
      requestStream: false,
      responseType: UpdateSAMLAppConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              220,
              2,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              30,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              83,
              65,
              77,
              76,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              67,
              111,
              110,
              102,
              105,
              103,
              26,
              57,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              83,
              65,
              77,
              76,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              53,
              58,
              1,
              42,
              26,
              48,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
              47,
              115,
              97,
              109,
              108,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
    updateAPIAppConfig: {
      name: "UpdateAPIAppConfig",
      requestType: UpdateAPIAppConfigRequest,
      requestStream: false,
      responseType: UpdateAPIAppConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              219,
              2,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              29,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              65,
              80,
              73,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              67,
              111,
              110,
              102,
              105,
              103,
              26,
              57,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              79,
              73,
              68,
              67,
              45,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              52,
              58,
              1,
              42,
              26,
              47,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              105,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
    deactivateApp: {
      name: "DeactivateApp",
      requestType: DeactivateAppRequest,
      requestStream: false,
      responseType: DeactivateAppResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              202,
              3,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              22,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              26,
              174,
              1,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              46,
              32,
              73,
              116,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              116,
              111,
              107,
              101,
              110,
              115,
              32,
              102,
              111,
              114,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              32,
              97,
              112,
              112,
              115,
              46,
              32,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              53,
              58,
              1,
              42,
              34,
              48,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
              47,
              95,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    reactivateApp: {
      name: "ReactivateApp",
      requestType: ReactivateAppRequest,
      requestStream: false,
      responseType: ReactivateAppResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              133,
              3,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              22,
              82,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              26,
              106,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              46,
              32,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              53,
              58,
              1,
              42,
              34,
              48,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
              47,
              95,
              114,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    removeApp: {
      name: "RemoveApp",
      requestType: RemoveAppRequest,
      requestStream: false,
      responseType: RemoveAppResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              169,
              3,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              18,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              26,
              145,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              110,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              116,
              111,
              107,
              101,
              110,
              115,
              32,
              102,
              111,
              114,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              32,
              97,
              112,
              112,
              115,
              46,
              32,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              31,
              10,
              18,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              38,
              42,
              36,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    regenerateOIDCClientSecret: {
      name: "RegenerateOIDCClientSecret",
      requestType: RegenerateOIDCClientSecretRequest,
      requestStream: false,
      responseType: RegenerateOIDCClientSecretResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              250,
              2,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              31,
              71,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              32,
              78,
              101,
              119,
              32,
              79,
              73,
              68,
              67,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              83,
              101,
              99,
              114,
              101,
              116,
              26,
              86,
              71,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              79,
              73,
              68,
              67,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              44,
              32,
              109,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              115,
              97,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              77,
              58,
              1,
              42,
              34,
              72,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
              47,
              111,
              105,
              100,
              99,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              47,
              95,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              95,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              115,
              101,
              99,
              114,
              101,
              116,
            ]),
          ],
        },
      },
    },
    regenerateAPIClientSecret: {
      name: "RegenerateAPIClientSecret",
      requestType: RegenerateAPIClientSecretRequest,
      requestStream: false,
      responseType: RegenerateAPIClientSecretResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              248,
              2,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              30,
              71,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              32,
              78,
              101,
              119,
              32,
              65,
              80,
              73,
              32,
              67,
              108,
              105,
              101,
              110,
              116,
              32,
              83,
              101,
              99,
              114,
              101,
              116,
              26,
              85,
              71,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              99,
              108,
              105,
              101,
              110,
              116,
              32,
              115,
              101,
              99,
              114,
              101,
              116,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              65,
              80,
              73,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              44,
              32,
              109,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              115,
              97,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              76,
              58,
              1,
              42,
              34,
              71,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              105,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
              47,
              95,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              95,
              99,
              108,
              105,
              101,
              110,
              116,
              95,
              115,
              101,
              99,
              114,
              101,
              116,
            ]),
          ],
        },
      },
    },
    getAppKey: {
      name: "GetAppKey",
      requestType: GetAppKeyRequest,
      requestStream: false,
      responseType: GetAppKeyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              233,
              2,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              25,
              71,
              101,
              116,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              75,
              101,
              121,
              32,
              66,
              121,
              32,
              73,
              68,
              26,
              75,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              107,
              101,
              121,
              46,
              32,
              75,
              101,
              121,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              105,
              110,
              103,
              32,
              65,
              80,
              73,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              29,
              10,
              16,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              114,
              101,
              97,
              100,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              52,
              18,
              50,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
              47,
              107,
              101,
              121,
              115,
              47,
              123,
              107,
              101,
              121,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listAppKeys: {
      name: "ListAppKeys",
      requestType: ListAppKeysRequest,
      requestStream: false,
      responseType: ListAppKeysResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              226,
              2,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              21,
              76,
              105,
              115,
              116,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              75,
              101,
              121,
              115,
              26,
              72,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              107,
              101,
              121,
              115,
              46,
              32,
              75,
              101,
              121,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              105,
              110,
              103,
              32,
              65,
              80,
              73,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              29,
              10,
              16,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              114,
              101,
              97,
              100,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              54,
              58,
              1,
              42,
              34,
              49,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
              47,
              107,
              101,
              121,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addAppKey: {
      name: "AddAppKey",
      requestType: AddAppKeyRequest,
      requestStream: false,
      responseType: AddAppKeyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              173,
              3,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              22,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              75,
              101,
              121,
              26,
              145,
              1,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              107,
              101,
              121,
              44,
              32,
              116,
              104,
              101,
              121,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              105,
              110,
              103,
              32,
              65,
              80,
              73,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              46,
              32,
              75,
              101,
              121,
              32,
              100,
              101,
              116,
              97,
              105,
              108,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              44,
              32,
              109,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              115,
              97,
              118,
              101,
              32,
              105,
              116,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              46,
              58,
              1,
              42,
              34,
              41,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
              47,
              107,
              101,
              121,
              115,
            ]),
          ],
        },
      },
    },
    removeAppKey: {
      name: "RemoveAppKey",
      requestType: RemoveAppKeyRequest,
      requestStream: false,
      responseType: RemoveAppKeyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              253,
              2,
              10,
              12,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              18,
              22,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              65,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              75,
              101,
              121,
              26,
              98,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              110,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              107,
              101,
              121,
              46,
              32,
              84,
              104,
              101,
              32,
              65,
              80,
              73,
              32,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              107,
              101,
              121,
              32,
              97,
              110,
              121,
              109,
              111,
              114,
              101,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              30,
              10,
              17,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              97,
              112,
              112,
              46,
              119,
              114,
              105,
              116,
              101,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              52,
              42,
              50,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              97,
              112,
              112,
              115,
              47,
              123,
              97,
              112,
              112,
              95,
              105,
              100,
              125,
              47,
              107,
              101,
              121,
              115,
              47,
              123,
              107,
              101,
              121,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listProjectGrantChanges: {
      name: "ListProjectGrantChanges",
      requestType: ListProjectGrantChangesRequest,
      requestStream: false,
      responseType: ListProjectGrantChangesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              156,
              3,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              18,
              21,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              32,
              72,
              105,
              115,
              116,
              111,
              114,
              121,
              26,
              133,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              101,
              118,
              101,
              110,
              116,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              104,
              97,
              112,
              112,
              101,
              110,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              46,
              32,
              73,
              116,
              39,
              115,
              32,
              116,
              104,
              101,
              32,
              104,
              105,
              115,
              116,
              111,
              114,
              121,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              97,
              32,
              108,
              105,
              109,
              105,
              116,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              29,
              10,
              18,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              114,
              101,
              97,
              100,
              18,
              7,
              71,
              114,
              97,
              110,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              58,
              34,
              56,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    getProjectGrantByID: {
      name: "GetProjectGrantByID",
      requestType: GetProjectGrantByIDRequest,
      requestStream: false,
      responseType: GetProjectGrantByIDResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              129,
              3,
              10,
              8,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              18,
              19,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              32,
              66,
              121,
              32,
              73,
              68,
              26,
              109,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              46,
              32,
              65,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              105,
              115,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              32,
              105,
              116,
              115,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              116,
              111,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              20,
              10,
              18,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              114,
              101,
              97,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              42,
              18,
              40,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listProjectGrants: {
      name: "ListProjectGrants",
      requestType: ListProjectGrantsRequest,
      requestStream: false,
      responseType: ListProjectGrantsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              183,
              3,
              10,
              14,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              34,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              26,
              141,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              32,
              65,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              105,
              115,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              32,
              105,
              116,
              115,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              116,
              111,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              31,
              10,
              18,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              114,
              101,
              97,
              100,
              18,
              9,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              73,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              42,
              58,
              1,
              42,
              34,
              37,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    listAllProjectGrants: {
      name: "ListAllProjectGrants",
      requestType: ListAllProjectGrantsRequest,
      requestStream: false,
      responseType: ListAllProjectGrantsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              146,
              3,
              10,
              14,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              21,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              26,
              118,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              46,
              32,
              65,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              105,
              115,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              32,
              105,
              116,
              115,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              116,
              111,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              20,
              10,
              18,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              114,
              101,
              97,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              27,
              58,
              1,
              42,
              34,
              22,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addProjectGrant: {
      name: "AddProjectGrant",
      requestType: AddProjectGrantRequest,
      requestStream: false,
      responseType: AddProjectGrantResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              138,
              4,
              10,
              14,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              17,
              65,
              100,
              100,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              26,
              241,
              1,
              71,
              114,
              97,
              110,
              116,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              116,
              111,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              97,
              108,
              108,
              111,
              119,
              32,
              116,
              104,
              101,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              110,
              100,
              32,
              109,
              97,
              110,
              97,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              111,
              114,
              32,
              105,
              116,
              115,
              32,
              117,
              115,
              101,
              114,
              115,
              46,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              108,
              105,
              115,
              116,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              21,
              10,
              19,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              34,
              58,
              1,
              42,
              34,
              29,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    updateProjectGrant: {
      name: "UpdateProjectGrant",
      requestType: UpdateProjectGrantRequest,
      requestStream: false,
      responseType: UpdateProjectGrantResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              173,
              4,
              10,
              14,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              20,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              26,
              145,
              2,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              97,
              108,
              108,
              111,
              119,
              32,
              116,
              104,
              101,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              110,
              100,
              32,
              109,
              97,
              110,
              97,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              102,
              111,
              114,
              32,
              105,
              116,
              115,
              32,
              117,
              115,
              101,
              114,
              115,
              46,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              108,
              105,
              115,
              116,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              21,
              10,
              19,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              45,
              58,
              1,
              42,
              26,
              40,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    deactivateProjectGrant: {
      name: "DeactivateProjectGrant",
      requestType: DeactivateProjectGrantRequest,
      requestStream: false,
      responseType: DeactivateProjectGrantResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              134,
              3,
              10,
              14,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              24,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              26,
              103,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              116,
              111,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              21,
              10,
              19,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              95,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    reactivateProjectGrant: {
      name: "ReactivateProjectGrant",
      requestType: ReactivateProjectGrantRequest,
      requestStream: false,
      responseType: ReactivateProjectGrantResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              134,
              3,
              10,
              14,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              24,
              82,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              26,
              103,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              114,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              21,
              10,
              19,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              95,
              114,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    removeProjectGrant: {
      name: "RemoveProjectGrant",
      requestType: RemoveProjectGrantRequest,
      requestStream: false,
      responseType: RemoveProjectGrantResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              195,
              3,
              10,
              14,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              20,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              26,
              167,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              46,
              32,
              65,
              108,
              108,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              105,
              115,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              97,
              108,
              115,
              111,
              32,
              98,
              101,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              46,
              32,
              65,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              32,
              40,
              105,
              102,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              99,
              104,
              101,
              99,
              107,
              101,
              100,
              41,
              46,
              114,
              240,
              1,
              10,
              237,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              215,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              103,
              101,
              116,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              22,
              10,
              20,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              42,
              42,
              40,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listProjectGrantMemberRoles: {
      name: "ListProjectGrantMemberRoles",
      requestType: ListProjectGrantMemberRolesRequest,
      requestStream: false,
      responseType: ListProjectGrantMemberRolesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              226,
              3,
              10,
              14,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              31,
              76,
              105,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              32,
              82,
              111,
              108,
              101,
              115,
              26,
              167,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              108,
              108,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              27,
              10,
              25,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              114,
              101,
              97,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              40,
              34,
              38,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              114,
              111,
              108,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    listProjectGrantMembers: {
      name: "ListProjectGrantMembers",
      requestType: ListProjectGrantMembersRequest,
      requestStream: false,
      responseType: ListProjectGrantMembersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              142,
              4,
              10,
              14,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              20,
              76,
              105,
              115,
              116,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              26,
              222,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              108,
              108,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              104,
              105,
              112,
              115,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              44,
              32,
              109,
              97,
              116,
              99,
              104,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              65,
              78,
              68,
              32,
              108,
              105,
              110,
              107,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              27,
              10,
              25,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              114,
              101,
              97,
              100,
            ]),
          ],
          578365826: [
            new Uint8Array([
              61,
              58,
              1,
              42,
              34,
              56,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addProjectGrantMember: {
      name: "AddProjectGrantMember",
      requestType: AddProjectGrantMemberRequest,
      requestStream: false,
      responseType: AddProjectGrantMemberResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              234,
              3,
              10,
              14,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              24,
              65,
              100,
              100,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              26,
              182,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              117,
              115,
              101,
              114,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              32,
              119,
              105,
              116,
              104,
              32,
              111,
              110,
              101,
              32,
              111,
              114,
              32,
              109,
              117,
              108,
              116,
              105,
              112,
              108,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              28,
              10,
              26,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              53,
              58,
              1,
              42,
              34,
              48,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
            ]),
          ],
        },
      },
    },
    updateProjectGrantMember: {
      name: "UpdateProjectGrantMember",
      requestType: UpdateProjectGrantMemberRequest,
      requestStream: false,
      responseType: UpdateProjectGrantMemberResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              164,
              4,
              10,
              14,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              27,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              26,
              237,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              32,
              84,
              104,
              101,
              32,
              119,
              104,
              111,
              108,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              108,
              105,
              115,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              121,
              111,
              117,
              32,
              100,
              111,
              110,
              39,
              116,
              32,
              119,
              97,
              110,
              116,
              32,
              116,
              111,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              32,
              40,
              114,
              101,
              109,
              111,
              118,
              101,
              41,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              28,
              10,
              26,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              119,
              114,
              105,
              116,
              101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              63,
              58,
              1,
              42,
              26,
              58,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    removeProjectGrantMember: {
      name: "RemoveProjectGrantMember",
      requestType: RemoveProjectGrantMemberRequest,
      requestStream: false,
      responseType: RemoveProjectGrantMemberResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              157,
              4,
              10,
              14,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              10,
              7,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              10,
              22,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              65,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              115,
              18,
              27,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              80,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              71,
              114,
              97,
              110,
              116,
              32,
              77,
              101,
              109,
              98,
              101,
              114,
              26,
              230,
              1,
              77,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              111,
              110,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              115,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              110,
              32,
              97,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              99,
              97,
              110,
              32,
              115,
              116,
              105,
              108,
              108,
              32,
              104,
              97,
              118,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              111,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              108,
              101,
              118,
              101,
              108,
              32,
              40,
              105,
              97,
              109,
              44,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              44,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              41,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              29,
              10,
              27,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              109,
              101,
              109,
              98,
              101,
              114,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              60,
              42,
              58,
              47,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              123,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              109,
              101,
              109,
              98,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    getUserGrantByID: {
      name: "GetUserGrantByID",
      requestType: GetUserGrantByIDRequest,
      requestStream: false,
      responseType: GetUserGrantByIDResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              238,
              2,
              10,
              11,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              16,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              32,
              66,
              121,
              32,
              73,
              68,
              26,
              103,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              112,
              101,
              114,
              32,
              73,
              68,
              46,
              32,
              65,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              105,
              115,
              32,
              97,
              32,
              114,
              111,
              108,
              101,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              110,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([17, 10, 15, 117, 115, 101, 114, 46, 103, 114, 97, 110, 116, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              36,
              18,
              34,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listUserGrants: {
      name: "ListUserGrants",
      requestType: ListUserGrantRequest,
      requestStream: false,
      responseType: ListUserGrantResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              148,
              3,
              10,
              11,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              18,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              26,
              138,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              109,
              97,
              116,
              99,
              104,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              97,
              114,
              99,
              104,
              32,
              113,
              117,
              101,
              114,
              105,
              101,
              115,
              46,
              32,
              85,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              32,
              97,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              104,
              97,
              118,
              101,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              110,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([17, 10, 15, 117, 115, 101, 114, 46, 103, 114, 97, 110, 116, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              26,
              58,
              1,
              42,
              34,
              21,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addUserGrant: {
      name: "AddUserGrant",
      requestType: AddUserGrantRequest,
      requestStream: false,
      responseType: AddUserGrantResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              248,
              2,
              10,
              11,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              14,
              65,
              100,
              100,
              32,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              26,
              115,
              65,
              100,
              100,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              85,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              32,
              97,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              104,
              97,
              118,
              101,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              110,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([18, 10, 16, 117, 115, 101, 114, 46, 103, 114, 97, 110, 116, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            new Uint8Array([
              28,
              58,
              1,
              42,
              34,
              23,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
            ]),
          ],
        },
      },
    },
    updateUserGrant: {
      name: "UpdateUserGrant",
      requestType: UpdateUserGrantRequest,
      requestStream: false,
      responseType: UpdateUserGrantResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              248,
              2,
              10,
              11,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              18,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              26,
              111,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              111,
              102,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              46,
              32,
              85,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              32,
              97,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              104,
              97,
              118,
              101,
              32,
              102,
              111,
              114,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              110,
              100,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([18, 10, 16, 117, 115, 101, 114, 46, 103, 114, 97, 110, 116, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            new Uint8Array([
              39,
              58,
              1,
              42,
              26,
              34,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    deactivateUserGrant: {
      name: "DeactivateUserGrant",
      requestType: DeactivateUserGrantRequest,
      requestStream: false,
      responseType: DeactivateUserGrantResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              236,
              3,
              10,
              11,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              21,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              26,
              223,
              1,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              32,
              116,
              104,
              101,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              110,
              121,
              109,
              111,
              114,
              101,
              46,
              32,
              65,
              108,
              115,
              111,
              44,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              116,
              111,
              107,
              101,
              110,
              115,
              32,
              119,
              104,
              101,
              110,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              46,
              32,
              65,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([18, 10, 16, 117, 115, 101, 114, 46, 103, 114, 97, 110, 116, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            new Uint8Array([
              51,
              58,
              1,
              42,
              34,
              46,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              95,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    reactivateUserGrant: {
      name: "ReactivateUserGrant",
      requestType: ReactivateUserGrantRequest,
      requestStream: false,
      responseType: ReactivateUserGrantResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              169,
              3,
              10,
              11,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              21,
              82,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              26,
              156,
              1,
              82,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              97,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              32,
              116,
              104,
              101,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              103,
              97,
              105,
              110,
              46,
              32,
              65,
              110,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              116,
              117,
              114,
              110,
              101,
              100,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([18, 10, 16, 117, 115, 101, 114, 46, 103, 114, 97, 110, 116, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            new Uint8Array([
              51,
              58,
              1,
              42,
              34,
              46,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
              47,
              95,
              114,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    removeUserGrant: {
      name: "RemoveUserGrant",
      requestType: RemoveUserGrantRequest,
      requestStream: false,
      responseType: RemoveUserGrantResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              175,
              3,
              10,
              11,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              17,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              26,
              166,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              32,
              116,
              104,
              101,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              110,
              121,
              109,
              111,
              114,
              101,
              46,
              32,
              65,
              108,
              115,
              111,
              44,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              116,
              111,
              107,
              101,
              110,
              115,
              32,
              119,
              104,
              101,
              110,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              19,
              10,
              17,
              117,
              115,
              101,
              114,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              36,
              42,
              34,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              123,
              117,
              115,
              101,
              114,
              95,
              105,
              100,
              125,
              47,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              123,
              103,
              114,
              97,
              110,
              116,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    bulkRemoveUserGrant: {
      name: "BulkRemoveUserGrant",
      requestType: BulkRemoveUserGrantRequest,
      requestStream: false,
      responseType: BulkRemoveUserGrantResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              174,
              3,
              10,
              11,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              18,
              23,
              66,
              117,
              108,
              107,
              32,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              85,
              115,
              101,
              114,
              32,
              71,
              114,
              97,
              110,
              116,
              115,
              26,
              159,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              117,
              115,
              101,
              114,
              32,
              103,
              114,
              97,
              110,
              116,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              32,
              116,
              104,
              101,
              32,
              103,
              114,
              97,
              110,
              116,
              101,
              100,
              32,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              32,
              97,
              110,
              121,
              109,
              111,
              114,
              101,
              46,
              32,
              65,
              108,
              115,
              111,
              44,
              32,
              116,
              104,
              101,
              32,
              114,
              111,
              108,
              101,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              116,
              111,
              107,
              101,
              110,
              115,
              32,
              119,
              104,
              101,
              110,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              19,
              10,
              17,
              117,
              115,
              101,
              114,
              46,
              103,
              114,
              97,
              110,
              116,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
          578365826: [
            new Uint8Array([
              23,
              58,
              1,
              42,
              42,
              18,
              47,
              117,
              115,
              101,
              114,
              95,
              103,
              114,
              97,
              110,
              116,
              115,
              47,
              95,
              98,
              117,
              108,
              107,
            ]),
          ],
        },
      },
    },
    /** deprecated: please use DomainPolicy instead */
    getOrgIAMPolicy: {
      name: "GetOrgIAMPolicy",
      requestType: GetOrgIAMPolicyRequest,
      requestStream: false,
      responseType: GetOrgIAMPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              82,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              18,
              71,
              101,
              116,
              32,
              79,
              114,
              103,
              32,
              73,
              65,
              77,
              32,
              80,
              111,
              108,
              105,
              99,
              121,
              26,
              31,
              85,
              115,
              101,
              32,
              71,
              101,
              116,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              105,
              110,
              115,
              116,
              101,
              97,
              100,
              88,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
          578365826: [
            new Uint8Array([18, 18, 16, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 111, 114, 103, 105, 97, 109]),
          ],
        },
      },
    },
    getDomainPolicy: {
      name: "GetDomainPolicy",
      requestType: GetDomainPolicyRequest,
      requestStream: false,
      responseType: GetDomainPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              225,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              15,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              17,
              71,
              101,
              116,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              80,
              111,
              108,
              105,
              99,
              121,
              26,
              75,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              40,
              116,
              104,
              105,
              115,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              105,
              115,
              32,
              109,
              97,
              110,
              97,
              103,
              101,
              100,
              32,
              98,
              121,
              32,
              116,
              104,
              101,
              32,
              73,
              65,
              77,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              41,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
          578365826: [
            new Uint8Array([18, 18, 16, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 100, 111, 109, 97, 105, 110]),
          ],
        },
      },
    },
    getLoginPolicy: {
      name: "GetLoginPolicy",
      requestType: GetLoginPolicyRequest,
      requestStream: false,
      responseType: GetLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              195,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              18,
              71,
              101,
              116,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              172,
              2,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              97,
              115,
              32,
              115,
              111,
              111,
              110,
              32,
              97,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              100,
              32,
              40,
              115,
              99,
              111,
              112,
              101,
              44,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              41,
              46,
              32,
              84,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              115,
              32,
              119,
              104,
              97,
              116,
              32,
              107,
              105,
              110,
              100,
              32,
              111,
              102,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              105,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              118,
              101,
              46,
              32,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              108,
              121,
              32,
              115,
              112,
              101,
              97,
              107,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              98,
              101,
              104,
              97,
              118,
              105,
              111,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([17, 18, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 111, 103, 105, 110]),
          ],
        },
      },
    },
    getDefaultLoginPolicy: {
      name: "GetDefaultLoginPolicy",
      requestType: GetDefaultLoginPolicyRequest,
      requestStream: false,
      responseType: GetDefaultLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              247,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              26,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              216,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              84,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              115,
              32,
              119,
              104,
              97,
              116,
              32,
              107,
              105,
              110,
              100,
              32,
              111,
              102,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              105,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              118,
              101,
              46,
              32,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              108,
              121,
              32,
              115,
              112,
              101,
              97,
              107,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              98,
              101,
              104,
              97,
              118,
              105,
              111,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              25,
              18,
              23,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              108,
              111,
              103,
              105,
              110,
            ]),
          ],
        },
      },
    },
    addCustomLoginPolicy: {
      name: "AddCustomLoginPolicy",
      requestType: AddCustomLoginPolicyRequest,
      requestStream: false,
      responseType: AddCustomLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              166,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              28,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              133,
              2,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              114,
              101,
              102,
              111,
              114,
              101,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              105,
              115,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              115,
              32,
              119,
              104,
              97,
              116,
              32,
              107,
              105,
              110,
              100,
              32,
              111,
              102,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              105,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              118,
              101,
              46,
              32,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              108,
              121,
              32,
              115,
              112,
              101,
              97,
              107,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              98,
              101,
              104,
              97,
              118,
              105,
              111,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              20,
              58,
              1,
              42,
              34,
              15,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
            ]),
          ],
        },
      },
    },
    updateCustomLoginPolicy: {
      name: "UpdateCustomLoginPolicy",
      requestType: UpdateCustomLoginPolicyRequest,
      requestStream: false,
      responseType: UpdateCustomLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              163,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              28,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              130,
              2,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              105,
              115,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              115,
              32,
              119,
              104,
              97,
              116,
              32,
              107,
              105,
              110,
              100,
              32,
              111,
              102,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              105,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              118,
              101,
              46,
              32,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              108,
              121,
              32,
              115,
              112,
              101,
              97,
              107,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              98,
              101,
              104,
              97,
              118,
              105,
              111,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              20,
              58,
              1,
              42,
              26,
              15,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
            ]),
          ],
        },
      },
    },
    resetLoginPolicyToDefault: {
      name: "ResetLoginPolicyToDefault",
      requestType: ResetLoginPolicyToDefaultRequest,
      requestStream: false,
      responseType: ResetLoginPolicyToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              181,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              38,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              138,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              101,
              100,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              115,
              32,
              119,
              104,
              97,
              116,
              32,
              107,
              105,
              110,
              100,
              32,
              111,
              102,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              105,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              104,
              97,
              118,
              101,
              46,
              32,
              71,
              101,
              110,
              101,
              114,
              97,
              108,
              108,
              121,
              32,
              115,
              112,
              101,
              97,
              107,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              98,
              101,
              104,
              97,
              118,
              105,
              111,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([17, 42, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 111, 103, 105, 110]),
          ],
        },
      },
    },
    listLoginPolicyIDPs: {
      name: "ListLoginPolicyIDPs",
      requestType: ListLoginPolicyIDPsRequest,
      requestStream: false,
      responseType: ListLoginPolicyIDPsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              164,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              30,
              76,
              105,
              115,
              116,
              32,
              76,
              105,
              110,
              107,
              101,
              100,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              26,
              237,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              97,
              114,
              101,
              32,
              108,
              105,
              110,
              107,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              109,
              101,
              97,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              116,
              104,
              101,
              121,
              32,
              97,
              114,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              46,
              32,
              84,
              104,
              101,
              121,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              100,
              32,
              40,
              112,
              101,
              114,
              32,
              115,
              99,
              111,
              112,
              101,
              32,
              111,
              114,
              32,
              117,
              115,
              101,
              114,
              41,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              33,
              58,
              1,
              42,
              34,
              28,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              105,
              100,
              112,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addIDPToLoginPolicy: {
      name: "AddIDPToLoginPolicy",
      requestType: AddIDPToLoginPolicyRequest,
      requestStream: false,
      responseType: AddIDPToLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              150,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              28,
              65,
              100,
              100,
              32,
              76,
              105,
              110,
              107,
              101,
              100,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              225,
              1,
              65,
              100,
              100,
              47,
              108,
              105,
              110,
              107,
              32,
              97,
              32,
              112,
              114,
              101,
              45,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              109,
              101,
              97,
              110,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              97,
              103,
              101,
              46,
              32,
              84,
              104,
              101,
              121,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              100,
              32,
              40,
              112,
              101,
              114,
              32,
              115,
              99,
              111,
              112,
              101,
              32,
              111,
              114,
              32,
              117,
              115,
              101,
              114,
              41,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              25,
              58,
              1,
              42,
              34,
              20,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              105,
              100,
              112,
              115,
            ]),
          ],
        },
      },
    },
    removeIDPFromLoginPolicy: {
      name: "RemoveIDPFromLoginPolicy",
      requestType: RemoveIDPFromLoginPolicyRequest,
      requestStream: false,
      responseType: RemoveIDPFromLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              197,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              31,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              76,
              105,
              110,
              107,
              101,
              100,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              26,
              141,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              110,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              109,
              101,
              97,
              110,
              115,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              112,
              97,
              103,
              101,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              31,
              42,
              29,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              105,
              100,
              112,
              115,
              47,
              123,
              105,
              100,
              112,
              95,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listLoginPolicySecondFactors: {
      name: "ListLoginPolicySecondFactors",
      requestType: ListLoginPolicySecondFactorsRequest,
      requestStream: false,
      responseType: ListLoginPolicySecondFactorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              155,
              5,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              22,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              104,
              111,
              100,
              115,
              18,
              25,
              76,
              105,
              115,
              116,
              32,
              83,
              101,
              99,
              111,
              110,
              100,
              32,
              70,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              40,
              50,
              70,
              65,
              41,
              26,
              229,
              2,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              40,
              50,
              70,
              65,
              41,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              108,
              97,
              121,
              101,
              114,
              32,
              111,
              102,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              65,
              112,
              112,
              44,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              80,
              114,
              105,
              110,
              116,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              41,
              46,
              32,
              80,
              101,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              44,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              102,
              116,
              101,
              114,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              85,
              73,
              32,
              119,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              105,
              122,
              101,
              32,
              105,
              116,
              32,
              97,
              115,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              40,
              34,
              38,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              115,
              101,
              99,
              111,
              110,
              100,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addSecondFactorToLoginPolicy: {
      name: "AddSecondFactorToLoginPolicy",
      requestType: AddSecondFactorToLoginPolicyRequest,
      requestStream: false,
      responseType: AddSecondFactorToLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              132,
              6,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              22,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              104,
              111,
              100,
              115,
              18,
              23,
              65,
              100,
              100,
              32,
              83,
              101,
              99,
              111,
              110,
              100,
              32,
              70,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              50,
              70,
              65,
              41,
              26,
              208,
              3,
              65,
              100,
              100,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              50,
              70,
              65,
              41,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              85,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              104,
              97,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              121,
              32,
              116,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              116,
              111,
              32,
              97,
              100,
              100,
              32,
              109,
              111,
              114,
              101,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              116,
              111,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              65,
              112,
              112,
              44,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              80,
              114,
              105,
              110,
              116,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              41,
              46,
              32,
              80,
              101,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              44,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              97,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              102,
              116,
              101,
              114,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              85,
              73,
              32,
              119,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              105,
              122,
              101,
              32,
              116,
              104,
              105,
              115,
              32,
              97,
              115,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              35,
              58,
              1,
              42,
              34,
              30,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              115,
              101,
              99,
              111,
              110,
              100,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    removeSecondFactorFromLoginPolicy: {
      name: "RemoveSecondFactorFromLoginPolicy",
      requestType: RemoveSecondFactorFromLoginPolicyRequest,
      requestStream: false,
      responseType: RemoveSecondFactorFromLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              225,
              5,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              22,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              104,
              111,
              100,
              115,
              18,
              26,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              83,
              101,
              99,
              111,
              110,
              100,
              32,
              70,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              50,
              70,
              65,
              41,
              26,
              170,
              3,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              50,
              70,
              65,
              41,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              85,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              108,
              97,
              121,
              101,
              114,
              32,
              111,
              102,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              65,
              112,
              112,
              44,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              80,
              114,
              105,
              110,
              116,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              41,
              46,
              32,
              80,
              101,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              44,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              102,
              116,
              101,
              114,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              85,
              73,
              32,
              119,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              105,
              122,
              101,
              32,
              105,
              116,
              32,
              97,
              115,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              39,
              42,
              37,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              115,
              101,
              99,
              111,
              110,
              100,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              47,
              123,
              116,
              121,
              112,
              101,
              125,
            ]),
          ],
        },
      },
    },
    listLoginPolicyMultiFactors: {
      name: "ListLoginPolicyMultiFactors",
      requestType: ListLoginPolicyMultiFactorsRequest,
      requestStream: false,
      responseType: ListLoginPolicyMultiFactorsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              232,
              5,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              22,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              104,
              111,
              100,
              115,
              18,
              24,
              76,
              105,
              115,
              116,
              32,
              77,
              117,
              108,
              116,
              105,
              32,
              70,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              40,
              77,
              70,
              65,
              41,
              26,
              179,
              3,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              109,
              117,
              108,
              116,
              105,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              40,
              77,
              70,
              65,
              41,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              108,
              97,
              121,
              101,
              114,
              32,
              111,
              102,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              65,
              112,
              112,
              44,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              80,
              114,
              105,
              110,
              116,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              41,
              46,
              32,
              32,
              80,
              101,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              44,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              109,
              117,
              108,
              116,
              105,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              102,
              105,
              114,
              115,
              116,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              110,
              101,
              99,
              101,
              115,
              115,
              97,
              114,
              121,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              85,
              73,
              32,
              119,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              105,
              122,
              101,
              32,
              105,
              116,
              32,
              97,
              115,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              38,
              34,
              36,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              97,
              117,
              116,
              104,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    addMultiFactorToLoginPolicy: {
      name: "AddMultiFactorToLoginPolicy",
      requestType: AddMultiFactorToLoginPolicyRequest,
      requestStream: false,
      responseType: AddMultiFactorToLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              140,
              6,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              22,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              104,
              111,
              100,
              115,
              18,
              22,
              65,
              100,
              100,
              32,
              77,
              117,
              108,
              116,
              105,
              45,
              70,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              77,
              70,
              65,
              41,
              26,
              217,
              3,
              65,
              100,
              100,
              32,
              97,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              77,
              70,
              65,
              41,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              108,
              97,
              121,
              101,
              114,
              32,
              111,
              102,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              65,
              112,
              112,
              44,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              80,
              114,
              105,
              110,
              116,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              41,
              46,
              32,
              32,
              80,
              101,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              44,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              102,
              105,
              114,
              115,
              116,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              110,
              101,
              99,
              101,
              115,
              115,
              97,
              114,
              121,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              85,
              73,
              32,
              119,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              105,
              122,
              101,
              32,
              105,
              116,
              32,
              97,
              115,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              34,
              58,
              1,
              42,
              34,
              29,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              109,
              117,
              108,
              116,
              105,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
            ]),
          ],
        },
      },
    },
    removeMultiFactorFromLoginPolicy: {
      name: "RemoveMultiFactorFromLoginPolicy",
      requestType: RemoveMultiFactorFromLoginPolicyRequest,
      requestStream: false,
      responseType: RemoveMultiFactorFromLoginPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              148,
              6,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              14,
              76,
              111,
              103,
              105,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              22,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              116,
              104,
              111,
              100,
              115,
              18,
              25,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              77,
              117,
              108,
              116,
              105,
              32,
              70,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              77,
              70,
              65,
              41,
              26,
              222,
              3,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              40,
              77,
              70,
              65,
              41,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              32,
              97,
              102,
              102,
              101,
              99,
              116,
              115,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              119,
              105,
              116,
              104,
              111,
              117,
              116,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              97,
              110,
              32,
              97,
              100,
              100,
              105,
              116,
              105,
              111,
              110,
              97,
              108,
              32,
              108,
              97,
              121,
              101,
              114,
              32,
              111,
              102,
              32,
              115,
              101,
              99,
              117,
              114,
              105,
              116,
              121,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              46,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              65,
              112,
              112,
              44,
              32,
              70,
              105,
              110,
              103,
              101,
              114,
              80,
              114,
              105,
              110,
              116,
              44,
              32,
              87,
              105,
              110,
              100,
              111,
              119,
              115,
              32,
              72,
              101,
              108,
              108,
              111,
              44,
              32,
              101,
              116,
              99,
              41,
              46,
              32,
              32,
              80,
              101,
              114,
              32,
              100,
              101,
              102,
              105,
              110,
              105,
              116,
              105,
              111,
              110,
              44,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              109,
              117,
              108,
              116,
              105,
              45,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              102,
              97,
              99,
              116,
              111,
              114,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              97,
              115,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              97,
              115,
              32,
              102,
              105,
              114,
              115,
              116,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              110,
              101,
              99,
              101,
              115,
              115,
              97,
              114,
              121,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              85,
              73,
              32,
              119,
              101,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              108,
              105,
              122,
              101,
              32,
              105,
              116,
              32,
              97,
              115,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              111,
              114,
              32,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              38,
              42,
              36,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              109,
              117,
              108,
              116,
              105,
              95,
              102,
              97,
              99,
              116,
              111,
              114,
              115,
              47,
              123,
              116,
              121,
              112,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getPasswordComplexityPolicy: {
      name: "GetPasswordComplexityPolicy",
      requestType: GetPasswordComplexityPolicyRequest,
      requestStream: false,
      responseType: GetPasswordComplexityPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              187,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              32,
              71,
              101,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              147,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              104,
              111,
              119,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              108,
              111,
              111,
              107,
              32,
              40,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              44,
              32,
              108,
              101,
              110,
              103,
              116,
              104,
              44,
              32,
              101,
              116,
              99,
              46,
              41,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              31,
              18,
              29,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
            ]),
          ],
        },
      },
    },
    getDefaultPasswordComplexityPolicy: {
      name: "GetDefaultPasswordComplexityPolicy",
      requestType: GetDefaultPasswordComplexityPolicyRequest,
      requestStream: false,
      responseType: GetDefaultPasswordComplexityPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              199,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              40,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              151,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              104,
              111,
              119,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              108,
              111,
              111,
              107,
              32,
              40,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              44,
              32,
              108,
              101,
              110,
              103,
              116,
              104,
              44,
              32,
              101,
              116,
              99,
              46,
              41,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              39,
              18,
              37,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
            ]),
          ],
        },
      },
    },
    addCustomPasswordComplexityPolicy: {
      name: "AddCustomPasswordComplexityPolicy",
      requestType: AddCustomPasswordComplexityPolicyRequest,
      requestStream: false,
      responseType: AddCustomPasswordComplexityPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              251,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              35,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              208,
              1,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              110,
              101,
              119,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              105,
              115,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              104,
              111,
              119,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              108,
              111,
              111,
              107,
              32,
              40,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              44,
              32,
              108,
              101,
              110,
              103,
              116,
              104,
              44,
              32,
              101,
              116,
              99,
              46,
              41,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              34,
              58,
              1,
              42,
              34,
              29,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
            ]),
          ],
        },
      },
    },
    updateCustomPasswordComplexityPolicy: {
      name: "UpdateCustomPasswordComplexityPolicy",
      requestType: UpdateCustomPasswordComplexityPolicyRequest,
      requestStream: false,
      responseType: UpdateCustomPasswordComplexityPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              178,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              35,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              135,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              104,
              111,
              119,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              108,
              111,
              111,
              107,
              32,
              40,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              44,
              32,
              108,
              101,
              110,
              103,
              116,
              104,
              44,
              32,
              101,
              116,
              99,
              46,
              41,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              34,
              58,
              1,
              42,
              26,
              29,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
            ]),
          ],
        },
      },
    },
    resetPasswordComplexityPolicyToDefault: {
      name: "ResetPasswordComplexityPolicyToDefault",
      requestType: ResetPasswordComplexityPolicyToDefaultRequest,
      requestStream: false,
      responseType: ResetPasswordComplexityPolicyToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              243,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              45,
              82,
              101,
              115,
              101,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              190,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              114,
              101,
              102,
              111,
              114,
              101,
              32,
              117,
              115,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              104,
              111,
              119,
              32,
              97,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              108,
              111,
              111,
              107,
              32,
              40,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              44,
              32,
              108,
              101,
              110,
              103,
              116,
              104,
              44,
              32,
              101,
              116,
              99,
              46,
              41,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              31,
              42,
              29,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              99,
              111,
              109,
              112,
              108,
              101,
              120,
              105,
              116,
              121,
            ]),
          ],
        },
      },
    },
    /** The password age policy is not used at the moment */
    getPasswordAgePolicy: {
      name: "GetPasswordAgePolicy",
      requestType: GetPasswordAgePolicyRequest,
      requestStream: false,
      responseType: GetPasswordAgePolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              175,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              25,
              71,
              101,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              65,
              103,
              101,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              15,
              78,
              111,
              116,
              32,
              105,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              101,
              100,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              24,
              18,
              22,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              97,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /** The password age policy is not used at the moment */
    getDefaultPasswordAgePolicy: {
      name: "GetDefaultPasswordAgePolicy",
      requestType: GetDefaultPasswordAgePolicyRequest,
      requestStream: false,
      responseType: GetDefaultPasswordAgePolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              183,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              33,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              65,
              103,
              101,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              15,
              78,
              111,
              116,
              32,
              105,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              101,
              100,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              32,
              18,
              30,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              97,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /** The password age policy is not used at the moment */
    addCustomPasswordAgePolicy: {
      name: "AddCustomPasswordAgePolicy",
      requestType: AddCustomPasswordAgePolicyRequest,
      requestStream: false,
      responseType: AddCustomPasswordAgePolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              175,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              25,
              65,
              100,
              100,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              65,
              103,
              101,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              15,
              78,
              111,
              116,
              32,
              105,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              101,
              100,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              27,
              58,
              1,
              42,
              34,
              22,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              97,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /** The password age policy is not used at the moment */
    updateCustomPasswordAgePolicy: {
      name: "UpdateCustomPasswordAgePolicy",
      requestType: UpdateCustomPasswordAgePolicyRequest,
      requestStream: false,
      responseType: UpdateCustomPasswordAgePolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              178,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              28,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              65,
              103,
              101,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              15,
              78,
              111,
              116,
              32,
              105,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              101,
              100,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              27,
              58,
              1,
              42,
              26,
              22,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              97,
              103,
              101,
            ]),
          ],
        },
      },
    },
    /** The password age policy is not used at the moment */
    resetPasswordAgePolicyToDefault: {
      name: "ResetPasswordAgePolicyToDefault",
      requestType: ResetPasswordAgePolicyToDefaultRequest,
      requestStream: false,
      responseType: ResetPasswordAgePolicyToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              188,
              2,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              38,
              82,
              101,
              115,
              101,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              65,
              103,
              101,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              15,
              78,
              111,
              116,
              32,
              105,
              109,
              112,
              108,
              101,
              109,
              101,
              110,
              116,
              101,
              100,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              24,
              42,
              22,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              47,
              97,
              103,
              101,
            ]),
          ],
        },
      },
    },
    getLockoutPolicy: {
      name: "GetLockoutPolicy",
      requestType: GetLockoutPolicyRequest,
      requestStream: false,
      responseType: GetLockoutPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              249,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              29,
              71,
              101,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              76,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              212,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              40,
              101,
              46,
              103,
              32,
              104,
              111,
              119,
              32,
              109,
              97,
              110,
              121,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              116,
              116,
              101,
              109,
              112,
              116,
              115,
              41,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              117,
              110,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              110,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              19,
              18,
              17,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
            ]),
          ],
        },
      },
    },
    getDefaultLockoutPolicy: {
      name: "GetDefaultLockoutPolicy",
      requestType: GetDefaultLockoutPolicyRequest,
      requestStream: false,
      responseType: GetDefaultLockoutPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              133,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              37,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              76,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              216,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              40,
              101,
              46,
              103,
              32,
              104,
              111,
              119,
              32,
              109,
              97,
              110,
              121,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              116,
              116,
              101,
              109,
              112,
              116,
              115,
              41,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              117,
              110,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              110,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              27,
              18,
              25,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
            ]),
          ],
        },
      },
    },
    addCustomLockoutPolicy: {
      name: "AddCustomLockoutPolicy",
      requestType: AddCustomLockoutPolicyRequest,
      requestStream: false,
      responseType: AddCustomLockoutPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              188,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              29,
              65,
              100,
              100,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              76,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              151,
              2,
              65,
              100,
              100,
              32,
              110,
              101,
              119,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              108,
              101,
              118,
              101,
              108,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              105,
              115,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              40,
              101,
              46,
              103,
              32,
              104,
              111,
              119,
              32,
              109,
              97,
              110,
              121,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              116,
              116,
              101,
              109,
              112,
              116,
              115,
              41,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              117,
              110,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              110,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              22,
              58,
              1,
              42,
              34,
              17,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
            ]),
          ],
        },
      },
    },
    updateCustomLockoutPolicy: {
      name: "UpdateCustomLockoutPolicy",
      requestType: UpdateCustomLockoutPolicyRequest,
      requestStream: false,
      responseType: UpdateCustomLockoutPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              251,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              76,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              211,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              40,
              101,
              46,
              103,
              32,
              104,
              111,
              119,
              32,
              109,
              97,
              110,
              121,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              116,
              116,
              101,
              109,
              112,
              116,
              115,
              41,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              117,
              110,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              110,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              22,
              58,
              1,
              42,
              26,
              17,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
            ]),
          ],
        },
      },
    },
    resetLockoutPolicyToDefault: {
      name: "ResetLockoutPolicyToDefault",
      requestType: ResetLockoutPolicyToDefaultRequest,
      requestStream: false,
      responseType: ResetLockoutPolicyToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              210,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              17,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              42,
              82,
              101,
              115,
              101,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              76,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              160,
              2,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              105,
              115,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              40,
              101,
              46,
              103,
              32,
              104,
              111,
              119,
              32,
              109,
              97,
              110,
              121,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              116,
              116,
              101,
              109,
              112,
              116,
              115,
              41,
              46,
              32,
              84,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              117,
              110,
              108,
              111,
              99,
              107,
              101,
              100,
              32,
              98,
              121,
              32,
              97,
              110,
              32,
              97,
              100,
              109,
              105,
              110,
              105,
              115,
              116,
              114,
              97,
              116,
              111,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              19,
              42,
              17,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              111,
              99,
              107,
              111,
              117,
              116,
            ]),
          ],
        },
      },
    },
    getPrivacyPolicy: {
      name: "GetPrivacyPolicy",
      requestType: GetPrivacyPolicyRequest,
      requestStream: false,
      responseType: GetPrivacyPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              229,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              16,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              20,
              71,
              101,
              116,
              32,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              202,
              2,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              114,
              114,
              101,
              99,
              116,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              109,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              121,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              47,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              40,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              99,
              111,
              112,
              101,
              41,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              114,
              109,
              115,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              44,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              44,
              32,
              101,
              116,
              99,
              46,
              32,
              65,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              112,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              19,
              18,
              17,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
            ]),
          ],
        },
      },
    },
    getDefaultPrivacyPolicy: {
      name: "GetDefaultPrivacyPolicy",
      requestType: GetDefaultPrivacyPolicyRequest,
      requestStream: false,
      responseType: GetDefaultPrivacyPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              223,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              16,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              28,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              188,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              114,
              109,
              115,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              44,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              44,
              32,
              101,
              116,
              99,
              46,
              32,
              65,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              112,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              27,
              18,
              25,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
            ]),
          ],
        },
      },
    },
    addCustomPrivacyPolicy: {
      name: "AddCustomPrivacyPolicy",
      requestType: AddCustomPrivacyPolicyRequest,
      requestStream: false,
      responseType: AddCustomPrivacyPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              168,
              5,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              16,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              20,
              65,
              100,
              100,
              32,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              141,
              3,
              65,
              100,
              100,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              46,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              32,
              123,
              123,
              46,
              76,
              97,
              110,
              103,
              125,
              125,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              115,
              101,
              116,
              32,
              116,
              111,
              32,
              104,
              97,
              118,
              101,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              105,
              110,
              107,
              115,
              32,
              98,
              97,
              115,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              121,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              101,
              100,
              32,
              98,
              121,
              32,
              115,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              99,
              111,
              112,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              114,
              109,
              115,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              44,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              44,
              32,
              101,
              116,
              99,
              46,
              32,
              65,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              112,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              22,
              58,
              1,
              42,
              34,
              17,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
            ]),
          ],
        },
      },
    },
    updateCustomPrivacyPolicy: {
      name: "UpdateCustomPrivacyPolicy",
      requestType: UpdateCustomPrivacyPolicyRequest,
      requestStream: false,
      responseType: UpdateCustomPrivacyPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              249,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              16,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              23,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              219,
              2,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              32,
              123,
              123,
              46,
              76,
              97,
              110,
              103,
              125,
              125,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              115,
              101,
              116,
              32,
              116,
              111,
              32,
              104,
              97,
              118,
              101,
              32,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              116,
              32,
              108,
              105,
              110,
              107,
              115,
              32,
              98,
              97,
              115,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              121,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              101,
              100,
              32,
              98,
              121,
              32,
              115,
              101,
              110,
              100,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              99,
              111,
              112,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              114,
              109,
              115,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              44,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              44,
              32,
              101,
              116,
              99,
              46,
              32,
              65,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              112,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              22,
              58,
              1,
              42,
              26,
              17,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
            ]),
          ],
        },
      },
    },
    resetPrivacyPolicyToDefault: {
      name: "ResetPrivacyPolicyToDefault",
      requestType: ResetPrivacyPolicyToDefaultRequest,
      requestStream: false,
      responseType: ResetPrivacyPolicyToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              167,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              16,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              33,
              82,
              101,
              115,
              101,
              116,
              32,
              80,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              255,
              1,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              114,
              101,
              102,
              111,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              114,
              109,
              115,
              32,
              97,
              110,
              100,
              32,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              115,
              44,
              32,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              44,
              32,
              101,
              116,
              99,
              46,
              32,
              65,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              112,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              19,
              42,
              17,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              112,
              114,
              105,
              118,
              97,
              99,
              121,
            ]),
          ],
        },
      },
    },
    getNotificationPolicy: {
      name: "GetNotificationPolicy",
      requestType: GetNotificationPolicyRequest,
      requestStream: false,
      responseType: GetNotificationPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              169,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              21,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              25,
              71,
              101,
              116,
              32,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              132,
              2,
              82,
              101,
              116,
              117,
              114,
              110,
              32,
              116,
              104,
              101,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              105,
              115,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              105,
              102,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              110,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              41,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              24,
              18,
              22,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    getDefaultNotificationPolicy: {
      name: "GetDefaultNotificationPolicy",
      requestType: GetDefaultNotificationPolicyRequest,
      requestStream: false,
      responseType: GetDefaultNotificationPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              224,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              21,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              33,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              179,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              105,
              102,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              110,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              41,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              32,
              18,
              30,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    addCustomNotificationPolicy: {
      name: "AddCustomNotificationPolicy",
      requestType: AddCustomNotificationPolicyRequest,
      requestStream: false,
      responseType: AddCustomNotificationPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              137,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              21,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              25,
              65,
              100,
              100,
              32,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              228,
              1,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              114,
              101,
              102,
              111,
              114,
              101,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              105,
              115,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              105,
              102,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              110,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              41,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              27,
              58,
              1,
              42,
              34,
              22,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    updateCustomNotificationPolicy: {
      name: "UpdateCustomNotificationPolicy",
      requestType: UpdateCustomNotificationPolicyRequest,
      requestStream: false,
      responseType: UpdateCustomNotificationPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              212,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              21,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              28,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              172,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              105,
              102,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              110,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              41,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              27,
              58,
              1,
              42,
              26,
              22,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    resetNotificationPolicyToDefault: {
      name: "ResetNotificationPolicyToDefault",
      requestType: ResetNotificationPolicyToDefaultRequest,
      requestStream: false,
      responseType: ResetNotificationPolicyToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              195,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              21,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              18,
              38,
              82,
              101,
              115,
              101,
              116,
              32,
              78,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              145,
              2,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              114,
              101,
              109,
              111,
              118,
              101,
              100,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              114,
              101,
              102,
              111,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              105,
              115,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              121,
              32,
              105,
              102,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              115,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              110,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              40,
              101,
              46,
              103,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              41,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              24,
              42,
              22,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
    getLabelPolicy: {
      name: "GetLabelPolicy",
      requestType: GetLabelPolicyRequest,
      requestStream: false,
      responseType: GetLabelPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              188,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              38,
              71,
              101,
              116,
              32,
              80,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              151,
              2,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              108,
              121,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              32,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              108,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              100,
              32,
              40,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              99,
              111,
              112,
              101,
              44,
              32,
              117,
              115,
              101,
              114,
              41,
              46,
              32,
              68,
              101,
              102,
              105,
              110,
              101,
              32,
              119,
              104,
              97,
              116,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              102,
              111,
              110,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              111,
              103,
              111,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              76,
              111,
              103,
              105,
              110,
              47,
              82,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              44,
              32,
              69,
              45,
              77,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              67,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([17, 18, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 97, 98, 101, 108]),
          ],
        },
      },
    },
    getPreviewLabelPolicy: {
      name: "GetPreviewLabelPolicy",
      requestType: GetPreviewLabelPolicyRequest,
      requestStream: false,
      responseType: GetPreviewLabelPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              129,
              6,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              46,
              71,
              101,
              116,
              32,
              80,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              80,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              212,
              3,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              108,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              115,
              104,
              111,
              119,
              32,
              121,
              111,
              117,
              32,
              104,
              111,
              119,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              108,
              111,
              111,
              107,
              32,
              108,
              105,
              107,
              101,
              44,
              32,
              97,
              110,
              100,
              32,
              110,
              111,
              116,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              105,
              116,
              32,
              100,
              105,
              114,
              101,
              99,
              116,
              108,
              121,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              46,
              32,
              73,
              110,
              32,
              116,
              104,
              101,
              32,
              102,
              117,
              116,
              117,
              114,
              101,
              44,
              32,
              105,
              116,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              115,
              101,
              110,
              100,
              32,
              97,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              109,
              97,
              105,
              108,
              32,
              97,
              110,
              100,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              108,
              111,
              111,
              107,
              32,
              97,
              116,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              108,
              111,
              103,
              105,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              100,
              32,
              40,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              99,
              111,
              112,
              101,
              44,
              32,
              117,
              115,
              101,
              114,
              41,
              46,
              32,
              68,
              101,
              102,
              105,
              110,
              101,
              32,
              119,
              104,
              97,
              116,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              102,
              111,
              110,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              111,
              103,
              111,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              76,
              111,
              103,
              105,
              110,
              47,
              82,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              44,
              32,
              69,
              45,
              77,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              67,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              26,
              18,
              24,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              95,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
            ]),
          ],
        },
      },
    },
    getDefaultLabelPolicy: {
      name: "GetDefaultLabelPolicy",
      requestType: GetDefaultLabelPolicyRequest,
      requestStream: false,
      responseType: GetDefaultLabelPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              218,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              46,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              173,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              108,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              46,
              32,
              68,
              101,
              102,
              105,
              110,
              101,
              115,
              32,
              119,
              104,
              97,
              116,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              102,
              111,
              110,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              111,
              103,
              111,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              76,
              111,
              103,
              105,
              110,
              47,
              82,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              44,
              32,
              69,
              45,
              77,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              67,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              25,
              18,
              23,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              108,
              97,
              98,
              101,
              108,
            ]),
          ],
        },
      },
    },
    addCustomLabelPolicy: {
      name: "AddCustomLabelPolicy",
      requestType: AddCustomLabelPolicyRequest,
      requestStream: false,
      responseType: AddCustomLabelPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              224,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              33,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              192,
              2,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              108,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              105,
              116,
              32,
              115,
              111,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              100,
              32,
              40,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              99,
              111,
              112,
              101,
              44,
              32,
              117,
              115,
              101,
              114,
              41,
              46,
              32,
              68,
              101,
              102,
              105,
              110,
              101,
              32,
              119,
              104,
              97,
              116,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              102,
              111,
              110,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              111,
              103,
              111,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              76,
              111,
              103,
              105,
              110,
              47,
              82,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              44,
              32,
              69,
              45,
              77,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              67,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              20,
              58,
              1,
              42,
              34,
              15,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
            ]),
          ],
        },
      },
    },
    updateCustomLabelPolicy: {
      name: "UpdateCustomLabelPolicy",
      requestType: UpdateCustomLabelPolicyRequest,
      requestStream: false,
      responseType: UpdateCustomLabelPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              174,
              5,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              33,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              142,
              3,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              108,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              100,
              32,
              40,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              99,
              111,
              112,
              101,
              44,
              32,
              117,
              115,
              101,
              114,
              41,
              46,
              32,
              84,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              105,
              115,
              32,
              117,
              115,
              101,
              100,
              32,
              116,
              111,
              32,
              115,
              104,
              111,
              119,
              32,
              121,
              111,
              117,
              32,
              104,
              111,
              119,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              108,
              111,
              111,
              107,
              32,
              108,
              105,
              107,
              101,
              44,
              32,
              109,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              105,
              116,
              32,
              97,
              115,
              32,
              115,
              111,
              111,
              110,
              32,
              97,
              115,
              32,
              121,
              111,
              117,
              32,
              97,
              114,
              101,
              32,
              104,
              97,
              112,
              112,
              121,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              68,
              101,
              102,
              105,
              110,
              101,
              32,
              119,
              104,
              97,
              116,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              102,
              111,
              110,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              111,
              103,
              111,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              76,
              111,
              103,
              105,
              110,
              47,
              82,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              44,
              32,
              69,
              45,
              77,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              67,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              20,
              58,
              1,
              42,
              26,
              15,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
            ]),
          ],
        },
      },
    },
    activateCustomLabelPolicy: {
      name: "ActivateCustomLabelPolicy",
      requestType: ActivateCustomLabelPolicyRequest,
      requestStream: false,
      responseType: ActivateCustomLabelPolicyResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              220,
              4,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              35,
              65,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              186,
              2,
              65,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              32,
              112,
              114,
              105,
              118,
              97,
              116,
              101,
              32,
              108,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              100,
              32,
              40,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              99,
              111,
              112,
              101,
              44,
              32,
              117,
              115,
              101,
              114,
              41,
              46,
              32,
              68,
              101,
              102,
              105,
              110,
              101,
              115,
              32,
              119,
              104,
              97,
              116,
              32,
              99,
              111,
              108,
              111,
              114,
              115,
              44,
              32,
              102,
              111,
              110,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              111,
              103,
              111,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              76,
              111,
              103,
              105,
              110,
              47,
              82,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              44,
              32,
              69,
              45,
              77,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              67,
              111,
              110,
              115,
              111,
              108,
              101,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              30,
              58,
              1,
              42,
              34,
              25,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              95,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    removeCustomLabelPolicyLogo: {
      name: "RemoveCustomLabelPolicyLogo",
      requestType: RemoveCustomLabelPolicyLogoRequest,
      requestStream: false,
      responseType: RemoveCustomLabelPolicyLogoResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              198,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              17,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              76,
              111,
              103,
              111,
              32,
              76,
              105,
              103,
              104,
              116,
              26,
              182,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              111,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              103,
              104,
              116,
              32,
              116,
              104,
              101,
              109,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              22,
              42,
              20,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              108,
              111,
              103,
              111,
            ]),
          ],
        },
      },
    },
    removeCustomLabelPolicyLogoDark: {
      name: "RemoveCustomLabelPolicyLogoDark",
      requestType: RemoveCustomLabelPolicyLogoDarkRequest,
      requestStream: false,
      responseType: RemoveCustomLabelPolicyLogoDarkResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              196,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              16,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              76,
              111,
              103,
              111,
              32,
              68,
              97,
              114,
              107,
              26,
              181,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              111,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              97,
              114,
              107,
              32,
              116,
              104,
              101,
              109,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              27,
              42,
              25,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              108,
              111,
              103,
              111,
              95,
              100,
              97,
              114,
              107,
            ]),
          ],
        },
      },
    },
    removeCustomLabelPolicyIcon: {
      name: "RemoveCustomLabelPolicyIcon",
      requestType: RemoveCustomLabelPolicyIconRequest,
      requestStream: false,
      responseType: RemoveCustomLabelPolicyIconResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              198,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              17,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              73,
              99,
              111,
              110,
              32,
              76,
              105,
              103,
              104,
              116,
              26,
              182,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              105,
              99,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              103,
              104,
              116,
              32,
              116,
              104,
              101,
              109,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              22,
              42,
              20,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              105,
              99,
              111,
              110,
            ]),
          ],
        },
      },
    },
    removeCustomLabelPolicyIconDark: {
      name: "RemoveCustomLabelPolicyIconDark",
      requestType: RemoveCustomLabelPolicyIconDarkRequest,
      requestStream: false,
      responseType: RemoveCustomLabelPolicyIconDarkResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              196,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              16,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              73,
              99,
              111,
              110,
              32,
              68,
              97,
              114,
              107,
              26,
              181,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              105,
              99,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              97,
              114,
              107,
              32,
              116,
              104,
              101,
              109,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              27,
              42,
              25,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              105,
              99,
              111,
              110,
              95,
              100,
              97,
              114,
              107,
            ]),
          ],
        },
      },
    },
    removeCustomLabelPolicyFont: {
      name: "RemoveCustomLabelPolicyFont",
      requestType: RemoveCustomLabelPolicyFontRequest,
      requestStream: false,
      responseType: RemoveCustomLabelPolicyFontResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              173,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              11,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              70,
              111,
              110,
              116,
              26,
              163,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              102,
              111,
              110,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              73,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              101,
              118,
              105,
              101,
              119,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              22,
              42,
              20,
              47,
              112,
              111,
              108,
              105,
              99,
              105,
              101,
              115,
              47,
              108,
              97,
              98,
              101,
              108,
              47,
              102,
              111,
              110,
              116,
            ]),
          ],
        },
      },
    },
    resetLabelPolicyToDefault: {
      name: "ResetLabelPolicyToDefault",
      requestType: ResetLabelPolicyToDefaultRequest,
      requestStream: false,
      responseType: ResetLabelPolicyToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              165,
              3,
              10,
              8,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              10,
              8,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              18,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              76,
              97,
              98,
              101,
              108,
              105,
              110,
              103,
              47,
              66,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              83,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              26,
              134,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              108,
              97,
              98,
              101,
              108,
              32,
              112,
              111,
              108,
              105,
              99,
              121,
              47,
              98,
              114,
              97,
              110,
              100,
              105,
              110,
              103,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              114,
              101,
              102,
              111,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([17, 42, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 97, 98, 101, 108]),
          ],
        },
      },
    },
    getCustomInitMessageText: {
      name: "GetCustomInitMessageText",
      requestType: GetCustomInitMessageTextRequest,
      requestStream: false,
      responseType: GetCustomInitMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              212,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              28,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              73,
              110,
              105,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              190,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              45,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              104,
              97,
              115,
              32,
              101,
              105,
              116,
              104,
              101,
              114,
              32,
              110,
              111,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              111,
              114,
              32,
              97,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              31,
              18,
              29,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              105,
              110,
              105,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultInitMessageText: {
      name: "GetDefaultInitMessageText",
      requestType: GetDefaultInitMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultInitMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              249,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              29,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              73,
              110,
              105,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              226,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              45,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              101,
              105,
              116,
              104,
              101,
              114,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              102,
              105,
              108,
              101,
              115,
              121,
              115,
              116,
              101,
              109,
              32,
              111,
              102,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              104,
              97,
              115,
              32,
              101,
              105,
              116,
              104,
              101,
              114,
              32,
              110,
              111,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              111,
              114,
              32,
              97,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              39,
              18,
              37,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              105,
              110,
              105,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setCustomInitMessageText: {
      name: "SetCustomInitMessageText",
      requestType: SetCustomInitMessageTextRequest,
      requestStream: false,
      responseType: SetCustomInitMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              246,
              5,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              28,
              83,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              73,
              110,
              105,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              224,
              3,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              45,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              104,
              97,
              115,
              32,
              101,
              105,
              116,
              104,
              101,
              114,
              32,
              110,
              111,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              111,
              114,
              32,
              97,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              67,
              111,
              100,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              34,
              58,
              1,
              42,
              26,
              29,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              105,
              110,
              105,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomInitMessageTextToDefault: {
      name: "ResetCustomInitMessageTextToDefault",
      requestType: ResetCustomInitMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomInitMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              174,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              41,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              73,
              110,
              105,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              139,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              105,
              116,
              105,
              97,
              108,
              105,
              122,
              101,
              45,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              111,
              118,
              101,
              114,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              105,
              110,
              115,
              116,
              101,
              97,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              31,
              42,
              29,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              105,
              110,
              105,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomPasswordResetMessageText: {
      name: "GetCustomPasswordResetMessageText",
      requestType: GetCustomPasswordResetMessageTextRequest,
      requestStream: false,
      responseType: GetCustomPasswordResetMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              188,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              38,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              156,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              114,
              101,
              115,
              101,
              116,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              102,
              111,
              114,
              103,
              111,
              116,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              40,
              18,
              38,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              114,
              101,
              115,
              101,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultPasswordResetMessageText: {
      name: "GetDefaultPasswordResetMessageText",
      requestType: GetDefaultPasswordResetMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultPasswordResetMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              213,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              39,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              180,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              114,
              101,
              115,
              101,
              116,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              111,
              102,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              102,
              111,
              114,
              103,
              111,
              116,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              48,
              18,
              46,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              114,
              101,
              115,
              101,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setCustomPasswordResetMessageText: {
      name: "SetCustomPasswordResetMessageText",
      requestType: SetCustomPasswordResetMessageTextRequest,
      requestStream: false,
      responseType: SetCustomPasswordResetMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              189,
              5,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              38,
              83,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              157,
              3,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              114,
              101,
              115,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              102,
              111,
              114,
              103,
              111,
              116,
              45,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              67,
              111,
              100,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              43,
              58,
              1,
              42,
              26,
              38,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              114,
              101,
              115,
              101,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomPasswordResetMessageTextToDefault: {
      name: "ResetCustomPasswordResetMessageTextToDefault",
      requestType: ResetCustomPasswordResetMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomPasswordResetMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              148,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              51,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              104,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              114,
              101,
              115,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              40,
              42,
              38,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              114,
              101,
              115,
              101,
              116,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomVerifyEmailMessageText: {
      name: "GetCustomVerifyEmailMessageText",
      requestType: GetCustomVerifyEmailMessageTextRequest,
      requestStream: false,
      responseType: GetCustomVerifyEmailMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              185,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              36,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              155,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              45,
              101,
              109,
              97,
              105,
              108,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              38,
              18,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultVerifyEmailMessageText: {
      name: "GetDefaultVerifyEmailMessageText",
      requestType: GetDefaultVerifyEmailMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultVerifyEmailMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              225,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              37,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              194,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              45,
              101,
              109,
              97,
              105,
              108,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              46,
              18,
              44,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setCustomVerifyEmailMessageText: {
      name: "SetCustomVerifyEmailMessageText",
      requestType: SetCustomVerifyEmailMessageTextRequest,
      requestStream: false,
      responseType: SetCustomVerifyEmailMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              186,
              5,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              37,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              155,
              3,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              45,
              101,
              109,
              97,
              105,
              108,
              32,
              117,
              115,
              101,
              114,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              110,
              111,
              110,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              67,
              111,
              100,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              41,
              58,
              1,
              42,
              26,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomVerifyEmailMessageTextToDefault: {
      name: "ResetCustomVerifyEmailMessageTextToDefault",
      requestType: ResetCustomVerifyEmailMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomVerifyEmailMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              158,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              49,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              116,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              114,
              101,
              102,
              111,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              115,
              101,
              116,
              116,
              105,
              110,
              103,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              38,
              42,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomVerifyPhoneMessageText: {
      name: "GetCustomVerifyPhoneMessageText",
      requestType: GetCustomVerifyPhoneMessageTextRequest,
      requestStream: false,
      responseType: GetCustomVerifyPhoneMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              222,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              36,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              80,
              104,
              111,
              110,
              101,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              192,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              45,
              112,
              104,
              111,
              110,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              112,
              104,
              111,
              110,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              38,
              18,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              112,
              104,
              111,
              110,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultVerifyPhoneMessageText: {
      name: "GetDefaultVerifyPhoneMessageText",
      requestType: GetDefaultVerifyPhoneMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultVerifyPhoneMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              134,
              4,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              37,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              80,
              104,
              111,
              110,
              101,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              231,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              45,
              112,
              104,
              111,
              110,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              112,
              104,
              111,
              110,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              46,
              18,
              44,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              112,
              104,
              111,
              110,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setCustomVerifyPhoneMessageText: {
      name: "SetCustomVerifyPhoneMessageText",
      requestType: SetCustomVerifyPhoneMessageTextRequest,
      requestStream: false,
      responseType: SetCustomVerifyPhoneMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              224,
              5,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              42,
              83,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              80,
              104,
              111,
              110,
              101,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              188,
              3,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              45,
              112,
              104,
              111,
              110,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              97,
              100,
              100,
              115,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              110,
              111,
              110,
              45,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              112,
              104,
              111,
              110,
              101,
              32,
              110,
              117,
              109,
              98,
              101,
              114,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              67,
              111,
              100,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              41,
              58,
              1,
              42,
              26,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              112,
              104,
              111,
              110,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomVerifyPhoneMessageTextToDefault: {
      name: "ResetCustomVerifyPhoneMessageTextToDefault",
      requestType: ResetCustomVerifyPhoneMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomVerifyPhoneMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              186,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              49,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              80,
              104,
              111,
              110,
              101,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              143,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              45,
              112,
              104,
              111,
              110,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              114,
              101,
              102,
              111,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              38,
              42,
              36,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              112,
              104,
              111,
              110,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomVerifySMSOTPMessageText: {
      name: "GetCustomVerifySMSOTPMessageText",
      requestType: GetCustomVerifySMSOTPMessageTextRequest,
      requestStream: false,
      responseType: GetCustomVerifySMSOTPMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              226,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              38,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              194,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              79,
              110,
              101,
              45,
              116,
              105,
              109,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              39,
              18,
              37,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              115,
              109,
              115,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultVerifySMSOTPMessageText: {
      name: "GetDefaultVerifySMSOTPMessageText",
      requestType: GetDefaultVerifySMSOTPMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultVerifySMSOTPMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              138,
              4,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              39,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              233,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              79,
              110,
              101,
              45,
              116,
              105,
              109,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              47,
              18,
              45,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              115,
              109,
              115,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setCustomVerifySMSOTPMessageText: {
      name: "SetCustomVerifySMSOTPMessageText",
      requestType: SetCustomVerifySMSOTPMessageTextRequest,
      requestStream: false,
      responseType: SetCustomVerifySMSOTPMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              228,
              5,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              44,
              83,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              190,
              3,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              83,
              77,
              83,
              32,
              79,
              110,
              101,
              45,
              116,
              105,
              109,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              67,
              111,
              100,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              42,
              58,
              1,
              42,
              26,
              37,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              115,
              109,
              115,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomVerifySMSOTPMessageTextToDefault: {
      name: "ResetCustomVerifySMSOTPMessageTextToDefault",
      requestType: ResetCustomVerifySMSOTPMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomVerifySMSOTPMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              190,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              51,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              145,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              83,
              77,
              83,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              114,
              101,
              102,
              111,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              39,
              42,
              37,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              115,
              109,
              115,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomVerifyEmailOTPMessageText: {
      name: "GetCustomVerifyEmailOTPMessageText",
      requestType: GetCustomVerifyEmailOTPMessageTextRequest,
      requestStream: false,
      responseType: GetCustomVerifyEmailOTPMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              232,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              40,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              84,
              80,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              198,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              110,
              101,
              45,
              116,
              105,
              109,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              41,
              18,
              39,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultVerifyEmailOTPMessageText: {
      name: "GetDefaultVerifyEmailOTPMessageText",
      requestType: GetDefaultVerifyEmailOTPMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultVerifyEmailOTPMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              144,
              4,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              41,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              84,
              80,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              237,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              110,
              101,
              45,
              116,
              105,
              109,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              49,
              18,
              47,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setCustomVerifyEmailOTPMessageText: {
      name: "SetCustomVerifyEmailOTPMessageText",
      requestType: SetCustomVerifyEmailOTPMessageTextRequest,
      requestStream: false,
      responseType: SetCustomVerifyEmailOTPMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              234,
              5,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              46,
              83,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              84,
              80,
              32,
              82,
              101,
              115,
              101,
              116,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              194,
              3,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              110,
              101,
              45,
              116,
              105,
              109,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              110,
              111,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              67,
              111,
              100,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              44,
              58,
              1,
              42,
              26,
              39,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomVerifyEmailOTPMessageTextToDefault: {
      name: "ResetCustomVerifyEmailOTPMessageTextToDefault",
      requestType: ResetCustomVerifyEmailOTPMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomVerifyEmailOTPMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              194,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              53,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              86,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              84,
              80,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              147,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              121,
              32,
              69,
              109,
              97,
              105,
              108,
              32,
              79,
              84,
              80,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              114,
              101,
              102,
              111,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              41,
              42,
              39,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              118,
              101,
              114,
              105,
              102,
              121,
              101,
              109,
              97,
              105,
              108,
              111,
              116,
              112,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomDomainClaimedMessageText: {
      name: "GetCustomDomainClaimedMessageText",
      requestType: GetCustomDomainClaimedMessageTextRequest,
      requestStream: false,
      responseType: GetCustomDomainClaimedMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              242,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              38,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              67,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              210,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              115,
              32,
              97,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              105,
              115,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              32,
              105,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              40,
              18,
              38,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultDomainClaimedMessageText: {
      name: "GetDefaultDomainClaimedMessageText",
      requestType: GetDefaultDomainClaimedMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultDomainClaimedMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              247,
              4,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              39,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              67,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              214,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              115,
              101,
              116,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              115,
              32,
              97,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              105,
              115,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              32,
              105,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              48,
              18,
              46,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setCustomDomainClaimedMessageCustomText: {
      name: "SetCustomDomainClaimedMessageCustomText",
      requestType: SetCustomDomainClaimedMessageTextRequest,
      requestStream: false,
      responseType: SetCustomDomainClaimedMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              129,
              6,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              38,
              83,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              67,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              225,
              3,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              110,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              115,
              32,
              97,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              111,
              102,
              32,
              116,
              104,
              105,
              115,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              115,
              32,
              105,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              68,
              111,
              109,
              97,
              105,
              110,
              125,
              125,
              32,
              123,
              123,
              46,
              84,
              101,
              109,
              112,
              85,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              43,
              58,
              1,
              42,
              26,
              38,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomDomainClaimedMessageTextToDefault: {
      name: "ResetCustomDomainClaimedMessageTextToDefault",
      requestType: ResetCustomDomainClaimedMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomDomainClaimedMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              210,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              51,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              68,
              111,
              109,
              97,
              105,
              110,
              32,
              67,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              165,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              32,
              116,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              40,
              42,
              38,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              100,
              111,
              109,
              97,
              105,
              110,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomPasswordlessRegistrationMessageText: {
      name: "GetCustomPasswordlessRegistrationMessageText",
      requestType: GetCustomPasswordlessRegistrationMessageTextRequest,
      requestStream: false,
      responseType: GetCustomPasswordlessRegistrationMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              157,
              4,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              49,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              242,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              115,
              32,
              101,
              109,
              97,
              105,
              108,
              44,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              111,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              52,
              18,
              50,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultPasswordlessRegistrationMessageText: {
      name: "GetDefaultPasswordlessRegistrationMessageText",
      requestType: GetDefaultPasswordlessRegistrationMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultPasswordlessRegistrationMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              171,
              4,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              50,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              255,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              100,
              111,
              109,
              97,
              105,
              110,
              32,
              99,
              108,
              97,
              105,
              109,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              115,
              32,
              101,
              109,
              97,
              105,
              108,
              44,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              111,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              60,
              18,
              58,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setCustomPasswordlessRegistrationMessageCustomText: {
      name: "SetCustomPasswordlessRegistrationMessageCustomText",
      requestType: SetCustomPasswordlessRegistrationMessageTextRequest,
      requestStream: false,
      responseType: SetCustomPasswordlessRegistrationMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              144,
              6,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              50,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              228,
              3,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              115,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              115,
              32,
              101,
              109,
              97,
              105,
              108,
              44,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              32,
              111,
              110,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              100,
              101,
              118,
              105,
              99,
              101,
              46,
              32,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              55,
              58,
              1,
              42,
              26,
              50,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomPasswordlessRegistrationMessageTextToDefault: {
      name: "ResetCustomPasswordlessRegistrationMessageTextToDefault",
      requestType: ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              254,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              62,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              32,
              82,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              198,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              47,
              112,
              97,
              115,
              115,
              107,
              101,
              121,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              114,
              101,
              102,
              111,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              52,
              42,
              50,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              108,
              101,
              115,
              115,
              95,
              114,
              101,
              103,
              105,
              115,
              116,
              114,
              97,
              116,
              105,
              111,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomPasswordChangeMessageText: {
      name: "GetCustomPasswordChangeMessageText",
      requestType: GetCustomPasswordChangeMessageTextRequest,
      requestStream: false,
      responseType: GetCustomPasswordChangeMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              196,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              39,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              163,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              45,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              111,
              102,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              42,
              18,
              40,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              95,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultPasswordChangeMessageText: {
      name: "GetDefaultPasswordChangeMessageText",
      requestType: GetDefaultPasswordChangeMessageTextRequest,
      requestStream: false,
      responseType: GetDefaultPasswordChangeMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              236,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              40,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              104,
              97,
              110,
              103,
              101,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              202,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              45,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              111,
              102,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              50,
              18,
              48,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              95,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setCustomPasswordChangeMessageCustomText: {
      name: "SetCustomPasswordChangeMessageCustomText",
      requestType: SetCustomPasswordChangeMessageTextRequest,
      requestStream: false,
      responseType: SetCustomPasswordChangeMessageTextResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              183,
              5,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              40,
              83,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              26,
              149,
              3,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              45,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              101,
              109,
              97,
              105,
              108,
              32,
              105,
              115,
              32,
              115,
              101,
              110,
              116,
              32,
              119,
              104,
              101,
              110,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              111,
              102,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              46,
              32,
              32,
              84,
              104,
              101,
              32,
              70,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              86,
              97,
              114,
              105,
              97,
              98,
              108,
              101,
              115,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              58,
              32,
              123,
              123,
              46,
              85,
              115,
              101,
              114,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              70,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              78,
              105,
              99,
              107,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              68,
              105,
              115,
              112,
              108,
              97,
              121,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              69,
              109,
              97,
              105,
              108,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              97,
              115,
              116,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              80,
              104,
              111,
              110,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              80,
              114,
              101,
              102,
              101,
              114,
              114,
              101,
              100,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              76,
              111,
              103,
              105,
              110,
              78,
              97,
              109,
              101,
              115,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              104,
              97,
              110,
              103,
              101,
              68,
              97,
              116,
              101,
              125,
              125,
              32,
              123,
              123,
              46,
              67,
              114,
              101,
              97,
              116,
              105,
              111,
              110,
              68,
              97,
              116,
              101,
              125,
              125,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              45,
              58,
              1,
              42,
              26,
              40,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              95,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomPasswordChangeMessageTextToDefault: {
      name: "ResetCustomPasswordChangeMessageTextToDefault",
      requestType: ResetCustomPasswordChangeMessageTextToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomPasswordChangeMessageTextToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              228,
              3,
              10,
              13,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              53,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              67,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              77,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              181,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              45,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              114,
              101,
              102,
              111,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              115,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              42,
              42,
              40,
              47,
              116,
              101,
              120,
              116,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              47,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              95,
              99,
              104,
              97,
              110,
              103,
              101,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getCustomLoginTexts: {
      name: "GetCustomLoginTexts",
      requestType: GetCustomLoginTextsRequest,
      requestStream: false,
      responseType: GetCustomLoginTextsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              233,
              3,
              10,
              11,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              21,
              71,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              26,
              220,
              1,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              32,
              111,
              102,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              44,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              97,
              114,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              97,
              115,
              32,
              115,
              111,
              111,
              110,
              32,
              97,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              115,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              102,
              105,
              101,
              100,
              32,
              40,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              115,
              99,
              111,
              112,
              101,
              32,
              111,
              114,
              32,
              117,
              115,
              101,
              114,
              41,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              24,
              18,
              22,
              47,
              116,
              101,
              120,
              116,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getDefaultLoginTexts: {
      name: "GetDefaultLoginTexts",
      requestType: GetDefaultLoginTextsRequest,
      requestStream: false,
      responseType: GetDefaultLoginTextsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              175,
              4,
              10,
              11,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              22,
              71,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              26,
              161,
              2,
              71,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              116,
              101,
              120,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              32,
              111,
              102,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              44,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              97,
              114,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              97,
              115,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              32,
              84,
              104,
              101,
              32,
              116,
              101,
              120,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              115,
              104,
              111,
              119,
              110,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              108,
              108,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              115,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              104,
              97,
              118,
              101,
              32,
              97,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              46,
              32,
              79,
              114,
              32,
              105,
              102,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              111,
              110,
              116,
              101,
              120,
              116,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              103,
              105,
              118,
              101,
              110,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([13, 10, 11, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              32,
              18,
              30,
              47,
              116,
              101,
              120,
              116,
              47,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    setCustomLoginText: {
      name: "SetCustomLoginText",
      requestType: SetCustomLoginTextsRequest,
      requestStream: false,
      responseType: SetCustomLoginTextsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              224,
              2,
              10,
              11,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              22,
              83,
              101,
              116,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              26,
              83,
              83,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              32,
              111,
              102,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              27,
              58,
              1,
              42,
              26,
              22,
              47,
              116,
              101,
              120,
              116,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    resetCustomLoginTextToDefault: {
      name: "ResetCustomLoginTextToDefault",
      requestType: ResetCustomLoginTextsToDefaultRequest,
      requestStream: false,
      responseType: ResetCustomLoginTextsToDefaultResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              207,
              3,
              10,
              11,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              115,
              18,
              34,
              82,
              101,
              115,
              101,
              116,
              32,
              67,
              117,
              115,
              116,
              111,
              109,
              32,
              76,
              111,
              103,
              105,
              110,
              32,
              84,
              101,
              120,
              116,
              32,
              116,
              111,
              32,
              68,
              101,
              102,
              97,
              117,
              108,
              116,
              26,
              181,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              116,
              101,
              120,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              32,
              97,
              110,
              100,
              32,
              114,
              101,
              103,
              105,
              115,
              116,
              101,
              114,
              32,
              85,
              73,
              32,
              102,
              114,
              111,
              109,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              116,
              104,
              101,
              114,
              101,
              102,
              111,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              32,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              116,
              114,
              97,
              110,
              115,
              108,
              97,
              116,
              105,
              111,
              110,
              32,
              102,
              105,
              108,
              101,
              115,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              32,
              119,
              105,
              108,
              108,
              32,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              46,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
          578365826: [
            new Uint8Array([
              24,
              42,
              22,
              47,
              116,
              101,
              120,
              116,
              47,
              108,
              111,
              103,
              105,
              110,
              47,
              123,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              125,
            ]),
          ],
        },
      },
    },
    getOrgIDPByID: {
      name: "GetOrgIDPByID",
      requestType: GetOrgIDPByIDRequest,
      requestStream: false,
      responseType: GetOrgIDPByIDResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              175,
              3,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              45,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              71,
              101,
              116,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              32,
              98,
              121,
              32,
              73,
              68,
              26,
              129,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              115,
              111,
              99,
              105,
              97,
              108,
              47,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              41,
              32,
              98,
              121,
              32,
              105,
              116,
              115,
              32,
              73,
              68,
              32,
              101,
              46,
              103,
              32,
              71,
              111,
              111,
              103,
              108,
              101,
              44,
              32,
              65,
              122,
              117,
              114,
              101,
              65,
              68,
              44,
              32,
              101,
              116,
              99,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              88,
              1,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 111, 114, 103, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
          578365826: [new Uint8Array([12, 18, 10, 47, 105, 100, 112, 115, 47, 123, 105, 100, 125])],
        },
      },
    },
    listOrgIDPs: {
      name: "ListOrgIDPs",
      requestType: ListOrgIDPsRequest,
      requestStream: false,
      responseType: ListOrgIDPsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              164,
              3,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              44,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              32,
              40,
              73,
              68,
              80,
              115,
              41,
              26,
              120,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              32,
              40,
              115,
              111,
              99,
              105,
              97,
              108,
              47,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              41,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              46,
              32,
              101,
              46,
              103,
              32,
              71,
              111,
              111,
              103,
              108,
              101,
              44,
              32,
              65,
              122,
              117,
              114,
              101,
              65,
              68,
              44,
              32,
              101,
              116,
              99,
              46,
              88,
              1,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 111, 114, 103, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([18, 58, 1, 42, 34, 13, 47, 105, 100, 112, 115, 47, 95, 115, 101, 97, 114, 99, 104]),
          ],
        },
      },
    },
    addOrgOIDCIDP: {
      name: "AddOrgOIDCIDP",
      requestType: AddOrgOIDCIDPRequest,
      requestStream: false,
      responseType: AddOrgOIDCIDPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              145,
              4,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              44,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              65,
              100,
              100,
              32,
              79,
              73,
              68,
              67,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              228,
              1,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              101,
              110,
              97,
              98,
              108,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              111,
              99,
              105,
              97,
              108,
              47,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              79,
              73,
              68,
              67,
              45,
              99,
              111,
              109,
              112,
              108,
              105,
              97,
              110,
              116,
              46,
              32,
              84,
              104,
              105,
              115,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              99,
              97,
              110,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              117,
              115,
              101,
              100,
              32,
              98,
              121,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              116,
              115,
              101,
              108,
              102,
              46,
              88,
              1,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [new Uint8Array([15, 58, 1, 42, 34, 10, 47, 105, 100, 112, 115, 47, 111, 105, 100, 99])],
        },
      },
    },
    addOrgJWTIDP: {
      name: "AddOrgJWTIDP",
      requestType: AddOrgJWTIDPRequest,
      requestStream: false,
      responseType: AddOrgJWTIDPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              238,
              4,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              43,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              65,
              100,
              100,
              32,
              74,
              87,
              84,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              194,
              2,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              110,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              101,
              110,
              97,
              98,
              108,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              111,
              99,
              105,
              97,
              108,
              47,
              101,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              108,
              111,
              103,
              105,
              110,
              46,
              32,
              74,
              83,
              79,
              78,
              32,
              87,
              101,
              98,
              32,
              84,
              111,
              107,
              101,
              110,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              74,
              87,
              84,
              32,
              73,
              68,
              80,
              41,
              32,
              103,
              105,
              118,
              101,
              115,
              32,
              121,
              111,
              117,
              32,
              116,
              104,
              101,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              121,
              32,
              116,
              111,
              32,
              117,
              115,
              101,
              32,
              97,
              110,
              32,
              40,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              41,
              32,
              74,
              87,
              84,
              32,
              97,
              115,
              32,
              97,
              32,
              102,
              101,
              100,
              101,
              114,
              97,
              116,
              101,
              100,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              46,
              32,
              89,
              111,
              117,
              32,
              104,
              97,
              118,
              101,
              32,
              116,
              111,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              32,
              97,
              110,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              119,
              104,
              101,
              114,
              101,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              99,
              97,
              110,
              32,
              103,
              101,
              116,
              32,
              116,
              104,
              101,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              74,
              87,
              84,
              32,
              116,
              111,
              107,
              101,
              110,
              46,
              88,
              1,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [new Uint8Array([14, 58, 1, 42, 34, 9, 47, 105, 100, 112, 115, 47, 106, 119, 116])],
        },
      },
    },
    deactivateOrgIDP: {
      name: "DeactivateOrgIDP",
      requestType: DeactivateOrgIDPRequest,
      requestStream: false,
      responseType: DeactivateOrgIDPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              169,
              4,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              46,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              250,
              1,
              83,
              101,
              116,
              115,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              116,
              111,
              32,
              105,
              110,
              97,
              99,
              116,
              105,
              118,
              101,
              46,
              32,
              73,
              116,
              32,
              99,
              97,
              110,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              46,
              32,
              85,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              73,
              116,
              32,
              109,
              105,
              103,
              104,
              116,
              32,
              99,
              97,
              117,
              115,
              101,
              32,
              116,
              114,
              111,
              117,
              98,
              108,
              101,
              115,
              32,
              105,
              102,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              110,
              108,
              121,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              109,
              101,
              116,
              104,
              111,
              100,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              46,
              88,
              1,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              31,
              58,
              1,
              42,
              34,
              26,
              47,
              105,
              100,
              112,
              115,
              47,
              123,
              105,
              100,
              112,
              95,
              105,
              100,
              125,
              47,
              95,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    reactivateOrgIDP: {
      name: "ReactivateOrgIDP",
      requestType: ReactivateOrgIDPRequest,
      requestStream: false,
      responseType: ReactivateOrgIDPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              213,
              3,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              34,
              82,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              178,
              1,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              83,
              101,
              116,
              115,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              116,
              111,
              32,
              97,
              99,
              116,
              105,
              118,
              101,
              46,
              32,
              73,
              116,
              32,
              99,
              97,
              110,
              32,
              111,
              110,
              108,
              121,
              32,
              98,
              101,
              32,
              99,
              97,
              108,
              108,
              101,
              100,
              32,
              102,
              111,
              114,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              115,
              116,
              97,
              116,
              101,
              32,
              105,
              110,
              97,
              99,
              116,
              105,
              118,
              101,
              46,
              32,
              85,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              97,
              103,
              97,
              105,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
              88,
              1,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              31,
              58,
              1,
              42,
              34,
              26,
              47,
              105,
              100,
              112,
              115,
              47,
              123,
              105,
              100,
              112,
              95,
              105,
              100,
              125,
              47,
              95,
              114,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    removeOrgIDP: {
      name: "RemoveOrgIDP",
      requestType: RemoveOrgIDPRequest,
      requestStream: false,
      responseType: RemoveOrgIDPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              139,
              4,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              30,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              236,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              115,
              32,
              116,
              104,
              101,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              112,
              101,
              114,
              109,
              97,
              110,
              101,
              110,
              116,
              108,
              121,
              46,
              32,
              65,
              108,
              108,
              32,
              108,
              105,
              110,
              107,
              115,
              32,
              116,
              111,
              32,
              116,
              104,
              101,
              32,
              103,
              105,
              118,
              101,
              110,
              32,
              73,
              68,
              80,
              32,
              111,
              110,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              97,
              115,
              32,
              119,
              101,
              108,
              108,
              46,
              32,
              84,
              104,
              101,
              121,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              97,
              98,
              108,
              101,
              32,
              116,
              111,
              32,
              108,
              111,
              103,
              32,
              105,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              32,
              73,
              102,
              32,
              105,
              116,
              32,
              105,
              115,
              32,
              116,
              104,
              101,
              105,
              114,
              32,
              111,
              110,
              108,
              121,
              32,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              112,
              111,
              115,
              115,
              105,
              98,
              105,
              108,
              105,
              116,
              121,
              32,
              105,
              116,
              32,
              109,
              105,
              103,
              104,
              116,
              32,
              99,
              97,
              117,
              115,
              101,
              32,
              112,
              114,
              111,
              98,
              108,
              101,
              109,
              115,
              46,
              88,
              1,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [new Uint8Array([16, 42, 14, 47, 105, 100, 112, 115, 47, 123, 105, 100, 112, 95, 105, 100, 125])],
        },
      },
    },
    updateOrgIDP: {
      name: "UpdateOrgIDP",
      requestType: UpdateOrgIDPRequest,
      requestStream: false,
      responseType: UpdateOrgIDPResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              156,
              3,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              42,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              114,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              73,
              68,
              80,
              46,
              32,
              65,
              108,
              108,
              32,
              102,
              105,
              101,
              108,
              100,
              115,
              32,
              97,
              114,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              100,
              111,
              32,
              110,
              111,
              116,
              32,
              115,
              101,
              110,
              100,
              32,
              97,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              105,
              110,
              32,
              97,
              32,
              102,
              105,
              101,
              108,
              100,
              44,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              88,
              1,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([19, 58, 1, 42, 26, 14, 47, 105, 100, 112, 115, 47, 123, 105, 100, 112, 95, 105, 100, 125]),
          ],
        },
      },
    },
    updateOrgIDPOIDCConfig: {
      name: "UpdateOrgIDPOIDCConfig",
      requestType: UpdateOrgIDPOIDCConfigRequest,
      requestStream: false,
      responseType: UpdateOrgIDPOIDCConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              191,
              3,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              47,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              79,
              73,
              68,
              67,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              143,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              79,
              73,
              68,
              67,
              45,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
              32,
              65,
              108,
              108,
              32,
              102,
              105,
              101,
              108,
              100,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              46,
              32,
              73,
              102,
              32,
              97,
              32,
              102,
              105,
              101,
              108,
              100,
              32,
              104,
              97,
              115,
              32,
              110,
              111,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              88,
              1,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              31,
              58,
              1,
              42,
              26,
              26,
              47,
              105,
              100,
              112,
              115,
              47,
              123,
              105,
              100,
              112,
              95,
              105,
              100,
              125,
              47,
              111,
              105,
              100,
              99,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
    updateOrgIDPJWTConfig: {
      name: "UpdateOrgIDPJWTConfig",
      requestType: UpdateOrgIDPJWTConfigRequest,
      requestStream: false,
      responseType: UpdateOrgIDPJWTConfigResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              189,
              3,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              46,
              68,
              101,
              112,
              114,
              101,
              99,
              97,
              116,
              101,
              100,
              58,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              74,
              87,
              84,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              40,
              73,
              68,
              80,
              41,
              26,
              142,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              116,
              104,
              101,
              32,
              74,
              87,
              84,
              45,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              97,
              110,
              32,
              105,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              46,
              32,
              65,
              108,
              108,
              32,
              102,
              105,
              101,
              108,
              100,
              115,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              46,
              32,
              73,
              102,
              32,
              97,
              32,
              102,
              105,
              101,
              108,
              100,
              32,
              104,
              97,
              115,
              32,
              110,
              111,
              32,
              118,
              97,
              108,
              117,
              101,
              32,
              105,
              116,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              101,
              109,
              112,
              116,
              121,
              32,
              97,
              102,
              116,
              101,
              114,
              119,
              97,
              114,
              100,
              46,
              88,
              1,
              114,
              227,
              1,
              10,
              224,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              202,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              47,
              115,
              101,
              116,
              32,
              97,
              32,
              114,
              101,
              115,
              117,
              108,
              116,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              30,
              58,
              1,
              42,
              26,
              25,
              47,
              105,
              100,
              112,
              115,
              47,
              123,
              105,
              100,
              112,
              95,
              105,
              100,
              125,
              47,
              106,
              119,
              116,
              95,
              99,
              111,
              110,
              102,
              105,
              103,
            ]),
          ],
        },
      },
    },
    /**
     * Returns all identity providers, which match the query
     * Limit should always be set, there is a default limit set by the service
     */
    listProviders: {
      name: "ListProviders",
      requestType: ListProvidersRequest,
      requestStream: false,
      responseType: ListProvidersResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              45,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              23,
              76,
              105,
              115,
              116,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 111, 114, 103, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              28,
              58,
              1,
              42,
              34,
              23,
              47,
              105,
              100,
              112,
              115,
              47,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    /** Returns an identity provider of the organization */
    getProviderByID: {
      name: "GetProviderByID",
      requestType: GetProviderByIDRequest,
      requestStream: false,
      responseType: GetProviderByIDResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              49,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              27,
              71,
              101,
              116,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              66,
              121,
              32,
              73,
              68,
            ]),
          ],
          400002: [new Uint8Array([14, 10, 12, 111, 114, 103, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              22,
              18,
              20,
              47,
              105,
              100,
              112,
              115,
              47,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new OAuth2 identity provider in the organization */
    addGenericOAuthProvider: {
      name: "AddGenericOAuthProvider",
      requestType: AddGenericOAuthProviderRequest,
      requestStream: false,
      responseType: AddGenericOAuthProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              57,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              35,
              65,
              100,
              100,
              32,
              71,
              101,
              110,
              101,
              114,
              105,
              99,
              32,
              79,
              65,
              117,
              116,
              104,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [new Uint8Array([16, 58, 1, 42, 34, 11, 47, 105, 100, 112, 115, 47, 111, 97, 117, 116, 104])],
        },
      },
    },
    /** Change an existing OAuth2 identity provider in the organization */
    updateGenericOAuthProvider: {
      name: "UpdateGenericOAuthProvider",
      requestType: UpdateGenericOAuthProviderRequest,
      requestStream: false,
      responseType: UpdateGenericOAuthProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              60,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              38,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              101,
              110,
              101,
              114,
              105,
              99,
              32,
              79,
              65,
              117,
              116,
              104,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              21,
              58,
              1,
              42,
              26,
              16,
              47,
              105,
              100,
              112,
              115,
              47,
              111,
              97,
              117,
              116,
              104,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new OIDC identity provider in the organization */
    addGenericOIDCProvider: {
      name: "AddGenericOIDCProvider",
      requestType: AddGenericOIDCProviderRequest,
      requestStream: false,
      responseType: AddGenericOIDCProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              56,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              34,
              65,
              100,
              100,
              32,
              71,
              101,
              110,
              101,
              114,
              105,
              99,
              32,
              79,
              73,
              68,
              67,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              23,
              58,
              1,
              42,
              34,
              18,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              101,
              110,
              101,
              114,
              105,
              99,
              95,
              111,
              105,
              100,
              99,
            ]),
          ],
        },
      },
    },
    /** Change an existing OIDC identity provider in the organization */
    updateGenericOIDCProvider: {
      name: "UpdateGenericOIDCProvider",
      requestType: UpdateGenericOIDCProviderRequest,
      requestStream: false,
      responseType: UpdateGenericOIDCProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              59,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              37,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              101,
              110,
              101,
              114,
              105,
              99,
              32,
              79,
              73,
              68,
              67,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              28,
              58,
              1,
              42,
              26,
              23,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              101,
              110,
              101,
              114,
              105,
              99,
              95,
              111,
              105,
              100,
              99,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Migrate an existing OIDC identity provider in the organization */
    migrateGenericOIDCProvider: {
      name: "MigrateGenericOIDCProvider",
      requestType: MigrateGenericOIDCProviderRequest,
      requestStream: false,
      responseType: MigrateGenericOIDCProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              60,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              38,
              77,
              105,
              103,
              114,
              97,
              116,
              101,
              32,
              71,
              101,
              110,
              101,
              114,
              105,
              99,
              32,
              79,
              73,
              68,
              67,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              37,
              58,
              1,
              42,
              34,
              32,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              101,
              110,
              101,
              114,
              105,
              99,
              95,
              111,
              105,
              100,
              99,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              109,
              105,
              103,
              114,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** Add a new JWT identity provider in the organization */
    addJWTProvider: {
      name: "AddJWTProvider",
      requestType: AddJWTProviderRequest,
      requestStream: false,
      responseType: AddJWTProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              47,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              25,
              65,
              100,
              100,
              32,
              74,
              87,
              84,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              22,
              58,
              1,
              42,
              34,
              17,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              101,
              110,
              101,
              114,
              105,
              99,
              95,
              106,
              119,
              116,
            ]),
          ],
        },
      },
    },
    /** Change an existing JWT identity provider in the organization */
    updateJWTProvider: {
      name: "UpdateJWTProvider",
      requestType: UpdateJWTProviderRequest,
      requestStream: false,
      responseType: UpdateJWTProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              50,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              28,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              74,
              87,
              84,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              27,
              58,
              1,
              42,
              26,
              22,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              101,
              110,
              101,
              114,
              105,
              99,
              95,
              106,
              119,
              116,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new Azure AD identity provider in the organization */
    addAzureADProvider: {
      name: "AddAzureADProvider",
      requestType: AddAzureADProviderRequest,
      requestStream: false,
      responseType: AddAzureADProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              52,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              30,
              65,
              100,
              100,
              32,
              65,
              122,
              117,
              114,
              101,
              32,
              65,
              68,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [new Uint8Array([16, 58, 1, 42, 34, 11, 47, 105, 100, 112, 115, 47, 97, 122, 117, 114, 101])],
        },
      },
    },
    /** Change an existing Azure AD identity provider in the organization */
    updateAzureADProvider: {
      name: "UpdateAzureADProvider",
      requestType: UpdateAzureADProviderRequest,
      requestStream: false,
      responseType: UpdateAzureADProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              55,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              33,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              65,
              122,
              117,
              114,
              101,
              32,
              65,
              68,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              21,
              58,
              1,
              42,
              26,
              16,
              47,
              105,
              100,
              112,
              115,
              47,
              97,
              122,
              117,
              114,
              101,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new GitHub identity provider in the organization */
    addGitHubProvider: {
      name: "AddGitHubProvider",
      requestType: AddGitHubProviderRequest,
      requestStream: false,
      responseType: AddGitHubProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              50,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              28,
              65,
              100,
              100,
              32,
              71,
              105,
              116,
              72,
              117,
              98,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [new Uint8Array([17, 58, 1, 42, 34, 12, 47, 105, 100, 112, 115, 47, 103, 105, 116, 104, 117, 98])],
        },
      },
    },
    /** Change an existing GitHub identity provider in the organization */
    updateGitHubProvider: {
      name: "UpdateGitHubProvider",
      requestType: UpdateGitHubProviderRequest,
      requestStream: false,
      responseType: UpdateGitHubProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              53,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              31,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              105,
              116,
              72,
              117,
              98,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              22,
              58,
              1,
              42,
              26,
              17,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              105,
              116,
              104,
              117,
              98,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new GitHub Enterprise Server identity provider in the organization */
    addGitHubEnterpriseServerProvider: {
      name: "AddGitHubEnterpriseServerProvider",
      requestType: AddGitHubEnterpriseServerProviderRequest,
      requestStream: false,
      responseType: AddGitHubEnterpriseServerProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              61,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              39,
              65,
              100,
              100,
              32,
              71,
              105,
              116,
              72,
              117,
              98,
              32,
              69,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              20,
              58,
              1,
              42,
              34,
              15,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              105,
              116,
              104,
              117,
              98,
              95,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** Change an existing GitHub Enterprise Server identity provider in the organization */
    updateGitHubEnterpriseServerProvider: {
      name: "UpdateGitHubEnterpriseServerProvider",
      requestType: UpdateGitHubEnterpriseServerProviderRequest,
      requestStream: false,
      responseType: UpdateGitHubEnterpriseServerProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              64,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              42,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              105,
              116,
              72,
              117,
              98,
              32,
              69,
              110,
              116,
              101,
              114,
              112,
              114,
              105,
              115,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              25,
              58,
              1,
              42,
              26,
              20,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              105,
              116,
              104,
              117,
              98,
              95,
              101,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new GitLab identity provider in the organization */
    addGitLabProvider: {
      name: "AddGitLabProvider",
      requestType: AddGitLabProviderRequest,
      requestStream: false,
      responseType: AddGitLabProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              50,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              28,
              65,
              100,
              100,
              32,
              71,
              105,
              116,
              76,
              97,
              98,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [new Uint8Array([17, 58, 1, 42, 34, 12, 47, 105, 100, 112, 115, 47, 103, 105, 116, 108, 97, 98])],
        },
      },
    },
    /** Change an existing GitLab identity provider in the organization */
    updateGitLabProvider: {
      name: "UpdateGitLabProvider",
      requestType: UpdateGitLabProviderRequest,
      requestStream: false,
      responseType: UpdateGitLabProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              53,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              31,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              105,
              116,
              76,
              97,
              98,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              22,
              58,
              1,
              42,
              26,
              17,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              105,
              116,
              108,
              97,
              98,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new self hosted GitLab identity provider in the organization */
    addGitLabSelfHostedProvider: {
      name: "AddGitLabSelfHostedProvider",
      requestType: AddGitLabSelfHostedProviderRequest,
      requestStream: false,
      responseType: AddGitLabSelfHostedProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              61,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              39,
              65,
              100,
              100,
              32,
              71,
              105,
              116,
              76,
              97,
              98,
              32,
              83,
              101,
              108,
              102,
              104,
              111,
              115,
              116,
              101,
              100,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              29,
              58,
              1,
              42,
              34,
              24,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              105,
              116,
              108,
              97,
              98,
              95,
              115,
              101,
              108,
              102,
              95,
              104,
              111,
              115,
              116,
              101,
              100,
            ]),
          ],
        },
      },
    },
    /** Change an existing self hosted GitLab identity provider in the organization */
    updateGitLabSelfHostedProvider: {
      name: "UpdateGitLabSelfHostedProvider",
      requestType: UpdateGitLabSelfHostedProviderRequest,
      requestStream: false,
      responseType: UpdateGitLabSelfHostedProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              64,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              42,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              105,
              116,
              76,
              97,
              98,
              32,
              83,
              101,
              108,
              102,
              104,
              111,
              115,
              116,
              101,
              100,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              34,
              58,
              1,
              42,
              26,
              29,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              105,
              116,
              108,
              97,
              98,
              95,
              115,
              101,
              108,
              102,
              95,
              104,
              111,
              115,
              116,
              101,
              100,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new Google identity provider in the organization */
    addGoogleProvider: {
      name: "AddGoogleProvider",
      requestType: AddGoogleProviderRequest,
      requestStream: false,
      responseType: AddGoogleProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              50,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              28,
              65,
              100,
              100,
              32,
              71,
              111,
              111,
              103,
              108,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([17, 58, 1, 42, 34, 12, 47, 105, 100, 112, 115, 47, 103, 111, 111, 103, 108, 101]),
          ],
        },
      },
    },
    /** Change an existing Google identity provider in the organization */
    updateGoogleProvider: {
      name: "UpdateGoogleProvider",
      requestType: UpdateGoogleProviderRequest,
      requestStream: false,
      responseType: UpdateGoogleProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              53,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              31,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              71,
              111,
              111,
              103,
              108,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              22,
              58,
              1,
              42,
              26,
              17,
              47,
              105,
              100,
              112,
              115,
              47,
              103,
              111,
              111,
              103,
              108,
              101,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new LDAP identity provider in the organization */
    addLDAPProvider: {
      name: "AddLDAPProvider",
      requestType: AddLDAPProviderRequest,
      requestStream: false,
      responseType: AddLDAPProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              48,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              26,
              65,
              100,
              100,
              32,
              76,
              68,
              65,
              80,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [new Uint8Array([15, 58, 1, 42, 34, 10, 47, 105, 100, 112, 115, 47, 108, 100, 97, 112])],
        },
      },
    },
    /** Change an existing LDAP identity provider in the organization */
    updateLDAPProvider: {
      name: "UpdateLDAPProvider",
      requestType: UpdateLDAPProviderRequest,
      requestStream: false,
      responseType: UpdateLDAPProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              51,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              29,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              76,
              68,
              65,
              80,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              20,
              58,
              1,
              42,
              26,
              15,
              47,
              105,
              100,
              112,
              115,
              47,
              108,
              100,
              97,
              112,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new Apple identity provider in the organization */
    addAppleProvider: {
      name: "AddAppleProvider",
      requestType: AddAppleProviderRequest,
      requestStream: false,
      responseType: AddAppleProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              49,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              27,
              65,
              100,
              100,
              32,
              65,
              112,
              112,
              108,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [new Uint8Array([16, 58, 1, 42, 34, 11, 47, 105, 100, 112, 115, 47, 97, 112, 112, 108, 101])],
        },
      },
    },
    /** Change an existing Apple identity provider in the organization */
    updateAppleProvider: {
      name: "UpdateAppleProvider",
      requestType: UpdateAppleProviderRequest,
      requestStream: false,
      responseType: UpdateAppleProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              52,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              30,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              65,
              112,
              112,
              108,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              21,
              58,
              1,
              42,
              26,
              16,
              47,
              105,
              100,
              112,
              115,
              47,
              97,
              112,
              112,
              108,
              101,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Add a new SAML identity provider in the organization */
    addSAMLProvider: {
      name: "AddSAMLProvider",
      requestType: AddSAMLProviderRequest,
      requestStream: false,
      responseType: AddSAMLProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              48,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              26,
              65,
              100,
              100,
              32,
              83,
              65,
              77,
              76,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [new Uint8Array([15, 58, 1, 42, 34, 10, 47, 105, 100, 112, 115, 47, 115, 97, 109, 108])],
        },
      },
    },
    /** Change an existing SAML identity provider in the organization */
    updateSAMLProvider: {
      name: "UpdateSAMLProvider",
      requestType: UpdateSAMLProviderRequest,
      requestStream: false,
      responseType: UpdateSAMLProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              51,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              29,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              83,
              65,
              77,
              76,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              20,
              58,
              1,
              42,
              26,
              15,
              47,
              105,
              100,
              112,
              115,
              47,
              115,
              97,
              109,
              108,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** Regenerate certificate for an existing SAML identity provider in the organization */
    regenerateSAMLProviderCertificate: {
      name: "RegenerateSAMLProviderCertificate",
      requestType: RegenerateSAMLProviderCertificateRequest,
      requestStream: false,
      responseType: RegenerateSAMLProviderCertificateResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              67,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              45,
              82,
              101,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              32,
              83,
              65,
              77,
              76,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              32,
              67,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              42,
              58,
              1,
              42,
              34,
              37,
              47,
              105,
              100,
              112,
              115,
              47,
              115,
              97,
              109,
              108,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              95,
              99,
              101,
              114,
              116,
              105,
              102,
              105,
              99,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /**
     * Remove an identity provider
     * Will remove all linked providers of this configuration on the users
     */
    deleteProvider: {
      name: "DeleteProvider",
      requestType: DeleteProviderRequest,
      requestStream: false,
      responseType: DeleteProviderResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              46,
              10,
              18,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
              115,
              18,
              24,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              73,
              100,
              101,
              110,
              116,
              105,
              116,
              121,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              114,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              22,
              42,
              20,
              47,
              105,
              100,
              112,
              115,
              47,
              116,
              101,
              109,
              112,
              108,
              97,
              116,
              101,
              115,
              47,
              123,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    listActions: {
      name: "ListActions",
      requestType: ListActionsRequest,
      requestStream: false,
      responseType: ListActionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              149,
              3,
              10,
              7,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              14,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              26,
              154,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              108,
              105,
              115,
              116,
              32,
              111,
              102,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
              32,
              109,
              97,
              116,
              99,
              104,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              113,
              117,
              101,
              114,
              121,
              46,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              99,
              111,
              100,
              101,
              32,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              105,
              110,
              32,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              114,
              117,
              110,
              32,
              97,
              116,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              32,
              112,
              111,
              105,
              110,
              116,
              47,
              102,
              108,
              111,
              119,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([17, 10, 15, 111, 114, 103, 46, 97, 99, 116, 105, 111, 110, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              21,
              58,
              1,
              42,
              34,
              16,
              47,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    getAction: {
      name: "GetAction",
      requestType: GetActionRequest,
      requestStream: false,
      responseType: GetActionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              130,
              3,
              10,
              7,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              16,
              71,
              101,
              116,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              32,
              66,
              121,
              32,
              73,
              68,
              26,
              133,
              1,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              110,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              98,
              121,
              32,
              105,
              100,
              46,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              99,
              111,
              100,
              101,
              32,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              105,
              110,
              32,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              114,
              117,
              110,
              32,
              97,
              116,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              32,
              112,
              111,
              105,
              110,
              116,
              47,
              102,
              108,
              111,
              119,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([17, 10, 15, 111, 114, 103, 46, 97, 99, 116, 105, 111, 110, 46, 114, 101, 97, 100])],
          578365826: [new Uint8Array([15, 18, 13, 47, 97, 99, 116, 105, 111, 110, 115, 47, 123, 105, 100, 125])],
        },
      },
    },
    createAction: {
      name: "CreateAction",
      requestType: CreateActionRequest,
      requestStream: false,
      responseType: CreateActionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              131,
              3,
              10,
              7,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              13,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              26,
              137,
              1,
              67,
              114,
              101,
              97,
              116,
              101,
              32,
              97,
              32,
              110,
              101,
              119,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              46,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              99,
              111,
              100,
              101,
              32,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              105,
              110,
              32,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              114,
              117,
              110,
              32,
              97,
              116,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              32,
              112,
              111,
              105,
              110,
              116,
              47,
              102,
              108,
              111,
              119,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([18, 10, 16, 111, 114, 103, 46, 97, 99, 116, 105, 111, 110, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [new Uint8Array([13, 58, 1, 42, 34, 8, 47, 97, 99, 116, 105, 111, 110, 115])],
        },
      },
    },
    updateAction: {
      name: "UpdateAction",
      requestType: UpdateActionRequest,
      requestStream: false,
      responseType: UpdateActionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              137,
              3,
              10,
              7,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              13,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              26,
              143,
              1,
              85,
              112,
              100,
              97,
              116,
              101,
              32,
              97,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              46,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              99,
              111,
              100,
              101,
              32,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              105,
              110,
              32,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              114,
              117,
              110,
              32,
              97,
              116,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              32,
              112,
              111,
              105,
              110,
              116,
              47,
              102,
              108,
              111,
              119,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([18, 10, 16, 111, 114, 103, 46, 97, 99, 116, 105, 111, 110, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            new Uint8Array([18, 58, 1, 42, 26, 13, 47, 97, 99, 116, 105, 111, 110, 115, 47, 123, 105, 100, 125]),
          ],
        },
      },
    },
    deactivateAction: {
      name: "DeactivateAction",
      requestType: DeactivateActionRequest,
      requestStream: false,
      responseType: DeactivateActionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              194,
              3,
              10,
              7,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              17,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              26,
              196,
              1,
              68,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              97,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              46,
              32,
              84,
              104,
              101,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              108,
              108,
              32,
              110,
              111,
              116,
              32,
              98,
              101,
              32,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              100,
              32,
              105,
              102,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              105,
              110,
              32,
              97,
              32,
              102,
              108,
              111,
              119,
              46,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              99,
              111,
              100,
              101,
              32,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              105,
              110,
              32,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              114,
              117,
              110,
              32,
              97,
              116,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              32,
              112,
              111,
              105,
              110,
              116,
              47,
              102,
              108,
              111,
              119,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([18, 10, 16, 111, 114, 103, 46, 97, 99, 116, 105, 111, 110, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            new Uint8Array([
              30,
              58,
              1,
              42,
              34,
              25,
              47,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    reactivateAction: {
      name: "ReactivateAction",
      requestType: ReactivateActionRequest,
      requestStream: false,
      responseType: ReactivateActionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              216,
              3,
              10,
              7,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              17,
              82,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              26,
              218,
              1,
              82,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              32,
              97,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              116,
              104,
              97,
              116,
              32,
              105,
              115,
              32,
              100,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
              100,
              46,
              32,
              84,
              104,
              101,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              108,
              108,
              32,
              98,
              101,
              32,
              101,
              120,
              101,
              99,
              117,
              116,
              101,
              100,
              32,
              97,
              103,
              97,
              105,
              110,
              32,
              105,
              102,
              32,
              99,
              111,
              110,
              102,
              105,
              103,
              117,
              114,
              101,
              100,
              32,
              105,
              110,
              32,
              97,
              32,
              102,
              108,
              111,
              119,
              46,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              99,
              111,
              100,
              101,
              32,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              105,
              110,
              32,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              114,
              117,
              110,
              32,
              97,
              116,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              32,
              112,
              111,
              105,
              110,
              116,
              47,
              102,
              108,
              111,
              119,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([18, 10, 16, 111, 114, 103, 46, 97, 99, 116, 105, 111, 110, 46, 119, 114, 105, 116, 101]),
          ],
          578365826: [
            new Uint8Array([
              30,
              58,
              1,
              42,
              34,
              25,
              47,
              97,
              99,
              116,
              105,
              111,
              110,
              115,
              47,
              123,
              105,
              100,
              125,
              47,
              95,
              114,
              101,
              97,
              99,
              116,
              105,
              118,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    deleteAction: {
      name: "DeleteAction",
      requestType: DeleteActionRequest,
      requestStream: false,
      responseType: DeleteActionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              129,
              3,
              10,
              7,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              13,
              68,
              101,
              108,
              101,
              116,
              101,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              26,
              135,
              1,
              82,
              101,
              109,
              111,
              118,
              101,
              32,
              97,
              110,
              32,
              101,
              120,
              105,
              115,
              116,
              105,
              110,
              103,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              46,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              32,
              97,
              114,
              101,
              32,
              99,
              117,
              115,
              116,
              111,
              109,
              32,
              99,
              111,
              100,
              101,
              32,
              119,
              114,
              105,
              116,
              116,
              101,
              110,
              32,
              105,
              110,
              32,
              106,
              97,
              118,
              97,
              115,
              99,
              114,
              105,
              112,
              116,
              44,
              32,
              116,
              104,
              97,
              116,
              32,
              99,
              97,
              110,
              32,
              98,
              101,
              32,
              114,
              117,
              110,
              32,
              97,
              116,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              101,
              100,
              32,
              112,
              111,
              105,
              110,
              116,
              47,
              102,
              108,
              111,
              119,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              105,
              110,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([
              19,
              10,
              17,
              111,
              114,
              103,
              46,
              97,
              99,
              116,
              105,
              111,
              110,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
          578365826: [
            new Uint8Array([18, 58, 1, 42, 42, 13, 47, 97, 99, 116, 105, 111, 110, 115, 47, 123, 105, 100, 125]),
          ],
        },
      },
    },
    listFlowTypes: {
      name: "ListFlowTypes",
      requestType: ListFlowTypesRequest,
      requestStream: false,
      responseType: ListFlowTypesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              251,
              1,
              10,
              7,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              17,
              83,
              101,
              97,
              114,
              99,
              104,
              32,
              70,
              108,
              111,
              119,
              32,
              84,
              121,
              112,
              101,
              115,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 102, 108, 111, 119, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              22,
              34,
              20,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              116,
              121,
              112,
              101,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    listFlowTriggerTypes: {
      name: "ListFlowTriggerTypes",
      requestType: ListFlowTriggerTypesRequest,
      requestStream: false,
      responseType: ListFlowTriggerTypesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              129,
              2,
              10,
              7,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              23,
              76,
              105,
              115,
              116,
              32,
              70,
              108,
              111,
              119,
              32,
              84,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              84,
              121,
              112,
              101,
              115,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 102, 108, 111, 119, 46, 114, 101, 97, 100])],
          578365826: [
            new Uint8Array([
              32,
              34,
              30,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              123,
              116,
              121,
              112,
              101,
              125,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              115,
              47,
              95,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    getFlow: {
      name: "GetFlow",
      requestType: GetFlowRequest,
      requestStream: false,
      responseType: GetFlowResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              230,
              2,
              10,
              7,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              8,
              71,
              101,
              116,
              32,
              70,
              108,
              111,
              119,
              26,
              114,
              82,
              101,
              116,
              117,
              114,
              110,
              115,
              32,
              97,
              32,
              102,
              108,
              111,
              119,
              46,
              32,
              70,
              108,
              111,
              119,
              115,
              32,
              97,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              110,
              107,
              115,
              32,
              98,
              101,
              116,
              119,
              101,
              101,
              110,
              32,
              97,
              110,
              32,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              97,
              110,
              100,
              32,
              97,
              32,
              115,
              112,
              101,
              99,
              105,
              102,
              105,
              99,
              32,
              112,
              111,
              105,
              110,
              116,
              32,
              100,
              117,
              114,
              105,
              110,
              103,
              32,
              97,
              32,
              117,
              115,
              101,
              114,
              32,
              105,
              110,
              116,
              101,
              114,
              97,
              99,
              116,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              90,
              73,
              84,
              65,
              68,
              69,
              76,
              46,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([15, 10, 13, 111, 114, 103, 46, 102, 108, 111, 119, 46, 114, 101, 97, 100])],
          578365826: [new Uint8Array([15, 18, 13, 47, 102, 108, 111, 119, 115, 47, 123, 116, 121, 112, 101, 125])],
        },
      },
    },
    clearFlow: {
      name: "ClearFlow",
      requestType: ClearFlowRequest,
      requestStream: false,
      responseType: ClearFlowResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              244,
              1,
              10,
              7,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              10,
              67,
              108,
              101,
              97,
              114,
              32,
              70,
              108,
              111,
              119,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [
            new Uint8Array([17, 10, 15, 111, 114, 103, 46, 102, 108, 111, 119, 46, 100, 101, 108, 101, 116, 101]),
          ],
          578365826: [
            new Uint8Array([
              22,
              34,
              20,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              123,
              116,
              121,
              112,
              101,
              125,
              47,
              95,
              99,
              108,
              101,
              97,
              114,
            ]),
          ],
        },
      },
    },
    setTriggerActions: {
      name: "SetTriggerActions",
      requestType: SetTriggerActionsRequest,
      requestStream: false,
      responseType: SetTriggerActionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8338: [
            new Uint8Array([
              253,
              1,
              10,
              7,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              18,
              19,
              83,
              101,
              116,
              32,
              84,
              114,
              105,
              103,
              103,
              101,
              114,
              32,
              65,
              99,
              116,
              105,
              111,
              110,
              115,
              114,
              220,
              1,
              10,
              217,
              1,
              10,
              15,
              120,
              45,
              122,
              105,
              116,
              97,
              100,
              101,
              108,
              45,
              111,
              114,
              103,
              105,
              100,
              18,
              195,
              1,
              84,
              104,
              101,
              32,
              100,
              101,
              102,
              97,
              117,
              108,
              116,
              32,
              105,
              115,
              32,
              97,
              108,
              119,
              97,
              121,
              115,
              32,
              116,
              104,
              101,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              114,
              46,
              32,
              73,
              102,
              32,
              121,
              111,
              117,
              32,
              108,
              105,
              107,
              101,
              32,
              116,
              111,
              32,
              103,
              101,
              116,
              32,
              117,
              115,
              101,
              114,
              115,
              32,
              111,
              102,
              32,
              97,
              110,
              111,
              116,
              104,
              101,
              114,
              32,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              105,
              110,
              99,
              108,
              117,
              100,
              101,
              32,
              116,
              104,
              101,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              32,
              77,
              97,
              107,
              101,
              32,
              115,
              117,
              114,
              101,
              32,
              116,
              104,
              101,
              32,
              117,
              115,
              101,
              114,
              32,
              104,
              97,
              115,
              32,
              112,
              101,
              114,
              109,
              105,
              115,
              115,
              105,
              111,
              110,
              32,
              116,
              111,
              32,
              97,
              99,
              99,
              101,
              115,
              115,
              32,
              116,
              104,
              101,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              101,
              100,
              32,
              100,
              97,
              116,
              97,
              46,
              24,
              1,
            ]),
          ],
          400002: [new Uint8Array([16, 10, 14, 111, 114, 103, 46, 102, 108, 111, 119, 46, 119, 114, 105, 116, 101])],
          578365826: [
            new Uint8Array([
              46,
              58,
              1,
              42,
              34,
              41,
              47,
              102,
              108,
              111,
              119,
              115,
              47,
              123,
              102,
              108,
              111,
              119,
              95,
              116,
              121,
              112,
              101,
              125,
              47,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              47,
              123,
              116,
              114,
              105,
              103,
              103,
              101,
              114,
              95,
              116,
              121,
              112,
              101,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

export interface ManagementServiceImplementation<CallContextExt = {}> {
  healthz(request: HealthzRequest, context: CallContext & CallContextExt): Promise<DeepPartial<HealthzResponse>>;
  getOIDCInformation(
    request: GetOIDCInformationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetOIDCInformationResponse>>;
  getIAM(request: GetIAMRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetIAMResponse>>;
  getSupportedLanguages(
    request: GetSupportedLanguagesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetSupportedLanguagesResponse>>;
  getUserByID(
    request: GetUserByIDRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetUserByIDResponse>>;
  getUserByLoginNameGlobal(
    request: GetUserByLoginNameGlobalRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetUserByLoginNameGlobalResponse>>;
  listUsers(request: ListUsersRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListUsersResponse>>;
  listUserChanges(
    request: ListUserChangesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListUserChangesResponse>>;
  isUserUnique(
    request: IsUserUniqueRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<IsUserUniqueResponse>>;
  /** deprecated: use ImportHumanUser */
  addHumanUser(
    request: AddHumanUserRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddHumanUserResponse>>;
  importHumanUser(
    request: ImportHumanUserRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ImportHumanUserResponse>>;
  addMachineUser(
    request: AddMachineUserRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddMachineUserResponse>>;
  deactivateUser(
    request: DeactivateUserRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeactivateUserResponse>>;
  reactivateUser(
    request: ReactivateUserRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReactivateUserResponse>>;
  lockUser(request: LockUserRequest, context: CallContext & CallContextExt): Promise<DeepPartial<LockUserResponse>>;
  unlockUser(
    request: UnlockUserRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UnlockUserResponse>>;
  removeUser(
    request: RemoveUserRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveUserResponse>>;
  updateUserName(
    request: UpdateUserNameRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateUserNameResponse>>;
  setUserMetadata(
    request: SetUserMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetUserMetadataResponse>>;
  bulkSetUserMetadata(
    request: BulkSetUserMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BulkSetUserMetadataResponse>>;
  listUserMetadata(
    request: ListUserMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListUserMetadataResponse>>;
  getUserMetadata(
    request: GetUserMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetUserMetadataResponse>>;
  removeUserMetadata(
    request: RemoveUserMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveUserMetadataResponse>>;
  bulkRemoveUserMetadata(
    request: BulkRemoveUserMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BulkRemoveUserMetadataResponse>>;
  getHumanProfile(
    request: GetHumanProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetHumanProfileResponse>>;
  updateHumanProfile(
    request: UpdateHumanProfileRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateHumanProfileResponse>>;
  getHumanEmail(
    request: GetHumanEmailRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetHumanEmailResponse>>;
  updateHumanEmail(
    request: UpdateHumanEmailRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateHumanEmailResponse>>;
  resendHumanInitialization(
    request: ResendHumanInitializationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResendHumanInitializationResponse>>;
  resendHumanEmailVerification(
    request: ResendHumanEmailVerificationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResendHumanEmailVerificationResponse>>;
  getHumanPhone(
    request: GetHumanPhoneRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetHumanPhoneResponse>>;
  updateHumanPhone(
    request: UpdateHumanPhoneRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateHumanPhoneResponse>>;
  removeHumanPhone(
    request: RemoveHumanPhoneRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveHumanPhoneResponse>>;
  resendHumanPhoneVerification(
    request: ResendHumanPhoneVerificationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResendHumanPhoneVerificationResponse>>;
  removeHumanAvatar(
    request: RemoveHumanAvatarRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveHumanAvatarResponse>>;
  /** deprecated: use SetHumanPassword */
  setHumanInitialPassword(
    request: SetHumanInitialPasswordRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetHumanInitialPasswordResponse>>;
  setHumanPassword(
    request: SetHumanPasswordRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetHumanPasswordResponse>>;
  sendHumanResetPasswordNotification(
    request: SendHumanResetPasswordNotificationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SendHumanResetPasswordNotificationResponse>>;
  listHumanAuthFactors(
    request: ListHumanAuthFactorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListHumanAuthFactorsResponse>>;
  removeHumanAuthFactorOTP(
    request: RemoveHumanAuthFactorOTPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveHumanAuthFactorOTPResponse>>;
  removeHumanAuthFactorU2F(
    request: RemoveHumanAuthFactorU2FRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveHumanAuthFactorU2FResponse>>;
  removeHumanAuthFactorOTPSMS(
    request: RemoveHumanAuthFactorOTPSMSRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveHumanAuthFactorOTPSMSResponse>>;
  removeHumanAuthFactorOTPEmail(
    request: RemoveHumanAuthFactorOTPEmailRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveHumanAuthFactorOTPEmailResponse>>;
  listHumanPasswordless(
    request: ListHumanPasswordlessRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListHumanPasswordlessResponse>>;
  addPasswordlessRegistration(
    request: AddPasswordlessRegistrationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddPasswordlessRegistrationResponse>>;
  sendPasswordlessRegistration(
    request: SendPasswordlessRegistrationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SendPasswordlessRegistrationResponse>>;
  removeHumanPasswordless(
    request: RemoveHumanPasswordlessRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveHumanPasswordlessResponse>>;
  updateMachine(
    request: UpdateMachineRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateMachineResponse>>;
  generateMachineSecret(
    request: GenerateMachineSecretRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateMachineSecretResponse>>;
  removeMachineSecret(
    request: RemoveMachineSecretRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveMachineSecretResponse>>;
  getMachineKeyByIDs(
    request: GetMachineKeyByIDsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetMachineKeyByIDsResponse>>;
  listMachineKeys(
    request: ListMachineKeysRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListMachineKeysResponse>>;
  addMachineKey(
    request: AddMachineKeyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddMachineKeyResponse>>;
  removeMachineKey(
    request: RemoveMachineKeyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveMachineKeyResponse>>;
  getPersonalAccessTokenByIDs(
    request: GetPersonalAccessTokenByIDsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPersonalAccessTokenByIDsResponse>>;
  listPersonalAccessTokens(
    request: ListPersonalAccessTokensRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListPersonalAccessTokensResponse>>;
  addPersonalAccessToken(
    request: AddPersonalAccessTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddPersonalAccessTokenResponse>>;
  removePersonalAccessToken(
    request: RemovePersonalAccessTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemovePersonalAccessTokenResponse>>;
  listHumanLinkedIDPs(
    request: ListHumanLinkedIDPsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListHumanLinkedIDPsResponse>>;
  removeHumanLinkedIDP(
    request: RemoveHumanLinkedIDPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveHumanLinkedIDPResponse>>;
  listUserMemberships(
    request: ListUserMembershipsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListUserMembershipsResponse>>;
  getMyOrg(request: GetMyOrgRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetMyOrgResponse>>;
  getOrgByDomainGlobal(
    request: GetOrgByDomainGlobalRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetOrgByDomainGlobalResponse>>;
  listOrgChanges(
    request: ListOrgChangesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListOrgChangesResponse>>;
  addOrg(request: AddOrgRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AddOrgResponse>>;
  updateOrg(request: UpdateOrgRequest, context: CallContext & CallContextExt): Promise<DeepPartial<UpdateOrgResponse>>;
  deactivateOrg(
    request: DeactivateOrgRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeactivateOrgResponse>>;
  reactivateOrg(
    request: ReactivateOrgRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReactivateOrgResponse>>;
  removeOrg(request: RemoveOrgRequest, context: CallContext & CallContextExt): Promise<DeepPartial<RemoveOrgResponse>>;
  setOrgMetadata(
    request: SetOrgMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetOrgMetadataResponse>>;
  bulkSetOrgMetadata(
    request: BulkSetOrgMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BulkSetOrgMetadataResponse>>;
  listOrgMetadata(
    request: ListOrgMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListOrgMetadataResponse>>;
  getOrgMetadata(
    request: GetOrgMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetOrgMetadataResponse>>;
  removeOrgMetadata(
    request: RemoveOrgMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveOrgMetadataResponse>>;
  bulkRemoveOrgMetadata(
    request: BulkRemoveOrgMetadataRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BulkRemoveOrgMetadataResponse>>;
  listOrgDomains(
    request: ListOrgDomainsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListOrgDomainsResponse>>;
  addOrgDomain(
    request: AddOrgDomainRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddOrgDomainResponse>>;
  removeOrgDomain(
    request: RemoveOrgDomainRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveOrgDomainResponse>>;
  generateOrgDomainValidation(
    request: GenerateOrgDomainValidationRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GenerateOrgDomainValidationResponse>>;
  validateOrgDomain(
    request: ValidateOrgDomainRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ValidateOrgDomainResponse>>;
  setPrimaryOrgDomain(
    request: SetPrimaryOrgDomainRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetPrimaryOrgDomainResponse>>;
  listOrgMemberRoles(
    request: ListOrgMemberRolesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListOrgMemberRolesResponse>>;
  listOrgMembers(
    request: ListOrgMembersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListOrgMembersResponse>>;
  addOrgMember(
    request: AddOrgMemberRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddOrgMemberResponse>>;
  updateOrgMember(
    request: UpdateOrgMemberRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateOrgMemberResponse>>;
  removeOrgMember(
    request: RemoveOrgMemberRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveOrgMemberResponse>>;
  getProjectByID(
    request: GetProjectByIDRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetProjectByIDResponse>>;
  getGrantedProjectByID(
    request: GetGrantedProjectByIDRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetGrantedProjectByIDResponse>>;
  listProjects(
    request: ListProjectsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProjectsResponse>>;
  listGrantedProjects(
    request: ListGrantedProjectsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListGrantedProjectsResponse>>;
  listGrantedProjectRoles(
    request: ListGrantedProjectRolesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListGrantedProjectRolesResponse>>;
  listProjectChanges(
    request: ListProjectChangesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProjectChangesResponse>>;
  addProject(
    request: AddProjectRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddProjectResponse>>;
  updateProject(
    request: UpdateProjectRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateProjectResponse>>;
  deactivateProject(
    request: DeactivateProjectRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeactivateProjectResponse>>;
  reactivateProject(
    request: ReactivateProjectRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReactivateProjectResponse>>;
  removeProject(
    request: RemoveProjectRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveProjectResponse>>;
  listProjectRoles(
    request: ListProjectRolesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProjectRolesResponse>>;
  addProjectRole(
    request: AddProjectRoleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddProjectRoleResponse>>;
  bulkAddProjectRoles(
    request: BulkAddProjectRolesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BulkAddProjectRolesResponse>>;
  updateProjectRole(
    request: UpdateProjectRoleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateProjectRoleResponse>>;
  removeProjectRole(
    request: RemoveProjectRoleRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveProjectRoleResponse>>;
  listProjectMemberRoles(
    request: ListProjectMemberRolesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProjectMemberRolesResponse>>;
  listProjectMembers(
    request: ListProjectMembersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProjectMembersResponse>>;
  addProjectMember(
    request: AddProjectMemberRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddProjectMemberResponse>>;
  updateProjectMember(
    request: UpdateProjectMemberRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateProjectMemberResponse>>;
  removeProjectMember(
    request: RemoveProjectMemberRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveProjectMemberResponse>>;
  getAppByID(
    request: GetAppByIDRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetAppByIDResponse>>;
  listApps(request: ListAppsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListAppsResponse>>;
  listAppChanges(
    request: ListAppChangesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAppChangesResponse>>;
  addOIDCApp(
    request: AddOIDCAppRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddOIDCAppResponse>>;
  addSAMLApp(
    request: AddSAMLAppRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddSAMLAppResponse>>;
  addAPIApp(request: AddAPIAppRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AddAPIAppResponse>>;
  /** Changes application */
  updateApp(request: UpdateAppRequest, context: CallContext & CallContextExt): Promise<DeepPartial<UpdateAppResponse>>;
  updateOIDCAppConfig(
    request: UpdateOIDCAppConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateOIDCAppConfigResponse>>;
  updateSAMLAppConfig(
    request: UpdateSAMLAppConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateSAMLAppConfigResponse>>;
  updateAPIAppConfig(
    request: UpdateAPIAppConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateAPIAppConfigResponse>>;
  deactivateApp(
    request: DeactivateAppRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeactivateAppResponse>>;
  reactivateApp(
    request: ReactivateAppRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReactivateAppResponse>>;
  removeApp(request: RemoveAppRequest, context: CallContext & CallContextExt): Promise<DeepPartial<RemoveAppResponse>>;
  regenerateOIDCClientSecret(
    request: RegenerateOIDCClientSecretRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RegenerateOIDCClientSecretResponse>>;
  regenerateAPIClientSecret(
    request: RegenerateAPIClientSecretRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RegenerateAPIClientSecretResponse>>;
  getAppKey(request: GetAppKeyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetAppKeyResponse>>;
  listAppKeys(
    request: ListAppKeysRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAppKeysResponse>>;
  addAppKey(request: AddAppKeyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AddAppKeyResponse>>;
  removeAppKey(
    request: RemoveAppKeyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveAppKeyResponse>>;
  listProjectGrantChanges(
    request: ListProjectGrantChangesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProjectGrantChangesResponse>>;
  getProjectGrantByID(
    request: GetProjectGrantByIDRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetProjectGrantByIDResponse>>;
  listProjectGrants(
    request: ListProjectGrantsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProjectGrantsResponse>>;
  listAllProjectGrants(
    request: ListAllProjectGrantsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListAllProjectGrantsResponse>>;
  addProjectGrant(
    request: AddProjectGrantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddProjectGrantResponse>>;
  updateProjectGrant(
    request: UpdateProjectGrantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateProjectGrantResponse>>;
  deactivateProjectGrant(
    request: DeactivateProjectGrantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeactivateProjectGrantResponse>>;
  reactivateProjectGrant(
    request: ReactivateProjectGrantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReactivateProjectGrantResponse>>;
  removeProjectGrant(
    request: RemoveProjectGrantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveProjectGrantResponse>>;
  listProjectGrantMemberRoles(
    request: ListProjectGrantMemberRolesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProjectGrantMemberRolesResponse>>;
  listProjectGrantMembers(
    request: ListProjectGrantMembersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProjectGrantMembersResponse>>;
  addProjectGrantMember(
    request: AddProjectGrantMemberRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddProjectGrantMemberResponse>>;
  updateProjectGrantMember(
    request: UpdateProjectGrantMemberRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateProjectGrantMemberResponse>>;
  removeProjectGrantMember(
    request: RemoveProjectGrantMemberRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveProjectGrantMemberResponse>>;
  getUserGrantByID(
    request: GetUserGrantByIDRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetUserGrantByIDResponse>>;
  listUserGrants(
    request: ListUserGrantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListUserGrantResponse>>;
  addUserGrant(
    request: AddUserGrantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddUserGrantResponse>>;
  updateUserGrant(
    request: UpdateUserGrantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateUserGrantResponse>>;
  deactivateUserGrant(
    request: DeactivateUserGrantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeactivateUserGrantResponse>>;
  reactivateUserGrant(
    request: ReactivateUserGrantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReactivateUserGrantResponse>>;
  removeUserGrant(
    request: RemoveUserGrantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveUserGrantResponse>>;
  bulkRemoveUserGrant(
    request: BulkRemoveUserGrantRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<BulkRemoveUserGrantResponse>>;
  /** deprecated: please use DomainPolicy instead */
  getOrgIAMPolicy(
    request: GetOrgIAMPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetOrgIAMPolicyResponse>>;
  getDomainPolicy(
    request: GetDomainPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDomainPolicyResponse>>;
  getLoginPolicy(
    request: GetLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetLoginPolicyResponse>>;
  getDefaultLoginPolicy(
    request: GetDefaultLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultLoginPolicyResponse>>;
  addCustomLoginPolicy(
    request: AddCustomLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddCustomLoginPolicyResponse>>;
  updateCustomLoginPolicy(
    request: UpdateCustomLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateCustomLoginPolicyResponse>>;
  resetLoginPolicyToDefault(
    request: ResetLoginPolicyToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetLoginPolicyToDefaultResponse>>;
  listLoginPolicyIDPs(
    request: ListLoginPolicyIDPsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListLoginPolicyIDPsResponse>>;
  addIDPToLoginPolicy(
    request: AddIDPToLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddIDPToLoginPolicyResponse>>;
  removeIDPFromLoginPolicy(
    request: RemoveIDPFromLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveIDPFromLoginPolicyResponse>>;
  listLoginPolicySecondFactors(
    request: ListLoginPolicySecondFactorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListLoginPolicySecondFactorsResponse>>;
  addSecondFactorToLoginPolicy(
    request: AddSecondFactorToLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddSecondFactorToLoginPolicyResponse>>;
  removeSecondFactorFromLoginPolicy(
    request: RemoveSecondFactorFromLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveSecondFactorFromLoginPolicyResponse>>;
  listLoginPolicyMultiFactors(
    request: ListLoginPolicyMultiFactorsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListLoginPolicyMultiFactorsResponse>>;
  addMultiFactorToLoginPolicy(
    request: AddMultiFactorToLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddMultiFactorToLoginPolicyResponse>>;
  removeMultiFactorFromLoginPolicy(
    request: RemoveMultiFactorFromLoginPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveMultiFactorFromLoginPolicyResponse>>;
  getPasswordComplexityPolicy(
    request: GetPasswordComplexityPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPasswordComplexityPolicyResponse>>;
  getDefaultPasswordComplexityPolicy(
    request: GetDefaultPasswordComplexityPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultPasswordComplexityPolicyResponse>>;
  addCustomPasswordComplexityPolicy(
    request: AddCustomPasswordComplexityPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddCustomPasswordComplexityPolicyResponse>>;
  updateCustomPasswordComplexityPolicy(
    request: UpdateCustomPasswordComplexityPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateCustomPasswordComplexityPolicyResponse>>;
  resetPasswordComplexityPolicyToDefault(
    request: ResetPasswordComplexityPolicyToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetPasswordComplexityPolicyToDefaultResponse>>;
  /** The password age policy is not used at the moment */
  getPasswordAgePolicy(
    request: GetPasswordAgePolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPasswordAgePolicyResponse>>;
  /** The password age policy is not used at the moment */
  getDefaultPasswordAgePolicy(
    request: GetDefaultPasswordAgePolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultPasswordAgePolicyResponse>>;
  /** The password age policy is not used at the moment */
  addCustomPasswordAgePolicy(
    request: AddCustomPasswordAgePolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddCustomPasswordAgePolicyResponse>>;
  /** The password age policy is not used at the moment */
  updateCustomPasswordAgePolicy(
    request: UpdateCustomPasswordAgePolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateCustomPasswordAgePolicyResponse>>;
  /** The password age policy is not used at the moment */
  resetPasswordAgePolicyToDefault(
    request: ResetPasswordAgePolicyToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetPasswordAgePolicyToDefaultResponse>>;
  getLockoutPolicy(
    request: GetLockoutPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetLockoutPolicyResponse>>;
  getDefaultLockoutPolicy(
    request: GetDefaultLockoutPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultLockoutPolicyResponse>>;
  addCustomLockoutPolicy(
    request: AddCustomLockoutPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddCustomLockoutPolicyResponse>>;
  updateCustomLockoutPolicy(
    request: UpdateCustomLockoutPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateCustomLockoutPolicyResponse>>;
  resetLockoutPolicyToDefault(
    request: ResetLockoutPolicyToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetLockoutPolicyToDefaultResponse>>;
  getPrivacyPolicy(
    request: GetPrivacyPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPrivacyPolicyResponse>>;
  getDefaultPrivacyPolicy(
    request: GetDefaultPrivacyPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultPrivacyPolicyResponse>>;
  addCustomPrivacyPolicy(
    request: AddCustomPrivacyPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddCustomPrivacyPolicyResponse>>;
  updateCustomPrivacyPolicy(
    request: UpdateCustomPrivacyPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateCustomPrivacyPolicyResponse>>;
  resetPrivacyPolicyToDefault(
    request: ResetPrivacyPolicyToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetPrivacyPolicyToDefaultResponse>>;
  getNotificationPolicy(
    request: GetNotificationPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetNotificationPolicyResponse>>;
  getDefaultNotificationPolicy(
    request: GetDefaultNotificationPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultNotificationPolicyResponse>>;
  addCustomNotificationPolicy(
    request: AddCustomNotificationPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddCustomNotificationPolicyResponse>>;
  updateCustomNotificationPolicy(
    request: UpdateCustomNotificationPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateCustomNotificationPolicyResponse>>;
  resetNotificationPolicyToDefault(
    request: ResetNotificationPolicyToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetNotificationPolicyToDefaultResponse>>;
  getLabelPolicy(
    request: GetLabelPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetLabelPolicyResponse>>;
  getPreviewLabelPolicy(
    request: GetPreviewLabelPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPreviewLabelPolicyResponse>>;
  getDefaultLabelPolicy(
    request: GetDefaultLabelPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultLabelPolicyResponse>>;
  addCustomLabelPolicy(
    request: AddCustomLabelPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddCustomLabelPolicyResponse>>;
  updateCustomLabelPolicy(
    request: UpdateCustomLabelPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateCustomLabelPolicyResponse>>;
  activateCustomLabelPolicy(
    request: ActivateCustomLabelPolicyRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ActivateCustomLabelPolicyResponse>>;
  removeCustomLabelPolicyLogo(
    request: RemoveCustomLabelPolicyLogoRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveCustomLabelPolicyLogoResponse>>;
  removeCustomLabelPolicyLogoDark(
    request: RemoveCustomLabelPolicyLogoDarkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveCustomLabelPolicyLogoDarkResponse>>;
  removeCustomLabelPolicyIcon(
    request: RemoveCustomLabelPolicyIconRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveCustomLabelPolicyIconResponse>>;
  removeCustomLabelPolicyIconDark(
    request: RemoveCustomLabelPolicyIconDarkRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveCustomLabelPolicyIconDarkResponse>>;
  removeCustomLabelPolicyFont(
    request: RemoveCustomLabelPolicyFontRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveCustomLabelPolicyFontResponse>>;
  resetLabelPolicyToDefault(
    request: ResetLabelPolicyToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetLabelPolicyToDefaultResponse>>;
  getCustomInitMessageText(
    request: GetCustomInitMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomInitMessageTextResponse>>;
  getDefaultInitMessageText(
    request: GetDefaultInitMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultInitMessageTextResponse>>;
  setCustomInitMessageText(
    request: SetCustomInitMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetCustomInitMessageTextResponse>>;
  resetCustomInitMessageTextToDefault(
    request: ResetCustomInitMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomInitMessageTextToDefaultResponse>>;
  getCustomPasswordResetMessageText(
    request: GetCustomPasswordResetMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomPasswordResetMessageTextResponse>>;
  getDefaultPasswordResetMessageText(
    request: GetDefaultPasswordResetMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultPasswordResetMessageTextResponse>>;
  setCustomPasswordResetMessageText(
    request: SetCustomPasswordResetMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetCustomPasswordResetMessageTextResponse>>;
  resetCustomPasswordResetMessageTextToDefault(
    request: ResetCustomPasswordResetMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomPasswordResetMessageTextToDefaultResponse>>;
  getCustomVerifyEmailMessageText(
    request: GetCustomVerifyEmailMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomVerifyEmailMessageTextResponse>>;
  getDefaultVerifyEmailMessageText(
    request: GetDefaultVerifyEmailMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultVerifyEmailMessageTextResponse>>;
  setCustomVerifyEmailMessageText(
    request: SetCustomVerifyEmailMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetCustomVerifyEmailMessageTextResponse>>;
  resetCustomVerifyEmailMessageTextToDefault(
    request: ResetCustomVerifyEmailMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultResponse>>;
  getCustomVerifyPhoneMessageText(
    request: GetCustomVerifyPhoneMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomVerifyPhoneMessageTextResponse>>;
  getDefaultVerifyPhoneMessageText(
    request: GetDefaultVerifyPhoneMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultVerifyPhoneMessageTextResponse>>;
  setCustomVerifyPhoneMessageText(
    request: SetCustomVerifyPhoneMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetCustomVerifyPhoneMessageTextResponse>>;
  resetCustomVerifyPhoneMessageTextToDefault(
    request: ResetCustomVerifyPhoneMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultResponse>>;
  getCustomVerifySMSOTPMessageText(
    request: GetCustomVerifySMSOTPMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomVerifySMSOTPMessageTextResponse>>;
  getDefaultVerifySMSOTPMessageText(
    request: GetDefaultVerifySMSOTPMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultVerifySMSOTPMessageTextResponse>>;
  setCustomVerifySMSOTPMessageText(
    request: SetCustomVerifySMSOTPMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetCustomVerifySMSOTPMessageTextResponse>>;
  resetCustomVerifySMSOTPMessageTextToDefault(
    request: ResetCustomVerifySMSOTPMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomVerifySMSOTPMessageTextToDefaultResponse>>;
  getCustomVerifyEmailOTPMessageText(
    request: GetCustomVerifyEmailOTPMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomVerifyEmailOTPMessageTextResponse>>;
  getDefaultVerifyEmailOTPMessageText(
    request: GetDefaultVerifyEmailOTPMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultVerifyEmailOTPMessageTextResponse>>;
  setCustomVerifyEmailOTPMessageText(
    request: SetCustomVerifyEmailOTPMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetCustomVerifyEmailOTPMessageTextResponse>>;
  resetCustomVerifyEmailOTPMessageTextToDefault(
    request: ResetCustomVerifyEmailOTPMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomVerifyEmailOTPMessageTextToDefaultResponse>>;
  getCustomDomainClaimedMessageText(
    request: GetCustomDomainClaimedMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomDomainClaimedMessageTextResponse>>;
  getDefaultDomainClaimedMessageText(
    request: GetDefaultDomainClaimedMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultDomainClaimedMessageTextResponse>>;
  setCustomDomainClaimedMessageCustomText(
    request: SetCustomDomainClaimedMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetCustomDomainClaimedMessageTextResponse>>;
  resetCustomDomainClaimedMessageTextToDefault(
    request: ResetCustomDomainClaimedMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultResponse>>;
  getCustomPasswordlessRegistrationMessageText(
    request: GetCustomPasswordlessRegistrationMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomPasswordlessRegistrationMessageTextResponse>>;
  getDefaultPasswordlessRegistrationMessageText(
    request: GetDefaultPasswordlessRegistrationMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultPasswordlessRegistrationMessageTextResponse>>;
  setCustomPasswordlessRegistrationMessageCustomText(
    request: SetCustomPasswordlessRegistrationMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetCustomPasswordlessRegistrationMessageTextResponse>>;
  resetCustomPasswordlessRegistrationMessageTextToDefault(
    request: ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>>;
  getCustomPasswordChangeMessageText(
    request: GetCustomPasswordChangeMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomPasswordChangeMessageTextResponse>>;
  getDefaultPasswordChangeMessageText(
    request: GetDefaultPasswordChangeMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultPasswordChangeMessageTextResponse>>;
  setCustomPasswordChangeMessageCustomText(
    request: SetCustomPasswordChangeMessageTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetCustomPasswordChangeMessageTextResponse>>;
  resetCustomPasswordChangeMessageTextToDefault(
    request: ResetCustomPasswordChangeMessageTextToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultResponse>>;
  getCustomLoginTexts(
    request: GetCustomLoginTextsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetCustomLoginTextsResponse>>;
  getDefaultLoginTexts(
    request: GetDefaultLoginTextsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDefaultLoginTextsResponse>>;
  setCustomLoginText(
    request: SetCustomLoginTextsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetCustomLoginTextsResponse>>;
  resetCustomLoginTextToDefault(
    request: ResetCustomLoginTextsToDefaultRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ResetCustomLoginTextsToDefaultResponse>>;
  getOrgIDPByID(
    request: GetOrgIDPByIDRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetOrgIDPByIDResponse>>;
  listOrgIDPs(
    request: ListOrgIDPsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListOrgIDPsResponse>>;
  addOrgOIDCIDP(
    request: AddOrgOIDCIDPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddOrgOIDCIDPResponse>>;
  addOrgJWTIDP(
    request: AddOrgJWTIDPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddOrgJWTIDPResponse>>;
  deactivateOrgIDP(
    request: DeactivateOrgIDPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeactivateOrgIDPResponse>>;
  reactivateOrgIDP(
    request: ReactivateOrgIDPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReactivateOrgIDPResponse>>;
  removeOrgIDP(
    request: RemoveOrgIDPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RemoveOrgIDPResponse>>;
  updateOrgIDP(
    request: UpdateOrgIDPRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateOrgIDPResponse>>;
  updateOrgIDPOIDCConfig(
    request: UpdateOrgIDPOIDCConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateOrgIDPOIDCConfigResponse>>;
  updateOrgIDPJWTConfig(
    request: UpdateOrgIDPJWTConfigRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateOrgIDPJWTConfigResponse>>;
  /**
   * Returns all identity providers, which match the query
   * Limit should always be set, there is a default limit set by the service
   */
  listProviders(
    request: ListProvidersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListProvidersResponse>>;
  /** Returns an identity provider of the organization */
  getProviderByID(
    request: GetProviderByIDRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetProviderByIDResponse>>;
  /** Add a new OAuth2 identity provider in the organization */
  addGenericOAuthProvider(
    request: AddGenericOAuthProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGenericOAuthProviderResponse>>;
  /** Change an existing OAuth2 identity provider in the organization */
  updateGenericOAuthProvider(
    request: UpdateGenericOAuthProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGenericOAuthProviderResponse>>;
  /** Add a new OIDC identity provider in the organization */
  addGenericOIDCProvider(
    request: AddGenericOIDCProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGenericOIDCProviderResponse>>;
  /** Change an existing OIDC identity provider in the organization */
  updateGenericOIDCProvider(
    request: UpdateGenericOIDCProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGenericOIDCProviderResponse>>;
  /** Migrate an existing OIDC identity provider in the organization */
  migrateGenericOIDCProvider(
    request: MigrateGenericOIDCProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<MigrateGenericOIDCProviderResponse>>;
  /** Add a new JWT identity provider in the organization */
  addJWTProvider(
    request: AddJWTProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddJWTProviderResponse>>;
  /** Change an existing JWT identity provider in the organization */
  updateJWTProvider(
    request: UpdateJWTProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateJWTProviderResponse>>;
  /** Add a new Azure AD identity provider in the organization */
  addAzureADProvider(
    request: AddAzureADProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddAzureADProviderResponse>>;
  /** Change an existing Azure AD identity provider in the organization */
  updateAzureADProvider(
    request: UpdateAzureADProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateAzureADProviderResponse>>;
  /** Add a new GitHub identity provider in the organization */
  addGitHubProvider(
    request: AddGitHubProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGitHubProviderResponse>>;
  /** Change an existing GitHub identity provider in the organization */
  updateGitHubProvider(
    request: UpdateGitHubProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGitHubProviderResponse>>;
  /** Add a new GitHub Enterprise Server identity provider in the organization */
  addGitHubEnterpriseServerProvider(
    request: AddGitHubEnterpriseServerProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGitHubEnterpriseServerProviderResponse>>;
  /** Change an existing GitHub Enterprise Server identity provider in the organization */
  updateGitHubEnterpriseServerProvider(
    request: UpdateGitHubEnterpriseServerProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGitHubEnterpriseServerProviderResponse>>;
  /** Add a new GitLab identity provider in the organization */
  addGitLabProvider(
    request: AddGitLabProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGitLabProviderResponse>>;
  /** Change an existing GitLab identity provider in the organization */
  updateGitLabProvider(
    request: UpdateGitLabProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGitLabProviderResponse>>;
  /** Add a new self hosted GitLab identity provider in the organization */
  addGitLabSelfHostedProvider(
    request: AddGitLabSelfHostedProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGitLabSelfHostedProviderResponse>>;
  /** Change an existing self hosted GitLab identity provider in the organization */
  updateGitLabSelfHostedProvider(
    request: UpdateGitLabSelfHostedProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGitLabSelfHostedProviderResponse>>;
  /** Add a new Google identity provider in the organization */
  addGoogleProvider(
    request: AddGoogleProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddGoogleProviderResponse>>;
  /** Change an existing Google identity provider in the organization */
  updateGoogleProvider(
    request: UpdateGoogleProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateGoogleProviderResponse>>;
  /** Add a new LDAP identity provider in the organization */
  addLDAPProvider(
    request: AddLDAPProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddLDAPProviderResponse>>;
  /** Change an existing LDAP identity provider in the organization */
  updateLDAPProvider(
    request: UpdateLDAPProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateLDAPProviderResponse>>;
  /** Add a new Apple identity provider in the organization */
  addAppleProvider(
    request: AddAppleProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddAppleProviderResponse>>;
  /** Change an existing Apple identity provider in the organization */
  updateAppleProvider(
    request: UpdateAppleProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateAppleProviderResponse>>;
  /** Add a new SAML identity provider in the organization */
  addSAMLProvider(
    request: AddSAMLProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<AddSAMLProviderResponse>>;
  /** Change an existing SAML identity provider in the organization */
  updateSAMLProvider(
    request: UpdateSAMLProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateSAMLProviderResponse>>;
  /** Regenerate certificate for an existing SAML identity provider in the organization */
  regenerateSAMLProviderCertificate(
    request: RegenerateSAMLProviderCertificateRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RegenerateSAMLProviderCertificateResponse>>;
  /**
   * Remove an identity provider
   * Will remove all linked providers of this configuration on the users
   */
  deleteProvider(
    request: DeleteProviderRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteProviderResponse>>;
  listActions(
    request: ListActionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListActionsResponse>>;
  getAction(request: GetActionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetActionResponse>>;
  createAction(
    request: CreateActionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateActionResponse>>;
  updateAction(
    request: UpdateActionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UpdateActionResponse>>;
  deactivateAction(
    request: DeactivateActionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeactivateActionResponse>>;
  reactivateAction(
    request: ReactivateActionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReactivateActionResponse>>;
  deleteAction(
    request: DeleteActionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<DeleteActionResponse>>;
  listFlowTypes(
    request: ListFlowTypesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFlowTypesResponse>>;
  listFlowTriggerTypes(
    request: ListFlowTriggerTypesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListFlowTriggerTypesResponse>>;
  getFlow(request: GetFlowRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetFlowResponse>>;
  clearFlow(request: ClearFlowRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ClearFlowResponse>>;
  setTriggerActions(
    request: SetTriggerActionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetTriggerActionsResponse>>;
}

export interface ManagementServiceClient<CallOptionsExt = {}> {
  healthz(request: DeepPartial<HealthzRequest>, options?: CallOptions & CallOptionsExt): Promise<HealthzResponse>;
  getOIDCInformation(
    request: DeepPartial<GetOIDCInformationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetOIDCInformationResponse>;
  getIAM(request: DeepPartial<GetIAMRequest>, options?: CallOptions & CallOptionsExt): Promise<GetIAMResponse>;
  getSupportedLanguages(
    request: DeepPartial<GetSupportedLanguagesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetSupportedLanguagesResponse>;
  getUserByID(
    request: DeepPartial<GetUserByIDRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetUserByIDResponse>;
  getUserByLoginNameGlobal(
    request: DeepPartial<GetUserByLoginNameGlobalRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetUserByLoginNameGlobalResponse>;
  listUsers(request: DeepPartial<ListUsersRequest>, options?: CallOptions & CallOptionsExt): Promise<ListUsersResponse>;
  listUserChanges(
    request: DeepPartial<ListUserChangesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListUserChangesResponse>;
  isUserUnique(
    request: DeepPartial<IsUserUniqueRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<IsUserUniqueResponse>;
  /** deprecated: use ImportHumanUser */
  addHumanUser(
    request: DeepPartial<AddHumanUserRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddHumanUserResponse>;
  importHumanUser(
    request: DeepPartial<ImportHumanUserRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ImportHumanUserResponse>;
  addMachineUser(
    request: DeepPartial<AddMachineUserRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddMachineUserResponse>;
  deactivateUser(
    request: DeepPartial<DeactivateUserRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeactivateUserResponse>;
  reactivateUser(
    request: DeepPartial<ReactivateUserRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReactivateUserResponse>;
  lockUser(request: DeepPartial<LockUserRequest>, options?: CallOptions & CallOptionsExt): Promise<LockUserResponse>;
  unlockUser(
    request: DeepPartial<UnlockUserRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UnlockUserResponse>;
  removeUser(
    request: DeepPartial<RemoveUserRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveUserResponse>;
  updateUserName(
    request: DeepPartial<UpdateUserNameRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateUserNameResponse>;
  setUserMetadata(
    request: DeepPartial<SetUserMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetUserMetadataResponse>;
  bulkSetUserMetadata(
    request: DeepPartial<BulkSetUserMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BulkSetUserMetadataResponse>;
  listUserMetadata(
    request: DeepPartial<ListUserMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListUserMetadataResponse>;
  getUserMetadata(
    request: DeepPartial<GetUserMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetUserMetadataResponse>;
  removeUserMetadata(
    request: DeepPartial<RemoveUserMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveUserMetadataResponse>;
  bulkRemoveUserMetadata(
    request: DeepPartial<BulkRemoveUserMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BulkRemoveUserMetadataResponse>;
  getHumanProfile(
    request: DeepPartial<GetHumanProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetHumanProfileResponse>;
  updateHumanProfile(
    request: DeepPartial<UpdateHumanProfileRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateHumanProfileResponse>;
  getHumanEmail(
    request: DeepPartial<GetHumanEmailRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetHumanEmailResponse>;
  updateHumanEmail(
    request: DeepPartial<UpdateHumanEmailRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateHumanEmailResponse>;
  resendHumanInitialization(
    request: DeepPartial<ResendHumanInitializationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResendHumanInitializationResponse>;
  resendHumanEmailVerification(
    request: DeepPartial<ResendHumanEmailVerificationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResendHumanEmailVerificationResponse>;
  getHumanPhone(
    request: DeepPartial<GetHumanPhoneRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetHumanPhoneResponse>;
  updateHumanPhone(
    request: DeepPartial<UpdateHumanPhoneRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateHumanPhoneResponse>;
  removeHumanPhone(
    request: DeepPartial<RemoveHumanPhoneRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveHumanPhoneResponse>;
  resendHumanPhoneVerification(
    request: DeepPartial<ResendHumanPhoneVerificationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResendHumanPhoneVerificationResponse>;
  removeHumanAvatar(
    request: DeepPartial<RemoveHumanAvatarRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveHumanAvatarResponse>;
  /** deprecated: use SetHumanPassword */
  setHumanInitialPassword(
    request: DeepPartial<SetHumanInitialPasswordRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetHumanInitialPasswordResponse>;
  setHumanPassword(
    request: DeepPartial<SetHumanPasswordRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetHumanPasswordResponse>;
  sendHumanResetPasswordNotification(
    request: DeepPartial<SendHumanResetPasswordNotificationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SendHumanResetPasswordNotificationResponse>;
  listHumanAuthFactors(
    request: DeepPartial<ListHumanAuthFactorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListHumanAuthFactorsResponse>;
  removeHumanAuthFactorOTP(
    request: DeepPartial<RemoveHumanAuthFactorOTPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveHumanAuthFactorOTPResponse>;
  removeHumanAuthFactorU2F(
    request: DeepPartial<RemoveHumanAuthFactorU2FRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveHumanAuthFactorU2FResponse>;
  removeHumanAuthFactorOTPSMS(
    request: DeepPartial<RemoveHumanAuthFactorOTPSMSRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveHumanAuthFactorOTPSMSResponse>;
  removeHumanAuthFactorOTPEmail(
    request: DeepPartial<RemoveHumanAuthFactorOTPEmailRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveHumanAuthFactorOTPEmailResponse>;
  listHumanPasswordless(
    request: DeepPartial<ListHumanPasswordlessRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListHumanPasswordlessResponse>;
  addPasswordlessRegistration(
    request: DeepPartial<AddPasswordlessRegistrationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddPasswordlessRegistrationResponse>;
  sendPasswordlessRegistration(
    request: DeepPartial<SendPasswordlessRegistrationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SendPasswordlessRegistrationResponse>;
  removeHumanPasswordless(
    request: DeepPartial<RemoveHumanPasswordlessRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveHumanPasswordlessResponse>;
  updateMachine(
    request: DeepPartial<UpdateMachineRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateMachineResponse>;
  generateMachineSecret(
    request: DeepPartial<GenerateMachineSecretRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateMachineSecretResponse>;
  removeMachineSecret(
    request: DeepPartial<RemoveMachineSecretRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveMachineSecretResponse>;
  getMachineKeyByIDs(
    request: DeepPartial<GetMachineKeyByIDsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetMachineKeyByIDsResponse>;
  listMachineKeys(
    request: DeepPartial<ListMachineKeysRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListMachineKeysResponse>;
  addMachineKey(
    request: DeepPartial<AddMachineKeyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddMachineKeyResponse>;
  removeMachineKey(
    request: DeepPartial<RemoveMachineKeyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveMachineKeyResponse>;
  getPersonalAccessTokenByIDs(
    request: DeepPartial<GetPersonalAccessTokenByIDsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPersonalAccessTokenByIDsResponse>;
  listPersonalAccessTokens(
    request: DeepPartial<ListPersonalAccessTokensRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListPersonalAccessTokensResponse>;
  addPersonalAccessToken(
    request: DeepPartial<AddPersonalAccessTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddPersonalAccessTokenResponse>;
  removePersonalAccessToken(
    request: DeepPartial<RemovePersonalAccessTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemovePersonalAccessTokenResponse>;
  listHumanLinkedIDPs(
    request: DeepPartial<ListHumanLinkedIDPsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListHumanLinkedIDPsResponse>;
  removeHumanLinkedIDP(
    request: DeepPartial<RemoveHumanLinkedIDPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveHumanLinkedIDPResponse>;
  listUserMemberships(
    request: DeepPartial<ListUserMembershipsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListUserMembershipsResponse>;
  getMyOrg(request: DeepPartial<GetMyOrgRequest>, options?: CallOptions & CallOptionsExt): Promise<GetMyOrgResponse>;
  getOrgByDomainGlobal(
    request: DeepPartial<GetOrgByDomainGlobalRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetOrgByDomainGlobalResponse>;
  listOrgChanges(
    request: DeepPartial<ListOrgChangesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListOrgChangesResponse>;
  addOrg(request: DeepPartial<AddOrgRequest>, options?: CallOptions & CallOptionsExt): Promise<AddOrgResponse>;
  updateOrg(request: DeepPartial<UpdateOrgRequest>, options?: CallOptions & CallOptionsExt): Promise<UpdateOrgResponse>;
  deactivateOrg(
    request: DeepPartial<DeactivateOrgRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeactivateOrgResponse>;
  reactivateOrg(
    request: DeepPartial<ReactivateOrgRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReactivateOrgResponse>;
  removeOrg(request: DeepPartial<RemoveOrgRequest>, options?: CallOptions & CallOptionsExt): Promise<RemoveOrgResponse>;
  setOrgMetadata(
    request: DeepPartial<SetOrgMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetOrgMetadataResponse>;
  bulkSetOrgMetadata(
    request: DeepPartial<BulkSetOrgMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BulkSetOrgMetadataResponse>;
  listOrgMetadata(
    request: DeepPartial<ListOrgMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListOrgMetadataResponse>;
  getOrgMetadata(
    request: DeepPartial<GetOrgMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetOrgMetadataResponse>;
  removeOrgMetadata(
    request: DeepPartial<RemoveOrgMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveOrgMetadataResponse>;
  bulkRemoveOrgMetadata(
    request: DeepPartial<BulkRemoveOrgMetadataRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BulkRemoveOrgMetadataResponse>;
  listOrgDomains(
    request: DeepPartial<ListOrgDomainsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListOrgDomainsResponse>;
  addOrgDomain(
    request: DeepPartial<AddOrgDomainRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddOrgDomainResponse>;
  removeOrgDomain(
    request: DeepPartial<RemoveOrgDomainRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveOrgDomainResponse>;
  generateOrgDomainValidation(
    request: DeepPartial<GenerateOrgDomainValidationRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GenerateOrgDomainValidationResponse>;
  validateOrgDomain(
    request: DeepPartial<ValidateOrgDomainRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ValidateOrgDomainResponse>;
  setPrimaryOrgDomain(
    request: DeepPartial<SetPrimaryOrgDomainRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetPrimaryOrgDomainResponse>;
  listOrgMemberRoles(
    request: DeepPartial<ListOrgMemberRolesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListOrgMemberRolesResponse>;
  listOrgMembers(
    request: DeepPartial<ListOrgMembersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListOrgMembersResponse>;
  addOrgMember(
    request: DeepPartial<AddOrgMemberRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddOrgMemberResponse>;
  updateOrgMember(
    request: DeepPartial<UpdateOrgMemberRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateOrgMemberResponse>;
  removeOrgMember(
    request: DeepPartial<RemoveOrgMemberRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveOrgMemberResponse>;
  getProjectByID(
    request: DeepPartial<GetProjectByIDRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetProjectByIDResponse>;
  getGrantedProjectByID(
    request: DeepPartial<GetGrantedProjectByIDRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetGrantedProjectByIDResponse>;
  listProjects(
    request: DeepPartial<ListProjectsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProjectsResponse>;
  listGrantedProjects(
    request: DeepPartial<ListGrantedProjectsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListGrantedProjectsResponse>;
  listGrantedProjectRoles(
    request: DeepPartial<ListGrantedProjectRolesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListGrantedProjectRolesResponse>;
  listProjectChanges(
    request: DeepPartial<ListProjectChangesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProjectChangesResponse>;
  addProject(
    request: DeepPartial<AddProjectRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddProjectResponse>;
  updateProject(
    request: DeepPartial<UpdateProjectRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateProjectResponse>;
  deactivateProject(
    request: DeepPartial<DeactivateProjectRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeactivateProjectResponse>;
  reactivateProject(
    request: DeepPartial<ReactivateProjectRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReactivateProjectResponse>;
  removeProject(
    request: DeepPartial<RemoveProjectRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveProjectResponse>;
  listProjectRoles(
    request: DeepPartial<ListProjectRolesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProjectRolesResponse>;
  addProjectRole(
    request: DeepPartial<AddProjectRoleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddProjectRoleResponse>;
  bulkAddProjectRoles(
    request: DeepPartial<BulkAddProjectRolesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BulkAddProjectRolesResponse>;
  updateProjectRole(
    request: DeepPartial<UpdateProjectRoleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateProjectRoleResponse>;
  removeProjectRole(
    request: DeepPartial<RemoveProjectRoleRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveProjectRoleResponse>;
  listProjectMemberRoles(
    request: DeepPartial<ListProjectMemberRolesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProjectMemberRolesResponse>;
  listProjectMembers(
    request: DeepPartial<ListProjectMembersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProjectMembersResponse>;
  addProjectMember(
    request: DeepPartial<AddProjectMemberRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddProjectMemberResponse>;
  updateProjectMember(
    request: DeepPartial<UpdateProjectMemberRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateProjectMemberResponse>;
  removeProjectMember(
    request: DeepPartial<RemoveProjectMemberRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveProjectMemberResponse>;
  getAppByID(
    request: DeepPartial<GetAppByIDRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetAppByIDResponse>;
  listApps(request: DeepPartial<ListAppsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListAppsResponse>;
  listAppChanges(
    request: DeepPartial<ListAppChangesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAppChangesResponse>;
  addOIDCApp(
    request: DeepPartial<AddOIDCAppRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddOIDCAppResponse>;
  addSAMLApp(
    request: DeepPartial<AddSAMLAppRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddSAMLAppResponse>;
  addAPIApp(request: DeepPartial<AddAPIAppRequest>, options?: CallOptions & CallOptionsExt): Promise<AddAPIAppResponse>;
  /** Changes application */
  updateApp(request: DeepPartial<UpdateAppRequest>, options?: CallOptions & CallOptionsExt): Promise<UpdateAppResponse>;
  updateOIDCAppConfig(
    request: DeepPartial<UpdateOIDCAppConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateOIDCAppConfigResponse>;
  updateSAMLAppConfig(
    request: DeepPartial<UpdateSAMLAppConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateSAMLAppConfigResponse>;
  updateAPIAppConfig(
    request: DeepPartial<UpdateAPIAppConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateAPIAppConfigResponse>;
  deactivateApp(
    request: DeepPartial<DeactivateAppRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeactivateAppResponse>;
  reactivateApp(
    request: DeepPartial<ReactivateAppRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReactivateAppResponse>;
  removeApp(request: DeepPartial<RemoveAppRequest>, options?: CallOptions & CallOptionsExt): Promise<RemoveAppResponse>;
  regenerateOIDCClientSecret(
    request: DeepPartial<RegenerateOIDCClientSecretRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RegenerateOIDCClientSecretResponse>;
  regenerateAPIClientSecret(
    request: DeepPartial<RegenerateAPIClientSecretRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RegenerateAPIClientSecretResponse>;
  getAppKey(request: DeepPartial<GetAppKeyRequest>, options?: CallOptions & CallOptionsExt): Promise<GetAppKeyResponse>;
  listAppKeys(
    request: DeepPartial<ListAppKeysRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAppKeysResponse>;
  addAppKey(request: DeepPartial<AddAppKeyRequest>, options?: CallOptions & CallOptionsExt): Promise<AddAppKeyResponse>;
  removeAppKey(
    request: DeepPartial<RemoveAppKeyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveAppKeyResponse>;
  listProjectGrantChanges(
    request: DeepPartial<ListProjectGrantChangesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProjectGrantChangesResponse>;
  getProjectGrantByID(
    request: DeepPartial<GetProjectGrantByIDRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetProjectGrantByIDResponse>;
  listProjectGrants(
    request: DeepPartial<ListProjectGrantsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProjectGrantsResponse>;
  listAllProjectGrants(
    request: DeepPartial<ListAllProjectGrantsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListAllProjectGrantsResponse>;
  addProjectGrant(
    request: DeepPartial<AddProjectGrantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddProjectGrantResponse>;
  updateProjectGrant(
    request: DeepPartial<UpdateProjectGrantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateProjectGrantResponse>;
  deactivateProjectGrant(
    request: DeepPartial<DeactivateProjectGrantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeactivateProjectGrantResponse>;
  reactivateProjectGrant(
    request: DeepPartial<ReactivateProjectGrantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReactivateProjectGrantResponse>;
  removeProjectGrant(
    request: DeepPartial<RemoveProjectGrantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveProjectGrantResponse>;
  listProjectGrantMemberRoles(
    request: DeepPartial<ListProjectGrantMemberRolesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProjectGrantMemberRolesResponse>;
  listProjectGrantMembers(
    request: DeepPartial<ListProjectGrantMembersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProjectGrantMembersResponse>;
  addProjectGrantMember(
    request: DeepPartial<AddProjectGrantMemberRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddProjectGrantMemberResponse>;
  updateProjectGrantMember(
    request: DeepPartial<UpdateProjectGrantMemberRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateProjectGrantMemberResponse>;
  removeProjectGrantMember(
    request: DeepPartial<RemoveProjectGrantMemberRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveProjectGrantMemberResponse>;
  getUserGrantByID(
    request: DeepPartial<GetUserGrantByIDRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetUserGrantByIDResponse>;
  listUserGrants(
    request: DeepPartial<ListUserGrantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListUserGrantResponse>;
  addUserGrant(
    request: DeepPartial<AddUserGrantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddUserGrantResponse>;
  updateUserGrant(
    request: DeepPartial<UpdateUserGrantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateUserGrantResponse>;
  deactivateUserGrant(
    request: DeepPartial<DeactivateUserGrantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeactivateUserGrantResponse>;
  reactivateUserGrant(
    request: DeepPartial<ReactivateUserGrantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReactivateUserGrantResponse>;
  removeUserGrant(
    request: DeepPartial<RemoveUserGrantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveUserGrantResponse>;
  bulkRemoveUserGrant(
    request: DeepPartial<BulkRemoveUserGrantRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<BulkRemoveUserGrantResponse>;
  /** deprecated: please use DomainPolicy instead */
  getOrgIAMPolicy(
    request: DeepPartial<GetOrgIAMPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetOrgIAMPolicyResponse>;
  getDomainPolicy(
    request: DeepPartial<GetDomainPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDomainPolicyResponse>;
  getLoginPolicy(
    request: DeepPartial<GetLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetLoginPolicyResponse>;
  getDefaultLoginPolicy(
    request: DeepPartial<GetDefaultLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultLoginPolicyResponse>;
  addCustomLoginPolicy(
    request: DeepPartial<AddCustomLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddCustomLoginPolicyResponse>;
  updateCustomLoginPolicy(
    request: DeepPartial<UpdateCustomLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateCustomLoginPolicyResponse>;
  resetLoginPolicyToDefault(
    request: DeepPartial<ResetLoginPolicyToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetLoginPolicyToDefaultResponse>;
  listLoginPolicyIDPs(
    request: DeepPartial<ListLoginPolicyIDPsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListLoginPolicyIDPsResponse>;
  addIDPToLoginPolicy(
    request: DeepPartial<AddIDPToLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddIDPToLoginPolicyResponse>;
  removeIDPFromLoginPolicy(
    request: DeepPartial<RemoveIDPFromLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveIDPFromLoginPolicyResponse>;
  listLoginPolicySecondFactors(
    request: DeepPartial<ListLoginPolicySecondFactorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListLoginPolicySecondFactorsResponse>;
  addSecondFactorToLoginPolicy(
    request: DeepPartial<AddSecondFactorToLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddSecondFactorToLoginPolicyResponse>;
  removeSecondFactorFromLoginPolicy(
    request: DeepPartial<RemoveSecondFactorFromLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveSecondFactorFromLoginPolicyResponse>;
  listLoginPolicyMultiFactors(
    request: DeepPartial<ListLoginPolicyMultiFactorsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListLoginPolicyMultiFactorsResponse>;
  addMultiFactorToLoginPolicy(
    request: DeepPartial<AddMultiFactorToLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddMultiFactorToLoginPolicyResponse>;
  removeMultiFactorFromLoginPolicy(
    request: DeepPartial<RemoveMultiFactorFromLoginPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveMultiFactorFromLoginPolicyResponse>;
  getPasswordComplexityPolicy(
    request: DeepPartial<GetPasswordComplexityPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPasswordComplexityPolicyResponse>;
  getDefaultPasswordComplexityPolicy(
    request: DeepPartial<GetDefaultPasswordComplexityPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultPasswordComplexityPolicyResponse>;
  addCustomPasswordComplexityPolicy(
    request: DeepPartial<AddCustomPasswordComplexityPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddCustomPasswordComplexityPolicyResponse>;
  updateCustomPasswordComplexityPolicy(
    request: DeepPartial<UpdateCustomPasswordComplexityPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateCustomPasswordComplexityPolicyResponse>;
  resetPasswordComplexityPolicyToDefault(
    request: DeepPartial<ResetPasswordComplexityPolicyToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetPasswordComplexityPolicyToDefaultResponse>;
  /** The password age policy is not used at the moment */
  getPasswordAgePolicy(
    request: DeepPartial<GetPasswordAgePolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPasswordAgePolicyResponse>;
  /** The password age policy is not used at the moment */
  getDefaultPasswordAgePolicy(
    request: DeepPartial<GetDefaultPasswordAgePolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultPasswordAgePolicyResponse>;
  /** The password age policy is not used at the moment */
  addCustomPasswordAgePolicy(
    request: DeepPartial<AddCustomPasswordAgePolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddCustomPasswordAgePolicyResponse>;
  /** The password age policy is not used at the moment */
  updateCustomPasswordAgePolicy(
    request: DeepPartial<UpdateCustomPasswordAgePolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateCustomPasswordAgePolicyResponse>;
  /** The password age policy is not used at the moment */
  resetPasswordAgePolicyToDefault(
    request: DeepPartial<ResetPasswordAgePolicyToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetPasswordAgePolicyToDefaultResponse>;
  getLockoutPolicy(
    request: DeepPartial<GetLockoutPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetLockoutPolicyResponse>;
  getDefaultLockoutPolicy(
    request: DeepPartial<GetDefaultLockoutPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultLockoutPolicyResponse>;
  addCustomLockoutPolicy(
    request: DeepPartial<AddCustomLockoutPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddCustomLockoutPolicyResponse>;
  updateCustomLockoutPolicy(
    request: DeepPartial<UpdateCustomLockoutPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateCustomLockoutPolicyResponse>;
  resetLockoutPolicyToDefault(
    request: DeepPartial<ResetLockoutPolicyToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetLockoutPolicyToDefaultResponse>;
  getPrivacyPolicy(
    request: DeepPartial<GetPrivacyPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPrivacyPolicyResponse>;
  getDefaultPrivacyPolicy(
    request: DeepPartial<GetDefaultPrivacyPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultPrivacyPolicyResponse>;
  addCustomPrivacyPolicy(
    request: DeepPartial<AddCustomPrivacyPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddCustomPrivacyPolicyResponse>;
  updateCustomPrivacyPolicy(
    request: DeepPartial<UpdateCustomPrivacyPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateCustomPrivacyPolicyResponse>;
  resetPrivacyPolicyToDefault(
    request: DeepPartial<ResetPrivacyPolicyToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetPrivacyPolicyToDefaultResponse>;
  getNotificationPolicy(
    request: DeepPartial<GetNotificationPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetNotificationPolicyResponse>;
  getDefaultNotificationPolicy(
    request: DeepPartial<GetDefaultNotificationPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultNotificationPolicyResponse>;
  addCustomNotificationPolicy(
    request: DeepPartial<AddCustomNotificationPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddCustomNotificationPolicyResponse>;
  updateCustomNotificationPolicy(
    request: DeepPartial<UpdateCustomNotificationPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateCustomNotificationPolicyResponse>;
  resetNotificationPolicyToDefault(
    request: DeepPartial<ResetNotificationPolicyToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetNotificationPolicyToDefaultResponse>;
  getLabelPolicy(
    request: DeepPartial<GetLabelPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetLabelPolicyResponse>;
  getPreviewLabelPolicy(
    request: DeepPartial<GetPreviewLabelPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPreviewLabelPolicyResponse>;
  getDefaultLabelPolicy(
    request: DeepPartial<GetDefaultLabelPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultLabelPolicyResponse>;
  addCustomLabelPolicy(
    request: DeepPartial<AddCustomLabelPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddCustomLabelPolicyResponse>;
  updateCustomLabelPolicy(
    request: DeepPartial<UpdateCustomLabelPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateCustomLabelPolicyResponse>;
  activateCustomLabelPolicy(
    request: DeepPartial<ActivateCustomLabelPolicyRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ActivateCustomLabelPolicyResponse>;
  removeCustomLabelPolicyLogo(
    request: DeepPartial<RemoveCustomLabelPolicyLogoRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveCustomLabelPolicyLogoResponse>;
  removeCustomLabelPolicyLogoDark(
    request: DeepPartial<RemoveCustomLabelPolicyLogoDarkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveCustomLabelPolicyLogoDarkResponse>;
  removeCustomLabelPolicyIcon(
    request: DeepPartial<RemoveCustomLabelPolicyIconRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveCustomLabelPolicyIconResponse>;
  removeCustomLabelPolicyIconDark(
    request: DeepPartial<RemoveCustomLabelPolicyIconDarkRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveCustomLabelPolicyIconDarkResponse>;
  removeCustomLabelPolicyFont(
    request: DeepPartial<RemoveCustomLabelPolicyFontRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveCustomLabelPolicyFontResponse>;
  resetLabelPolicyToDefault(
    request: DeepPartial<ResetLabelPolicyToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetLabelPolicyToDefaultResponse>;
  getCustomInitMessageText(
    request: DeepPartial<GetCustomInitMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomInitMessageTextResponse>;
  getDefaultInitMessageText(
    request: DeepPartial<GetDefaultInitMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultInitMessageTextResponse>;
  setCustomInitMessageText(
    request: DeepPartial<SetCustomInitMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetCustomInitMessageTextResponse>;
  resetCustomInitMessageTextToDefault(
    request: DeepPartial<ResetCustomInitMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomInitMessageTextToDefaultResponse>;
  getCustomPasswordResetMessageText(
    request: DeepPartial<GetCustomPasswordResetMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomPasswordResetMessageTextResponse>;
  getDefaultPasswordResetMessageText(
    request: DeepPartial<GetDefaultPasswordResetMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultPasswordResetMessageTextResponse>;
  setCustomPasswordResetMessageText(
    request: DeepPartial<SetCustomPasswordResetMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetCustomPasswordResetMessageTextResponse>;
  resetCustomPasswordResetMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordResetMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomPasswordResetMessageTextToDefaultResponse>;
  getCustomVerifyEmailMessageText(
    request: DeepPartial<GetCustomVerifyEmailMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomVerifyEmailMessageTextResponse>;
  getDefaultVerifyEmailMessageText(
    request: DeepPartial<GetDefaultVerifyEmailMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultVerifyEmailMessageTextResponse>;
  setCustomVerifyEmailMessageText(
    request: DeepPartial<SetCustomVerifyEmailMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetCustomVerifyEmailMessageTextResponse>;
  resetCustomVerifyEmailMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyEmailMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomVerifyEmailMessageTextToDefaultResponse>;
  getCustomVerifyPhoneMessageText(
    request: DeepPartial<GetCustomVerifyPhoneMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomVerifyPhoneMessageTextResponse>;
  getDefaultVerifyPhoneMessageText(
    request: DeepPartial<GetDefaultVerifyPhoneMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultVerifyPhoneMessageTextResponse>;
  setCustomVerifyPhoneMessageText(
    request: DeepPartial<SetCustomVerifyPhoneMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetCustomVerifyPhoneMessageTextResponse>;
  resetCustomVerifyPhoneMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyPhoneMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomVerifyPhoneMessageTextToDefaultResponse>;
  getCustomVerifySMSOTPMessageText(
    request: DeepPartial<GetCustomVerifySMSOTPMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomVerifySMSOTPMessageTextResponse>;
  getDefaultVerifySMSOTPMessageText(
    request: DeepPartial<GetDefaultVerifySMSOTPMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultVerifySMSOTPMessageTextResponse>;
  setCustomVerifySMSOTPMessageText(
    request: DeepPartial<SetCustomVerifySMSOTPMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetCustomVerifySMSOTPMessageTextResponse>;
  resetCustomVerifySMSOTPMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifySMSOTPMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomVerifySMSOTPMessageTextToDefaultResponse>;
  getCustomVerifyEmailOTPMessageText(
    request: DeepPartial<GetCustomVerifyEmailOTPMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomVerifyEmailOTPMessageTextResponse>;
  getDefaultVerifyEmailOTPMessageText(
    request: DeepPartial<GetDefaultVerifyEmailOTPMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultVerifyEmailOTPMessageTextResponse>;
  setCustomVerifyEmailOTPMessageText(
    request: DeepPartial<SetCustomVerifyEmailOTPMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetCustomVerifyEmailOTPMessageTextResponse>;
  resetCustomVerifyEmailOTPMessageTextToDefault(
    request: DeepPartial<ResetCustomVerifyEmailOTPMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomVerifyEmailOTPMessageTextToDefaultResponse>;
  getCustomDomainClaimedMessageText(
    request: DeepPartial<GetCustomDomainClaimedMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomDomainClaimedMessageTextResponse>;
  getDefaultDomainClaimedMessageText(
    request: DeepPartial<GetDefaultDomainClaimedMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultDomainClaimedMessageTextResponse>;
  setCustomDomainClaimedMessageCustomText(
    request: DeepPartial<SetCustomDomainClaimedMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetCustomDomainClaimedMessageTextResponse>;
  resetCustomDomainClaimedMessageTextToDefault(
    request: DeepPartial<ResetCustomDomainClaimedMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomDomainClaimedMessageTextToDefaultResponse>;
  getCustomPasswordlessRegistrationMessageText(
    request: DeepPartial<GetCustomPasswordlessRegistrationMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomPasswordlessRegistrationMessageTextResponse>;
  getDefaultPasswordlessRegistrationMessageText(
    request: DeepPartial<GetDefaultPasswordlessRegistrationMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultPasswordlessRegistrationMessageTextResponse>;
  setCustomPasswordlessRegistrationMessageCustomText(
    request: DeepPartial<SetCustomPasswordlessRegistrationMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetCustomPasswordlessRegistrationMessageTextResponse>;
  resetCustomPasswordlessRegistrationMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse>;
  getCustomPasswordChangeMessageText(
    request: DeepPartial<GetCustomPasswordChangeMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomPasswordChangeMessageTextResponse>;
  getDefaultPasswordChangeMessageText(
    request: DeepPartial<GetDefaultPasswordChangeMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultPasswordChangeMessageTextResponse>;
  setCustomPasswordChangeMessageCustomText(
    request: DeepPartial<SetCustomPasswordChangeMessageTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetCustomPasswordChangeMessageTextResponse>;
  resetCustomPasswordChangeMessageTextToDefault(
    request: DeepPartial<ResetCustomPasswordChangeMessageTextToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomPasswordChangeMessageTextToDefaultResponse>;
  getCustomLoginTexts(
    request: DeepPartial<GetCustomLoginTextsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetCustomLoginTextsResponse>;
  getDefaultLoginTexts(
    request: DeepPartial<GetDefaultLoginTextsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDefaultLoginTextsResponse>;
  setCustomLoginText(
    request: DeepPartial<SetCustomLoginTextsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetCustomLoginTextsResponse>;
  resetCustomLoginTextToDefault(
    request: DeepPartial<ResetCustomLoginTextsToDefaultRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ResetCustomLoginTextsToDefaultResponse>;
  getOrgIDPByID(
    request: DeepPartial<GetOrgIDPByIDRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetOrgIDPByIDResponse>;
  listOrgIDPs(
    request: DeepPartial<ListOrgIDPsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListOrgIDPsResponse>;
  addOrgOIDCIDP(
    request: DeepPartial<AddOrgOIDCIDPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddOrgOIDCIDPResponse>;
  addOrgJWTIDP(
    request: DeepPartial<AddOrgJWTIDPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddOrgJWTIDPResponse>;
  deactivateOrgIDP(
    request: DeepPartial<DeactivateOrgIDPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeactivateOrgIDPResponse>;
  reactivateOrgIDP(
    request: DeepPartial<ReactivateOrgIDPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReactivateOrgIDPResponse>;
  removeOrgIDP(
    request: DeepPartial<RemoveOrgIDPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RemoveOrgIDPResponse>;
  updateOrgIDP(
    request: DeepPartial<UpdateOrgIDPRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateOrgIDPResponse>;
  updateOrgIDPOIDCConfig(
    request: DeepPartial<UpdateOrgIDPOIDCConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateOrgIDPOIDCConfigResponse>;
  updateOrgIDPJWTConfig(
    request: DeepPartial<UpdateOrgIDPJWTConfigRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateOrgIDPJWTConfigResponse>;
  /**
   * Returns all identity providers, which match the query
   * Limit should always be set, there is a default limit set by the service
   */
  listProviders(
    request: DeepPartial<ListProvidersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListProvidersResponse>;
  /** Returns an identity provider of the organization */
  getProviderByID(
    request: DeepPartial<GetProviderByIDRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetProviderByIDResponse>;
  /** Add a new OAuth2 identity provider in the organization */
  addGenericOAuthProvider(
    request: DeepPartial<AddGenericOAuthProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGenericOAuthProviderResponse>;
  /** Change an existing OAuth2 identity provider in the organization */
  updateGenericOAuthProvider(
    request: DeepPartial<UpdateGenericOAuthProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGenericOAuthProviderResponse>;
  /** Add a new OIDC identity provider in the organization */
  addGenericOIDCProvider(
    request: DeepPartial<AddGenericOIDCProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGenericOIDCProviderResponse>;
  /** Change an existing OIDC identity provider in the organization */
  updateGenericOIDCProvider(
    request: DeepPartial<UpdateGenericOIDCProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGenericOIDCProviderResponse>;
  /** Migrate an existing OIDC identity provider in the organization */
  migrateGenericOIDCProvider(
    request: DeepPartial<MigrateGenericOIDCProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<MigrateGenericOIDCProviderResponse>;
  /** Add a new JWT identity provider in the organization */
  addJWTProvider(
    request: DeepPartial<AddJWTProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddJWTProviderResponse>;
  /** Change an existing JWT identity provider in the organization */
  updateJWTProvider(
    request: DeepPartial<UpdateJWTProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateJWTProviderResponse>;
  /** Add a new Azure AD identity provider in the organization */
  addAzureADProvider(
    request: DeepPartial<AddAzureADProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddAzureADProviderResponse>;
  /** Change an existing Azure AD identity provider in the organization */
  updateAzureADProvider(
    request: DeepPartial<UpdateAzureADProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateAzureADProviderResponse>;
  /** Add a new GitHub identity provider in the organization */
  addGitHubProvider(
    request: DeepPartial<AddGitHubProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGitHubProviderResponse>;
  /** Change an existing GitHub identity provider in the organization */
  updateGitHubProvider(
    request: DeepPartial<UpdateGitHubProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGitHubProviderResponse>;
  /** Add a new GitHub Enterprise Server identity provider in the organization */
  addGitHubEnterpriseServerProvider(
    request: DeepPartial<AddGitHubEnterpriseServerProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGitHubEnterpriseServerProviderResponse>;
  /** Change an existing GitHub Enterprise Server identity provider in the organization */
  updateGitHubEnterpriseServerProvider(
    request: DeepPartial<UpdateGitHubEnterpriseServerProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGitHubEnterpriseServerProviderResponse>;
  /** Add a new GitLab identity provider in the organization */
  addGitLabProvider(
    request: DeepPartial<AddGitLabProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGitLabProviderResponse>;
  /** Change an existing GitLab identity provider in the organization */
  updateGitLabProvider(
    request: DeepPartial<UpdateGitLabProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGitLabProviderResponse>;
  /** Add a new self hosted GitLab identity provider in the organization */
  addGitLabSelfHostedProvider(
    request: DeepPartial<AddGitLabSelfHostedProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGitLabSelfHostedProviderResponse>;
  /** Change an existing self hosted GitLab identity provider in the organization */
  updateGitLabSelfHostedProvider(
    request: DeepPartial<UpdateGitLabSelfHostedProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGitLabSelfHostedProviderResponse>;
  /** Add a new Google identity provider in the organization */
  addGoogleProvider(
    request: DeepPartial<AddGoogleProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddGoogleProviderResponse>;
  /** Change an existing Google identity provider in the organization */
  updateGoogleProvider(
    request: DeepPartial<UpdateGoogleProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateGoogleProviderResponse>;
  /** Add a new LDAP identity provider in the organization */
  addLDAPProvider(
    request: DeepPartial<AddLDAPProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddLDAPProviderResponse>;
  /** Change an existing LDAP identity provider in the organization */
  updateLDAPProvider(
    request: DeepPartial<UpdateLDAPProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateLDAPProviderResponse>;
  /** Add a new Apple identity provider in the organization */
  addAppleProvider(
    request: DeepPartial<AddAppleProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddAppleProviderResponse>;
  /** Change an existing Apple identity provider in the organization */
  updateAppleProvider(
    request: DeepPartial<UpdateAppleProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateAppleProviderResponse>;
  /** Add a new SAML identity provider in the organization */
  addSAMLProvider(
    request: DeepPartial<AddSAMLProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<AddSAMLProviderResponse>;
  /** Change an existing SAML identity provider in the organization */
  updateSAMLProvider(
    request: DeepPartial<UpdateSAMLProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateSAMLProviderResponse>;
  /** Regenerate certificate for an existing SAML identity provider in the organization */
  regenerateSAMLProviderCertificate(
    request: DeepPartial<RegenerateSAMLProviderCertificateRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RegenerateSAMLProviderCertificateResponse>;
  /**
   * Remove an identity provider
   * Will remove all linked providers of this configuration on the users
   */
  deleteProvider(
    request: DeepPartial<DeleteProviderRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteProviderResponse>;
  listActions(
    request: DeepPartial<ListActionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListActionsResponse>;
  getAction(request: DeepPartial<GetActionRequest>, options?: CallOptions & CallOptionsExt): Promise<GetActionResponse>;
  createAction(
    request: DeepPartial<CreateActionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateActionResponse>;
  updateAction(
    request: DeepPartial<UpdateActionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UpdateActionResponse>;
  deactivateAction(
    request: DeepPartial<DeactivateActionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeactivateActionResponse>;
  reactivateAction(
    request: DeepPartial<ReactivateActionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReactivateActionResponse>;
  deleteAction(
    request: DeepPartial<DeleteActionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<DeleteActionResponse>;
  listFlowTypes(
    request: DeepPartial<ListFlowTypesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFlowTypesResponse>;
  listFlowTriggerTypes(
    request: DeepPartial<ListFlowTriggerTypesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListFlowTriggerTypesResponse>;
  getFlow(request: DeepPartial<GetFlowRequest>, options?: CallOptions & CallOptionsExt): Promise<GetFlowResponse>;
  clearFlow(request: DeepPartial<ClearFlowRequest>, options?: CallOptions & CallOptionsExt): Promise<ClearFlowResponse>;
  setTriggerActions(
    request: DeepPartial<SetTriggerActionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetTriggerActionsResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}
